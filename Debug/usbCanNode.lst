
usbCanNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076f0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000570  1ffe8800  0c0076f0  00010800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000007c0  1ffe8d70  0c007c60  00010d70  2**2
                  ALLOC
  4 USB_RAM       00000e00  20000000  20000000  00018000  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  6 .debug_aranges 00000d70  00000000  00000000  00010d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00020fa0  00000000  00000000  00011ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000394e  00000000  00000000  00032a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006da1  00000000  00000000  000363ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003a0c  00000000  00000000  0003d170  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000092bb  00000000  00000000  00040b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006e00  00000000  00000000  00049e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b88  00000000  00000000  00050c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000a5e  00000000  00000000  000517bf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 b1 64 00 08 99 02 00 08     .........d......
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	a1 47 00 08 99 02 00 08 00 00 00 00 99 02 00 08     .G..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0076f0 	.word	0x0c0076f0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000570 	.word	0x00000570
 8000254:	0c0076f0 	.word	0x0c0076f0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8d70 	.word	0x1ffe8d70
 8000264:	000007c0 	.word	0x000007c0
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800650d 	.word	0x0800650d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080062f1 	.word	0x080062f1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f005 f8ab 	bl	8005408 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f005 f913 	bl	80054dc <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f005 f8f2 	bl	80054c8 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <XMC_GPIO_Init+0x138>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a36      	ldr	r2, [pc, #216]	; (80004cc <XMC_GPIO_Init+0x13c>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e03c      	b.n	8000488 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	685a      	ldr	r2, [r3, #4]
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	409a      	lsls	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800041a:	7afb      	ldrb	r3, [r7, #11]
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3210      	adds	r2, #16
 800042e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	f003 0307 	and.w	r3, r3, #7
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4619      	mov	r1, r3
 800043c:	2307      	movs	r3, #7
 800043e:	408b      	lsls	r3, r1
 8000440:	43db      	mvns	r3, r3
 8000442:	ea02 0103 	and.w	r1, r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	f100 0210 	add.w	r2, r0, #16
 800044c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	08db      	lsrs	r3, r3, #3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3210      	adds	r2, #16
 8000464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7a1b      	ldrb	r3, [r3, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	ea42 0103 	orr.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f100 0210 	add.w	r2, r0, #16
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	089b      	lsrs	r3, r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3204      	adds	r2, #4
 800049c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	ea42 0103 	orr.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	1d02      	adds	r2, r0, #4
 80004ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	48028e00 	.word	0x48028e00
 80004cc:	48028f00 	.word	0x48028f00

080004d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	2003ffc0 	.word	0x2003ffc0

080004e8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004f0:	f7ff fee4 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <XMC_SCU_lDelay+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <XMC_SCU_lDelay+0x40>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e003      	b.n	8000516 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800050e:	bf00      	nop
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3f7      	bcc.n	800050e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2003ffc0 	.word	0x2003ffc0
 8000528:	431bde83 	.word	0x431bde83

0800052c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f8b3 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800053a:	f000 faad 	bl	8000a98 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000546:	f000 fad1 	bl	8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a5b      	ldrb	r3, [r3, #9]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f920 	bl	8000794 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	7a1b      	ldrb	r3, [r3, #8]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fa5b 	bl	8000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7c1b      	ldrb	r3, [r3, #16]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f934 	bl	80007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7c5b      	ldrb	r3, [r3, #17]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f957 	bl	8000820 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7c9b      	ldrb	r3, [r3, #18]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f93e 	bl	80007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7cdb      	ldrb	r3, [r3, #19]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f961 	bl	8000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	799b      	ldrb	r3, [r3, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800058e:	f000 fae7 	bl	8000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	78db      	ldrb	r3, [r3, #3]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d102      	bne.n	80005a0 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800059a:	f000 fb21 	bl	8000be0 <XMC_SCU_CLOCK_DisableSystemPll>
 800059e:	e014      	b.n	80005ca <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005a0:	f000 fb0e 	bl	8000bc0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	8899      	ldrh	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005b0:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005b6:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4608      	mov	r0, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	462a      	mov	r2, r5
 80005c4:	4623      	mov	r3, r4
 80005c6:	f000 fb1b 	bl	8000c00 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d2:	d103      	bne.n	80005dc <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80005d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d8:	f000 f862 	bl	80006a0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80005dc:	f7ff fe6e 	bl	80002bc <SystemCoreClockUpdate>
}
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bdb0      	pop	{r4, r5, r7, pc}
 80005e6:	bf00      	nop

080005e8 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	0f1b      	lsrs	r3, r3, #28
 80005f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80005fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) |= (uint32_t)mask;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <XMC_SCU_RESET_AssertPeripheralReset+0x48>)
 800060a:	441a      	add	r2, r3
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	460b      	mov	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	440b      	add	r3, r1
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4619      	mov	r1, r3
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <XMC_SCU_RESET_AssertPeripheralReset+0x48>)
 800061a:	440b      	add	r3, r1
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	430b      	orrs	r3, r1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	50004410 	.word	0x50004410

08000634 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	0f1b      	lsrs	r3, r3, #28
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000648:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) |= (uint32_t)mask;
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 8000656:	441a      	add	r2, r3
 8000658:	68f9      	ldr	r1, [r7, #12]
 800065a:	460b      	mov	r3, r1
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	440b      	add	r3, r1
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4619      	mov	r1, r3
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 8000666:	440b      	add	r3, r1
 8000668:	6819      	ldr	r1, [r3, #0]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	430b      	orrs	r3, r1
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	50004414 	.word	0x50004414

08000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000684:	f7ff ff24 	bl	80004d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000688:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 800068c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	50004600 	.word	0x50004600

080006a0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	50004600 	.word	0x50004600

080006f0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	50004600 	.word	0x50004600

08000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d108      	bne.n	800073a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	60d3      	str	r3, [r2, #12]
 8000738:	e007      	b.n	800074a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	60d3      	str	r3, [r2, #12]
  }
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	50004710 	.word	0x50004710

08000758 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000762:	bf00      	nop
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000766:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800077c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077e:	4313      	orrs	r3, r2
 8000780:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004000 	.word	0x50004000
 8000790:	50004300 	.word	0x50004300

08000794 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079e:	bf00      	nop
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ae:	4907      	ldr	r1, [pc, #28]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	50004000 	.word	0x50004000
 80007cc:	50004300 	.word	0x50004300

080007d0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004600 	.word	0x50004600

080007f8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	50004600 	.word	0x50004600

080008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	50004600 	.word	0x50004600

080008e8 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	6053      	str	r3, [r2, #4]
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0f1b      	lsrs	r3, r3, #28
 8000914:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800091c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) |= (uint32_t)mask;
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <XMC_SCU_CLOCK_GatePeripheralClock+0x48>)
 800092a:	441a      	add	r2, r3
 800092c:	68f9      	ldr	r1, [r7, #12]
 800092e:	460b      	mov	r3, r1
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	440b      	add	r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4619      	mov	r1, r3
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <XMC_SCU_CLOCK_GatePeripheralClock+0x48>)
 800093a:	440b      	add	r3, r1
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	50004644 	.word	0x50004644

08000954 <XMC_SCU_CLOCK_UngatePeripheralClock>:

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	0f1b      	lsrs	r3, r3, #28
 8000960:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000968:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) |= (uint32_t)mask;
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <XMC_SCU_CLOCK_UngatePeripheralClock+0x48>)
 8000976:	441a      	add	r2, r3
 8000978:	68f9      	ldr	r1, [r7, #12]
 800097a:	460b      	mov	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	440b      	add	r3, r1
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4619      	mov	r1, r3
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <XMC_SCU_CLOCK_UngatePeripheralClock+0x48>)
 8000986:	440b      	add	r3, r1
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	50004648 	.word	0x50004648

080009a0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009c2:	4913      	ldr	r1, [pc, #76]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009d0:	4313      	orrs	r3, r2
 80009d2:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009de:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f023 0310 	bic.w	r3, r3, #16
 80009ea:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009f8:	bf00      	nop
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	50004710 	.word	0x50004710

08000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10e      	bne.n	8000a4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff fd53 	bl	80004e8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f7ff fd4a 	bl	80004e8 <XMC_SCU_lDelay>
}
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	50004710 	.word	0x50004710

08000a60 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET |= (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <XMC_SCU_POWER_EnableUsb+0x18>)
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <XMC_SCU_POWER_EnableUsb+0x18>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000a6e:	6053      	str	r3, [r2, #4]
#else
  SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	50004200 	.word	0x50004200

08000a7c <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR |= (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <XMC_SCU_POWER_DisableUsb+0x18>)
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <XMC_SCU_POWER_DisableUsb+0x18>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000a8a:	6093      	str	r3, [r2, #8]
#else
  SCU_POWER->PWRCLR |= (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	50004200 	.word	0x50004200

08000a98 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10c      	bne.n	8000ac2 <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ab4:	bf00      	nop
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f9      	beq.n	8000ab6 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad8:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 8000ada:	2096      	movs	r0, #150	; 0x96
 8000adc:	f7ff fd04 	bl	80004e8 <XMC_SCU_lDelay>
  }
}
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	50004200 	.word	0x50004200
 8000ae8:	50004400 	.word	0x50004400

08000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000af0:	bf00      	nop
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000af4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f8      	bne.n	8000af2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b00:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b0a:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000b0c:	bf00      	nop
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f8      	bne.n	8000b0e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8000b28:	bf00      	nop
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f8      	bne.n	8000b2a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8000b44:	2032      	movs	r0, #50	; 0x32
 8000b46:	f7ff fccf 	bl	80004e8 <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1e8      	bne.n	8000b28 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	50004000 	.word	0x50004000
 8000b5c:	50004300 	.word	0x50004300

08000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b70:	4d11      	ldr	r5, [pc, #68]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b7a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b7e:	f004 fca3 	bl	80054c8 <OSCHP_GetFrequency>
 8000b82:	4602      	mov	r2, r0
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8000b86:	fba3 2302 	umull	r2, r3, r3, r2
 8000b8a:	0d1b      	lsrs	r3, r3, #20
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b90:	4323      	orrs	r3, r4
 8000b92:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b9e:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8000ba0:	bf00      	nop
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000baa:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bae:	d1f8      	bne.n	8000ba2 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8000bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	50004710 	.word	0x50004710
 8000bb8:	50004700 	.word	0x50004700
 8000bbc:	6b5fca6b 	.word	0x6b5fca6b

08000bc0 <XMC_SCU_CLOCK_EnableSystemPll>:
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bce:	f023 0302 	bic.w	r3, r3, #2
 8000bd2:	6053      	str	r3, [r2, #4]
}
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	50004710 	.word	0x50004710

08000be0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6053      	str	r3, [r2, #4]
}
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	50004710 	.word	0x50004710

08000c00 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60ba      	str	r2, [r7, #8]
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	81fb      	strh	r3, [r7, #14]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fd7f 	bl	8000718 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	f040 8099 	bne.w	8000d54 <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c22:	89fb      	ldrh	r3, [r7, #14]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d108      	bne.n	8000c3a <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8000c28:	f004 fc4e 	bl	80054c8 <OSCHP_GetFrequency>
 8000c2c:	ee07 0a90 	vmov	s15, r0
 8000c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c34:	edc7 7a05 	vstr	s15, [r7, #20]
 8000c38:	e001      	b.n	8000c3e <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8000c3a:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c3c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c5e:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8000c62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c6a:	ee17 2a90 	vmov	r2, s15
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c70:	fba3 2302 	umull	r2, r3, r3, r2
 8000c74:	0d5b      	lsrs	r3, r3, #21
 8000c76:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c78:	4a45      	ldr	r2, [pc, #276]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c84:	4a42      	ldr	r2, [pc, #264]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c90:	493f      	ldr	r1, [pc, #252]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000c98:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	0212      	lsls	r2, r2, #8
 8000ca0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ca8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cb4:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cc0:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f023 0310 	bic.w	r3, r3, #16
 8000cca:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cd8:	bf00      	nop
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce6:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cf2:	bf00      	nop
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f9      	bne.n	8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 8000d00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d08:	ee17 3a90 	vmov	r3, s15
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	0a9b      	lsrs	r3, r3, #10
 8000d16:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d18:	6a3a      	ldr	r2, [r7, #32]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d202      	bcs.n	8000d26 <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d20:	6938      	ldr	r0, [r7, #16]
 8000d22:	f000 f83d 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 8000d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	09db      	lsrs	r3, r3, #7
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0adb      	lsrs	r3, r3, #11
 8000d3c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d3e:	6a3a      	ldr	r2, [r7, #32]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d202      	bcs.n	8000d4c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d46:	6938      	ldr	r0, [r7, #16]
 8000d48:	f000 f82a 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d4c:	6a38      	ldr	r0, [r7, #32]
 8000d4e:	f000 f827 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d52:	e015      	b.n	8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d62:	4313      	orrs	r3, r2
 8000d64:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d72:	bf00      	nop
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f9      	beq.n	8000d74 <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	4bb71b00 	.word	0x4bb71b00
 8000d8c:	165e9f81 	.word	0x165e9f81
 8000d90:	50004710 	.word	0x50004710
 8000d94:	f08080ff 	.word	0xf08080ff
 8000d98:	011e54c7 	.word	0x011e54c7
 8000d9c:	00bee32f 	.word	0x00bee32f

08000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000db8:	4313      	orrs	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f7ff fb93 	bl	80004e8 <XMC_SCU_lDelay>
}
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	50004710 	.word	0x50004710

08000dcc <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	70fb      	strb	r3, [r7, #3]
 8000dde:	460b      	mov	r3, r1
 8000de0:	70bb      	strb	r3, [r7, #2]
 8000de2:	4613      	mov	r3, r2
 8000de4:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000de6:	78fa      	ldrb	r2, [r7, #3]
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000de8:	78bb      	ldrb	r3, [r7, #2]
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000df0:	431a      	orrs	r2, r3
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000df2:	787b      	ldrb	r3, [r7, #1]
 8000df4:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000df6:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	bf38      	it	cc
 8000e5a:	4613      	movcc	r3, r2
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	bf28      	it	cs
 8000e7a:	4613      	movcs	r3, r2
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <XMC_CAN_NODE_NominalBitTimeConfigure>:
 *******************************************************************************/

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b090      	sub	sp, #64	; 0x40
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 8000e92:	230c      	movs	r3, #12
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 8000e96:	230c      	movs	r3, #12
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 8000eaa:	f242 7310 	movw	r3, #10000	; 0x2710
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb4:	e067      	b.n	8000f86 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8000ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eda:	4b5b      	ldr	r3, [pc, #364]	; (8001048 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000edc:	fba3 2301 	umull	r2, r3, r3, r1
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	1aca      	subs	r2, r1, r3
 8000eec:	2a05      	cmp	r2, #5
 8000eee:	d909      	bls.n	8000f04 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	4a55      	ldr	r2, [pc, #340]	; (8001048 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	temp_tbaud++;
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	3301      	adds	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	e005      	b.n	8000f10 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	4a50      	ldr	r2, [pc, #320]	; (8001048 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00a      	beq.n	8000f2c <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8000f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	461a      	mov	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	e007      	b.n	8000f3c <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
	temp_tbaud = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d805      	bhi.n	8000f52 <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
  {
	error = temp_baudrate - can_bit_time->baudrate;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	6a3a      	ldr	r2, [r7, #32]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	e004      	b.n	8000f5c <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
  }
  else
  {
	error = can_bit_time->baudrate - temp_baudrate;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	2b14      	cmp	r3, #20
 8000f60:	d80e      	bhi.n	8000f80 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8000f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d90a      	bls.n	8000f80 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
  {
    best_brp = temp_brp;
 8000f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7c:	d200      	bcs.n	8000f80 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      break;
 8000f7e:	e005      	b.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f82:	3301      	adds	r3, #1
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	2b40      	cmp	r3, #64	; 0x40
 8000f8a:	d994      	bls.n	8000eb6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 8000f8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f96:	e02e      	b.n	8000ff6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 8000f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa0:	fb02 f203 	mul.w	r2, r2, r3
 8000fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	60fb      	str	r3, [r7, #12]
	uint32_t error;
	if (tempSamplePoint >= can_bit_time->sample_point)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	891b      	ldrh	r3, [r3, #8]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d806      	bhi.n	8000fc6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
	{
      error = tempSamplePoint  - can_bit_time->sample_point;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	e005      	b.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
	}
	else
	{
	  error = can_bit_time->sample_point  - tempSamplePoint;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	61bb      	str	r3, [r7, #24]
	}
    if (best_error > error)
 8000fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d903      	bls.n	8000fe2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 8000fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	891b      	ldrh	r3, [r3, #8]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d900      	bls.n	8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8000fee:	e005      	b.n	8000ffc <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d8cd      	bhi.n	8000f98 <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8000ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fefe 	bl	8000e08 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3b01      	subs	r3, #1
 8001010:	031b      	lsls	r3, r3, #12
 8001012:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	895b      	ldrh	r3, [r3, #10]
 800101a:	3b01      	subs	r3, #1
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001020:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	3b01      	subs	r3, #1
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 800102c:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	3b01      	subs	r3, #1
 8001032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001036:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fef3 	bl	8000e28 <XMC_CAN_NODE_DisableConfigurationChange>
}
 8001042:	3740      	adds	r7, #64	; 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	cccccccd 	.word	0xcccccccd

0800104c <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	4613      	mov	r3, r2
 800105a:	70bb      	strb	r3, [r7, #2]
  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3301      	adds	r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	78ba      	ldrb	r2, [r7, #2]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	2102      	movs	r1, #2
 8001068:	f7ff feb0 	bl	8000dcc <XMC_CAN_PanelControl>
  /* wait until panel as done the command */
  while (obj->PANCTR & CAN_PANCTR_BUSY_Msk)
 800106c:	bf00      	nop
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f8      	bne.n	800106e <XMC_CAN_AllocateMOtoNodeList+0x22>
  {
    /*Do nothing*/
  };
}
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop

08001084 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <XMC_CAN_Enable+0x34>)
 800108e:	f7ff fc61 	bl	8000954 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <XMC_CAN_Enable+0x34>)
 8001094:	f7ff face 	bl	8000634 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 0201 	bic.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 80010a4:	bf00      	nop
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	10000010 	.word	0x10000010

080010bc <XMC_CAN_GetBaudrateClockFrequency>:
#if defined(MULTICAN_PLUS)
uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency;

  switch(XMC_CAN_GetBaudrateClockSource(obj))
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f89f 	bl	8001208 <XMC_CAN_GetBaudrateClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <XMC_CAN_GetBaudrateClockFrequency+0x1a>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d004      	beq.n	80010de <XMC_CAN_GetBaudrateClockFrequency+0x22>
 80010d4:	e007      	b.n	80010e6 <XMC_CAN_GetBaudrateClockFrequency+0x2a>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
         frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80010d6:	f7ff fad3 	bl	8000680 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010da:	60f8      	str	r0, [r7, #12]
         break;
 80010dc:	e006      	b.n	80010ec <XMC_CAN_GetBaudrateClockFrequency+0x30>
    case XMC_CAN_CANCLKSRC_MCLK:
           frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
           break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
         frequency = OSCHP_GetFrequency();
 80010de:	f004 f9f3 	bl	80054c8 <OSCHP_GetFrequency>
 80010e2:	60f8      	str	r0, [r7, #12]
         break;
 80010e4:	e002      	b.n	80010ec <XMC_CAN_GetBaudrateClockFrequency+0x30>

    default:
         frequency = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
         break;
 80010ea:	bf00      	nop
  }

  return frequency;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop

080010f8 <XMC_CAN_Init>:

void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	460b      	mov	r3, r1
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	72fb      	strb	r3, [r7, #11]
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency;
  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff ffbc 	bl	8001084 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	4619      	mov	r1, r3
 8001112:	f000 f863 	bl	80011dc <XMC_CAN_SetBaudrateClockSource>

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff ffd0 	bl	80010bc <XMC_CAN_GetBaudrateClockFrequency>
 800111c:	6378      	str	r0, [r7, #52]	; 0x34

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800111e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800112a:	2000      	movs	r0, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fe8b 	bl	8000e48 <max>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800113a:	f7ff fe95 	bl	8000e68 <min>
 800113e:	6338      	str	r0, [r7, #48]	; 0x30
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 8001140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001142:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	099b      	lsrs	r3, r3, #6
 8001158:	627b      	str	r3, [r7, #36]	; 0x24

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	029a      	lsls	r2, r3, #10
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800116a:	f7ff fe7d 	bl	8000e68 <min>
 800116e:	6238      	str	r0, [r7, #32]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	6a3a      	ldr	r2, [r7, #32]
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	0a9b      	lsrs	r3, r3, #10
 800117a:	61fb      	str	r3, [r7, #28]
  freq_f = freq_f << 6;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	61fb      	str	r3, [r7, #28]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	1acb      	subs	r3, r1, r3
 800118e:	429a      	cmp	r2, r3
 8001190:	bf94      	ite	ls
 8001192:	2301      	movls	r3, #1
 8001194:	2300      	movhi	r3, #0
 8001196:	76fb      	strb	r3, [r7, #27]

  step   = (normal_divider != 0U) ? step_n : step_f;
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <XMC_CAN_Init+0xaa>
 800119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a0:	e000      	b.n	80011a4 <XMC_CAN_Init+0xac>
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	617b      	str	r3, [r7, #20]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 80011a6:	7efb      	ldrb	r3, [r7, #27]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <XMC_CAN_Init+0xb8>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <XMC_CAN_Init+0xba>
 80011b0:	2302      	movs	r3, #2
 80011b2:	74fb      	strb	r3, [r7, #19]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80011bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	0399      	lsls	r1, r3, #14
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	430b      	orrs	r3, r1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	60da      	str	r2, [r3, #12]

}
 80011d6:	3738      	adds	r7, #56	; 0x38
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <XMC_CAN_SetBaudrateClockSource>:

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80011ee:	f023 020f 	bic.w	r2, r3, #15
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
}
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	b2db      	uxtb	r3, r3
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <XMC_CAN_MO_SetIdentifier>:
}
#endif

/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10d      	bne.n	8001260 <XMC_CAN_MO_SetIdentifier+0x34>
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	6992      	ldr	r2, [r2, #24]
 800124e:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	0492      	lsls	r2, r2, #18
 8001256:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 800125a:	430a      	orrs	r2, r1
 800125c:	619a      	str	r2, [r3, #24]
 800125e:	e00b      	b.n	8001278 <XMC_CAN_MO_SetIdentifier+0x4c>
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	6992      	ldr	r2, [r2, #24]
 800126a:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
    		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8001274:	430a      	orrs	r2, r1
 8001276:	619a      	str	r2, [r3, #24]
    		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  can_mo->can_identifier = can_identifier;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6853      	ldr	r3, [r2, #4]
 8001282:	f361 031c 	bfi	r3, r1, #0, #29
 8001286:	6053      	str	r3, [r2, #4]
}
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 80012a4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	60fb      	str	r3, [r7, #12]
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	0952      	lsrs	r2, r2, #5
 80012b4:	0351      	lsls	r1, r2, #13
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	f002 021f 	and.w	r2, r2, #31
 80012bc:	0212      	lsls	r2, r2, #8
 80012be:	430a      	orrs	r2, r1
 80012c0:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	79db      	ldrb	r3, [r3, #7]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <XMC_CAN_MO_Config+0x4c>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	79db      	ldrb	r3, [r3, #7]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	b2db      	uxtb	r3, r3
  uint32_t reg;
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <XMC_CAN_MO_Config+0x4c>
 80012de:	e05c      	b.n	800139a <XMC_CAN_MO_Config+0x106>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e1b      	ldrb	r3, [r3, #24]
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <XMC_CAN_MO_Config+0x5e>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d000      	beq.n	80012f2 <XMC_CAN_MO_Config+0x5e>
 80012f0:	e053      	b.n	800139a <XMC_CAN_MO_Config+0x106>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2220      	movs	r2, #32
 80012f8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d128      	bne.n	800135a <XMC_CAN_MO_Config+0xc6>
    {
      reg = can_mo->mo_ar;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	60bb      	str	r3, [r7, #8]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001314:	60bb      	str	r3, [r7, #8]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800131e:	049b      	lsls	r3, r3, #18
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4313      	orrs	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
      can_mo->can_mo_ptr->MOAR = reg;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	60bb      	str	r3, [r7, #8]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800133c:	60bb      	str	r3, [r7, #8]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001346:	049b      	lsls	r3, r3, #18
 8001348:	461a      	mov	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4313      	orrs	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	e009      	b.n	800136e <XMC_CAN_MO_Config+0xda>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6852      	ldr	r2, [r2, #4]
 8001362:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6892      	ldr	r2, [r2, #8]
 800136c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e1b      	ldrb	r3, [r3, #24]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d108      	bne.n	8001388 <XMC_CAN_MO_Config+0xf4>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f814 	bl	80013a4 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001384:	61da      	str	r2, [r3, #28]
 8001386:	e004      	b.n	8001392 <XMC_CAN_MO_Config+0xfe>
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001390:	61da      	str	r2, [r3, #28]
    }

    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a02      	ldr	r2, [pc, #8]	; (80013a0 <XMC_CAN_MO_Config+0x10c>)
 8001398:	61da      	str	r2, [r3, #28]
                                 CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
  }
}
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	06a00040 	.word	0x06a00040

080013a4 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80013ac:	2303      	movs	r3, #3
 80013ae:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d122      	bne.n	80013fe <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2220      	movs	r2, #32
 80013be:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7b12      	ldrb	r2, [r2, #12]
 80013d2:	0612      	lsls	r2, r2, #24
 80013d4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6912      	ldr	r2, [r2, #16]
 80013e4:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6952      	ldr	r2, [r2, #20]
 80013ee:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <XMC_CAN_MO_UpdateData+0x6c>)
 80013f6:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80013fe:	2303      	movs	r3, #3
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	00280040 	.word	0x00280040

08001414 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8001442:	2304      	movs	r3, #4
 8001444:	75fb      	strb	r3, [r7, #23]
 8001446:	e00c      	b.n	8001462 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800144e:	2302      	movs	r3, #2
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	e006      	b.n	8001462 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800145c:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148e:	0adb      	lsrs	r3, r3, #11
 8001490:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80014a6:	2303      	movs	r3, #3
 80014a8:	75fb      	strb	r3, [r7, #23]
 80014aa:	e0a7      	b.n	80015fc <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d102      	bne.n	80014b8 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	75fb      	strb	r3, [r7, #23]
 80014b6:	e0a1      	b.n	80015fc <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2208      	movs	r2, #8
 80014be:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ca:	0f5b      	lsrs	r3, r3, #29
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d140      	bne.n	8001552 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	79d3      	ldrb	r3, [r2, #7]
 80014d4:	f36f 1345 	bfc	r3, #5, #1
 80014d8:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <XMC_CAN_MO_Receive+0x19c>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6853      	ldr	r3, [r2, #4]
 80014ee:	f361 031c 	bfi	r3, r1, #0, #29
 80014f2:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014fe:	0f5b      	lsrs	r3, r3, #29
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	b2d9      	uxtb	r1, r3
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	7ad3      	ldrb	r3, [r2, #11]
 800150c:	f361 1345 	bfi	r3, r1, #5, #1
 8001510:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7adb      	ldrb	r3, [r3, #11]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00d      	beq.n	800153c <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <XMC_CAN_MO_Receive+0x19c>)
 8001528:	4013      	ands	r3, r2
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6893      	ldr	r3, [r2, #8]
 8001534:	f361 031c 	bfi	r3, r1, #0, #29
 8001538:	6093      	str	r3, [r2, #8]
 800153a:	e032      	b.n	80015a2 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6893      	ldr	r3, [r2, #8]
 800154a:	f361 031c 	bfi	r3, r1, #0, #29
 800154e:	6093      	str	r3, [r2, #8]
 8001550:	e027      	b.n	80015a2 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	79d3      	ldrb	r3, [r2, #7]
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6853      	ldr	r3, [r2, #4]
 800156a:	f361 031c 	bfi	r3, r1, #0, #29
 800156e:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6893      	ldr	r3, [r2, #8]
 800157e:	f361 031c 	bfi	r3, r1, #0, #29
 8001582:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800158e:	0f5b      	lsrs	r3, r3, #29
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	7ad3      	ldrb	r3, [r2, #11]
 800159c:	f361 1345 	bfi	r3, r1, #5, #1
 80015a0:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80015ac:	0e1b      	lsrs	r3, r3, #24
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <XMC_CAN_MO_Receive+0x182>
 80015ea:	7d7b      	ldrb	r3, [r7, #21]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af63 	bne.w	80014b8 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	1ffc0000 	.word	0x1ffc0000

08001610 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001620:	d006      	beq.n	8001630 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e005      	b.n	800163c <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
}
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
 8001654:	4613      	mov	r3, r2
 8001656:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3204      	adds	r2, #4
 800166c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4619      	mov	r1, r3
 800167a:	23f8      	movs	r3, #248	; 0xf8
 800167c:	408b      	lsls	r3, r1
 800167e:	43db      	mvns	r3, r3
 8001680:	ea02 0103 	and.w	r1, r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1d02      	adds	r2, r0, #4
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3204      	adds	r2, #4
 80016a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	78f9      	ldrb	r1, [r7, #3]
 80016a8:	f001 0103 	and.w	r1, r1, #3
 80016ac:	00c9      	lsls	r1, r1, #3
 80016ae:	408b      	lsls	r3, r1
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1d02      	adds	r2, r0, #4
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e01e      	b.n	8001718 <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <XMC_USBD_lDeviceActive+0x68>)
 80016de:	2134      	movs	r1, #52	; 0x34
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10c      	bne.n	800170e <XMC_USBD_lDeviceActive+0x46>
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <XMC_USBD_lDeviceActive+0x68>)
 80016f8:	2134      	movs	r1, #52	; 0x34
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 800170e:	2301      	movs	r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3301      	adds	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7b1b      	ldrb	r3, [r3, #12]
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3db      	bcc.n	80016da <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8001722:	7bbb      	ldrb	r3, [r7, #14]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	1ffe8ef0 	.word	0x1ffe8ef0

08001734 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8001734:	b480      	push	{r7}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2234      	movs	r2, #52	; 0x34
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <XMC_USBD_lReadFifo+0xe4>)
 8001748:	4413      	add	r3, r2
 800174a:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <XMC_USBD_lReadFifo+0xe4>)
 800174e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <XMC_USBD_lReadFifo+0xe4>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3370      	adds	r3, #112	; 0x70
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d048      	beq.n	800180e <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d044      	beq.n	800180e <XMC_USBD_lReadFifo+0xda>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
 8001788:	e00a      	b.n	80017a0 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	601a      	str	r2, [r3, #0]
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3f0      	bcc.n	800178a <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d022      	beq.n	80017f6 <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e016      	b.n	80017ea <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	0099      	lsls	r1, r3, #2
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	440b      	add	r3, r1
 80017c8:	4413      	add	r3, r2
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	4611      	mov	r1, r2
 80017d0:	22ff      	movs	r2, #255	; 0xff
 80017d2:	fa02 f101 	lsl.w	r1, r2, r1
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	400a      	ands	r2, r1
 80017da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017dc:	00c9      	lsls	r1, r1, #3
 80017de:	40ca      	lsrs	r2, r1
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	3301      	adds	r3, #1
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	441a      	add	r2, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3e2      	bcc.n	80017bc <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	441a      	add	r2, r3
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	441a      	add	r2, r3
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800180e:	372c      	adds	r7, #44	; 0x2c
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	1ffe8ef0 	.word	0x1ffe8ef0

0800181c <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <XMC_USBD_lWriteFifo+0xa0>)
 8001830:	3378      	adds	r3, #120	; 0x78
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <XMC_USBD_lWriteFifo+0xa0>)
 8001844:	336a      	adds	r3, #106	; 0x6a
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e023      	b.n	80018ae <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3303      	adds	r3, #3
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800186e:	893b      	ldrh	r3, [r7, #8]
 8001870:	461a      	mov	r2, r3
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	429a      	cmp	r2, r3
 8001876:	d204      	bcs.n	8001882 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001878:	893b      	ldrh	r3, [r7, #8]
 800187a:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	e00c      	b.n	80018a2 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	601a      	str	r2, [r3, #0]
      i++;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3301      	adds	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	1d1a      	adds	r2, r3, #4
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d3ee      	bcc.n	8001888 <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
    }
    result=byte_count;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	617b      	str	r3, [r7, #20]
  }
  return result;
 80018ae:	697b      	ldr	r3, [r7, #20]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	1ffe8ef0 	.word	0x1ffe8ef0

080018c0 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	019b      	lsls	r3, r3, #6
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <XMC_USBD_lFlushTXFifo+0x80>)
 80018f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e002      	b.n	8001904 <XMC_USBD_lFlushTXFifo+0x44>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190a:	d3f8      	bcc.n	80018fe <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <XMC_USBD_lFlushTXFifo+0x80>)
 800190e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f3      	bne.n	800190c <XMC_USBD_lFlushTXFifo+0x4c>
    count = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8001928:	bf00      	nop
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60fa      	str	r2, [r7, #12]
 8001930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001934:	d3f9      	bcc.n	800192a <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	1ffe8ef0 	.word	0x1ffe8ef0

08001944 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <XMC_USBD_lFlushRXFifo+0x64>)
 8001958:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	e002      	b.n	800196c <XMC_USBD_lFlushRXFifo+0x28>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3301      	adds	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d3f8      	bcc.n	8001966 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <XMC_USBD_lFlushRXFifo+0x64>)
 8001976:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8001990:	bf00      	nop
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199c:	d3f9      	bcc.n	8001992 <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	1ffe8ef0 	.word	0x1ffe8ef0

080019ac <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80019b2:	2301      	movs	r3, #1
 80019b4:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80019be:	e005      	b.n	80019cc <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	80fb      	strh	r3, [r7, #6]
    i++;
 80019c6:	797b      	ldrb	r3, [r7, #5]
 80019c8:	3301      	adds	r3, #1
 80019ca:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d807      	bhi.n	80019e2 <XMC_USBD_lAssignTXFifo+0x36>
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <XMC_USBD_lAssignTXFifo+0x6c>)
 80019d4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	4013      	ands	r3, r2
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <XMC_USBD_lAssignTXFifo+0x6c>)
 80019e4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4013      	ands	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <XMC_USBD_lAssignTXFifo+0x6c>)
 80019f4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <XMC_USBD_lAssignTXFifo+0x6c>)
 8001a00:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	713b      	strb	r3, [r7, #4]
  }
  return result;
 8001a08:	793b      	ldrb	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	1ffe8ef0 	.word	0x1ffe8ef0

08001a1c <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <XMC_USBD_lUnassignFifo+0x34>)
 8001a28:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <XMC_USBD_lUnassignFifo+0x34>)
 8001a40:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	1ffe8ef0 	.word	0x1ffe8ef0

08001a54 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6892      	ldr	r2, [r2, #8]
 8001a6e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d909      	bls.n	8001a8a <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6892      	ldr	r2, [r2, #8]
 8001a7e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001a82:	441a      	add	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
 8001a88:	e003      	b.n	8001a92 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d119      	bne.n	8001ad4 <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	7893      	ldrb	r3, [r2, #2]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	f361 03c4 	bfi	r3, r1, #3, #2
 8001ab0:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	78d3      	ldrb	r3, [r2, #3]
 8001ab6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aba:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac6:	b2d9      	uxtb	r1, r3
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	7813      	ldrb	r3, [r2, #0]
 8001acc:	f361 0306 	bfi	r3, r1, #0, #7
 8001ad0:	7013      	strb	r3, [r2, #0]
 8001ad2:	e033      	b.n	8001b3c <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f36f 0312 	bfc	r3, #0, #19
 8001ae2:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f362 03cc 	bfi	r3, r2, #3, #10
 8001aec:	827b      	strh	r3, [r7, #18]
 8001aee:	e025      	b.n	8001b3c <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b01      	subs	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6852      	ldr	r2, [r2, #4]
 8001b0c:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8a7b      	ldrh	r3, [r7, #18]
 8001b20:	f362 03cc 	bfi	r3, r2, #3, #10
 8001b24:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f362 0312 	bfi	r3, r2, #0, #19
 8001b3a:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <XMC_USBD_lStartReadXfer+0x170>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	7b5b      	ldrb	r3, [r3, #13]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <XMC_USBD_lStartReadXfer+0x174>)
 8001b52:	3370      	adds	r3, #112	; 0x70
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b5e:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <XMC_USBD_lStartReadXfer+0x174>)
 8001b6c:	3370      	adds	r3, #112	; 0x70
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <XMC_USBD_lStartReadXfer+0x174>)
 8001b84:	3370      	adds	r3, #112	; 0x70
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <XMC_USBD_lStartReadXfer+0x174>)
 8001bac:	3370      	adds	r3, #112	; 0x70
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	1ffe8eec 	.word	0x1ffe8eec
 8001bc8:	1ffe8ef0 	.word	0x1ffe8ef0

08001bcc <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001be4:	336a      	adds	r3, #106	; 0x6a
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6892      	ldr	r2, [r2, #8]
 8001bfc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d204      	bcs.n	8001c0e <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c0c:	e008      	b.n	8001c20 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6892      	ldr	r2, [r2, #8]
 8001c16:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001c1a:	441a      	add	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f36f 0312 	bfc	r3, #0, #19
 8001c2e:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f362 03cc 	bfi	r3, r2, #3, #10
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	e06a      	b.n	8001d12 <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d110      	bne.n	8001c6c <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f362 03cc 	bfi	r3, r2, #3, #10
 8001c52:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f362 0312 	bfi	r3, r2, #0, #19
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e02b      	b.n	8001cc4 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f362 0312 	bfi	r3, r2, #0, #19
 8001c80:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6852      	ldr	r2, [r2, #4]
 8001caa:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001cae:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	f362 03cc 	bfi	r3, r2, #3, #10
 8001cc2:	81fb      	strh	r3, [r7, #14]
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <XMC_USBD_lStartWriteXfer+0x190>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	7b5b      	ldrb	r3, [r3, #13]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001cda:	336a      	adds	r3, #106	; 0x6a
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce4:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <XMC_USBD_lStartWriteXfer+0x190>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	7b5b      	ldrb	r3, [r3, #13]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d110      	bne.n	8001d12 <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001cf2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001cf8:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8001cfc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4610      	mov	r0, r2
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4082      	lsls	r2, r0
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001d1e:	336a      	adds	r3, #106	; 0x6a
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2e:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <XMC_USBD_lStartWriteXfer+0x18c>)
 8001d44:	336a      	adds	r3, #106	; 0x6a
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	1ffe8ef0 	.word	0x1ffe8ef0
 8001d5c:	1ffe8eec 	.word	0x1ffe8eec

08001d60 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001d6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8001d72:	7d3b      	ldrb	r3, [r7, #20]
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001d7c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e01a      	b.n	8001dc0 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3370      	adds	r3, #112	; 0x70
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 8001da2:	7ebb      	ldrb	r3, [r7, #26]
 8001da4:	f36f 1345 	bfc	r3, #5, #1
 8001da8:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001daa:	4a3f      	ldr	r2, [pc, #252]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3370      	adds	r3, #112	; 0x70
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d9e1      	bls.n	8001d8a <XMC_USBD_lHandleUSBReset+0x2a>
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001dc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8001dd8:	2340      	movs	r3, #64	; 0x40
 8001dda:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001dde:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e011      	b.n	8001e10 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001dee:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	3204      	adds	r2, #4
 8001dfa:	0192      	lsls	r2, r2, #6
 8001dfc:	0892      	lsrs	r2, r2, #2
 8001dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e02:	3340      	adds	r3, #64	; 0x40
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d9ea      	bls.n	8001dec <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001e16:	2010      	movs	r0, #16
 8001e18:	f7ff fd52 	bl	80018c0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fd4f 	bl	80018c0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001e22:	f7ff fd8f 	bl	8001944 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8001e2a:	7b3b      	ldrb	r3, [r7, #12]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e3c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001e44:	200f      	movs	r0, #15
 8001e46:	f000 fbf1 	bl	800262c <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f000 fc06 	bl	800265c <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e52:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8001e5a:	893b      	ldrh	r3, [r7, #8]
 8001e5c:	f36f 130a 	bfc	r3, #4, #7
 8001e60:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e64:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7b5b      	ldrb	r3, [r3, #13]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d104      	bne.n	8001e7e <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e76:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	f022 0210 	bic.w	r2, r2, #16
 8001e86:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	f022 0208 	bic.w	r2, r2, #8
 8001e90:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <XMC_USBD_lHandleUSBReset+0x148>)
 8001e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e98:	2004      	movs	r0, #4
 8001e9a:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	f000 fb1f 	bl	80024e0 <XMC_USBD_ClearEvent>
}
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	1ffe8ef0 	.word	0x1ffe8ef0

08001eac <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <XMC_USBD_lHandleOTGInt+0x44>)
 8001eb4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8001ebc:	793b      	ldrb	r3, [r7, #4]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <XMC_USBD_lHandleOTGInt+0x44>)
 8001eca:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001ece:	f36f 0382 	bfc	r3, #2, #1
 8001ed2:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <XMC_USBD_lHandleOTGInt+0x44>)
 8001ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001edc:	2001      	movs	r0, #1
 8001ede:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fb60 	bl	80025a8 <XMC_USBD_lClearEventOTG>

}
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	1ffe8ef0 	.word	0x1ffe8ef0

08001ef4 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001efc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	f36f 030a 	bfc	r3, #0, #11
 8001f0a:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f0e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001f16:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f18:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f26:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f38:	2002      	movs	r0, #2
 8001f3a:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f3e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	2209      	movs	r2, #9
 8001f4a:	f362 0385 	bfi	r3, r2, #2, #4
 8001f4e:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <XMC_USBD_lHandleEnumDone+0x74>)
 8001f52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001f5a:	200b      	movs	r0, #11
 8001f5c:	f000 fac0 	bl	80024e0 <XMC_USBD_ClearEvent>
}
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	1ffe8ef0 	.word	0x1ffe8ef0

08001f6c <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001f76:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001f7e:	4b68      	ldr	r3, [pc, #416]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001f80:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8001f88:	4b65      	ldr	r3, [pc, #404]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001f8a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8001f92:	8bfa      	ldrh	r2, [r7, #30]
 8001f94:	8b7b      	ldrh	r3, [r7, #26]
 8001f96:	4013      	ands	r3, r2
 8001f98:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8001fa4:	e0ae      	b.n	8002104 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8001fa6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fac:	fa42 f303 	asr.w	r3, r2, r3
 8001fb0:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8001fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8001fba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 809c 	beq.w	80020fa <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8001fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc6:	2234      	movs	r2, #52	; 0x34
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001fd8:	3370      	adds	r3, #112	; 0x70
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7b5b      	ldrb	r3, [r3, #13]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8001ff6:	3370      	adds	r3, #112	; 0x70
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8002002:	7c3b      	ldrb	r3, [r7, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	7913      	ldrb	r3, [r2, #4]
 8002012:	f36f 1345 	bfc	r3, #5, #1
 8002016:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7b5b      	ldrb	r3, [r3, #13]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10e      	bne.n	800203e <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800202e:	4613      	mov	r3, r2
 8002030:	075b      	lsls	r3, r3, #29
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	f103 0218 	add.w	r2, r3, #24
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	611a      	str	r2, [r3, #16]
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7b5b      	ldrb	r3, [r3, #13]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d106      	bne.n	8002054 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	441a      	add	r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8002060:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002064:	2000      	movs	r0, #0
 8002066:	2100      	movs	r1, #0
 8002068:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 800206a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800206e:	2008      	movs	r0, #8
 8002070:	4619      	mov	r1, r3
 8002072:	f000 fac3 	bl	80025fc <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8002076:	7c3b      	ldrb	r3, [r7, #16]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d034      	beq.n	80020ec <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7b5b      	ldrb	r3, [r3, #13]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	441a      	add	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	441a      	add	r2, r3
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	429a      	cmp	r2, r3
 80020c0:	d111      	bne.n	80020e6 <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	f022 0210 	bic.w	r2, r2, #16
 80020d2:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80020d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020de:	4610      	mov	r0, r2
 80020e0:	2101      	movs	r1, #1
 80020e2:	4798      	blx	r3
 80020e4:	e002      	b.n	80020ec <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 80020e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e8:	f7ff fcb4 	bl	8001a54 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f000 fa81 	bl	80025fc <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 80020fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020fe:	3301      	adds	r3, #1
 8002100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 8002104:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800210a:	fa42 f303 	asr.w	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f af49 	bne.w	8001fa6 <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8002114:	200d      	movs	r0, #13
 8002116:	f000 f9e3 	bl	80024e0 <XMC_USBD_ClearEvent>
}
 800211a:	3730      	adds	r7, #48	; 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	1ffe8ef0 	.word	0x1ffe8ef0

08002124 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800212e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8002136:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8002138:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8002144:	8abb      	ldrh	r3, [r7, #20]
 8002146:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 800214e:	e0b5      	b.n	80022bc <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8002150:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002156:	fa42 f303 	asr.w	r3, r2, r3
 800215a:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 800215c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8002164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80a3 	beq.w	80022b2 <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 800216c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002170:	2234      	movs	r2, #52	; 0x34
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8002178:	4413      	add	r3, r2
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800217c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002180:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8002182:	336a      	adds	r3, #106	; 0x6a
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800218e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	7812      	ldrb	r2, [r2, #0]
 8002198:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7b5b      	ldrb	r3, [r3, #13]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80021b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 80021bc:	336a      	adds	r3, #106	; 0x6a
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b5b      	ldrb	r3, [r3, #13]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d115      	bne.n	80021fa <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 80021ce:	7b3b      	ldrb	r3, [r7, #12]
 80021d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00f      	beq.n	80021fa <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 80021da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021dc:	f7ff fb1e 	bl	800181c <XMC_USBD_lWriteFifo>
 80021e0:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	441a      	add	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	441a      	add	r2, r3
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 80021fa:	7b3b      	ldrb	r3, [r7, #12]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04e      	beq.n	80022a4 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7b5b      	ldrb	r3, [r3, #13]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11d      	bne.n	800224a <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800220e:	897a      	ldrh	r2, [r7, #10]
 8002210:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8002214:	4013      	ands	r3, r2
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <XMC_USBD_lHandleIEPInt+0x126>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d111      	bne.n	800224a <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	441a      	add	r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	441a      	add	r2, r3
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	429a      	cmp	r2, r3
 8002254:	d123      	bne.n	800229e <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	f022 0208 	bic.w	r2, r2, #8
 800225e:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7b5b      	ldrb	r3, [r3, #13]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10e      	bne.n	8002286 <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 800226a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8002270:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002274:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002276:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800227a:	2001      	movs	r0, #1
 800227c:	fa00 f202 	lsl.w	r2, r0, r2
 8002280:	43d2      	mvns	r2, r2
 8002282:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <XMC_USBD_lHandleIEPInt+0x1b4>)
 8002288:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800228c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4610      	mov	r0, r2
 8002298:	2102      	movs	r1, #2
 800229a:	4798      	blx	r3
 800229c:	e002      	b.n	80022a4 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 800229e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022a0:	f7ff fc94 	bl	8001bcc <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f000 f98f 	bl	80025d0 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 80022b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b6:	3301      	adds	r3, #1
 80022b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 80022bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80022be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c2:	fa42 f303 	asr.w	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f47f af42 	bne.w	8002150 <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80022cc:	200e      	movs	r0, #14
 80022ce:	f000 f907 	bl	80024e0 <XMC_USBD_ClearEvent>
}
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	1ffe8ef0 	.word	0x1ffe8ef0

080022dc <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <XMC_USBD_lHandleRxFLvl+0x7c>)
 80022e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d82a      	bhi.n	8002350 <XMC_USBD_lHandleRxFLvl+0x74>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <XMC_USBD_lHandleRxFLvl+0x24>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002351 	.word	0x08002351
 8002304:	08002319 	.word	0x08002319
 8002308:	08002351 	.word	0x08002351
 800230c:	08002351 	.word	0x08002351
 8002310:	08002351 	.word	0x08002351
 8002314:	08002335 	.word	0x08002335
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8002318:	793b      	ldrb	r3, [r7, #4]
 800231a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002328:	b29b      	uxth	r3, r3
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7ff fa01 	bl	8001734 <XMC_USBD_lReadFifo>
      break;
 8002332:	e00e      	b.n	8002352 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8002334:	793b      	ldrb	r3, [r7, #4]
 8002336:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002344:	b29b      	uxth	r3, r3
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7ff f9f3 	bl	8001734 <XMC_USBD_lReadFifo>
      break;
 800234e:	e000      	b.n	8002352 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8002350:	bf00      	nop
	}
  /* no need to clear */
}
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	1ffe8ef0 	.word	0x1ffe8ef0

0800235c <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 8002366:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 800236e:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 8002370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 800237c:	7a3b      	ldrb	r3, [r7, #8]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 800238a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800238e:	2009      	movs	r0, #9
 8002390:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8002392:	2009      	movs	r0, #9
 8002394:	f000 f8a4 	bl	80024e0 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7b5b      	ldrb	r3, [r3, #13]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d119      	bne.n	80023d4 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 80023a0:	7a3b      	ldrb	r3, [r7, #8]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 80023ac:	7b3b      	ldrb	r3, [r7, #12]
 80023ae:	f36f 1304 	bfc	r3, #4, #1
 80023b2:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 80023b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 80023be:	f7ff ff8d 	bl	80022dc <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 80023c2:	7b3b      	ldrb	r3, [r7, #12]
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 80023cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 80023d4:	7a7b      	ldrb	r3, [r7, #9]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f000 f87d 	bl	80024e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 80023e6:	7a7b      	ldrb	r3, [r7, #9]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f8:	2006      	movs	r0, #6
 80023fa:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 80023fc:	2006      	movs	r0, #6
 80023fe:	f000 f86f 	bl	80024e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 8002410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002414:	2008      	movs	r0, #8
 8002416:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8002418:	2008      	movs	r0, #8
 800241a:	f000 f861 	bl	80024e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00e      	beq.n	8002448 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 800242c:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <XMC_USBD_IRQHandler+0x148>)
 800243a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800243e:	2000      	movs	r0, #0
 8002440:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f84c 	bl	80024e0 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8002448:	7a7b      	ldrb	r3, [r7, #9]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fc83 	bl	8001d60 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 800245a:	7a7b      	ldrb	r3, [r7, #9]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8002466:	f7ff fd45 	bl	8001ef4 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 800246a:	7abb      	ldrb	r3, [r7, #10]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fe54 	bl	8002124 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 800247c:	7abb      	ldrb	r3, [r7, #10]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fd6f 	bl	8001f6c <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 800248e:	7a3b      	ldrb	r3, [r7, #8]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 800249a:	f7ff fd07 	bl	8001eac <XMC_USBD_lHandleOTGInt>
  }

}
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	1ffe8ef0 	.word	0x1ffe8ef0

080024a8 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <XMC_USBD_Enable+0x18>)
 80024ae:	f7fe fa51 	bl	8000954 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <XMC_USBD_Enable+0x18>)
 80024b4:	f7fe f8be 	bl	8000634 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80024b8:	f7fe fad2 	bl	8000a60 <XMC_SCU_POWER_EnableUsb>
}
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000080 	.word	0x20000080

080024c4 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <XMC_USBD_Disable+0x18>)
 80024ca:	f7fe f88d 	bl	80005e8 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <XMC_USBD_Disable+0x18>)
 80024d0:	f7fe fa1a 	bl	8000908 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
 80024d4:	f7fe fad2 	bl	8000a7c <XMC_SCU_POWER_DisableUsb>
}
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000080 	.word	0x20000080

080024e0 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  switch(event)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b0d      	cmp	r3, #13
 80024f2:	d84c      	bhi.n	800258e <XMC_USBD_ClearEvent+0xae>
 80024f4:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <XMC_USBD_ClearEvent+0x1c>)
 80024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fa:	bf00      	nop
 80024fc:	08002535 	.word	0x08002535
 8002500:	0800258f 	.word	0x0800258f
 8002504:	0800258f 	.word	0x0800258f
 8002508:	0800258f 	.word	0x0800258f
 800250c:	0800253f 	.word	0x0800253f
 8002510:	0800258f 	.word	0x0800258f
 8002514:	08002549 	.word	0x08002549
 8002518:	08002553 	.word	0x08002553
 800251c:	0800255d 	.word	0x0800255d
 8002520:	08002567 	.word	0x08002567
 8002524:	08002571 	.word	0x08002571
 8002528:	0800257b 	.word	0x0800257b
 800252c:	0800258f 	.word	0x0800258f
 8002530:	08002585 	.word	0x08002585
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253a:	73fb      	strb	r3, [r7, #15]
	  break;
 800253c:	e028      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	737b      	strb	r3, [r7, #13]
	  break;
 8002546:	e023      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	737b      	strb	r3, [r7, #13]
	  break;
 8002550:	e01e      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	73fb      	strb	r3, [r7, #15]
	  break;
 800255a:	e019      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	73fb      	strb	r3, [r7, #15]
	  break;
 8002564:	e014      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8002566:	7b3b      	ldrb	r3, [r7, #12]
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	733b      	strb	r3, [r7, #12]
	  break;
 800256e:	e00f      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8002570:	7b7b      	ldrb	r3, [r7, #13]
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	737b      	strb	r3, [r7, #13]
	  break;
 8002578:	e00a      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	f043 0320 	orr.w	r3, r3, #32
 8002580:	737b      	strb	r3, [r7, #13]
	  break;
 8002582:	e005      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	73bb      	strb	r3, [r7, #14]
	  break;
 800258c:	e000      	b.n	8002590 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 800258e:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <XMC_USBD_ClearEvent+0xc4>)
 8002592:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	615a      	str	r2, [r3, #20]
}
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	1ffe8ef0 	.word	0x1ffe8ef0

080025a8 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <XMC_USBD_lClearEventOTG+0x24>)
 80025ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
}
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	1ffe8ef0 	.word	0x1ffe8ef0

080025d0 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <XMC_USBD_ClearEventINEP+0x28>)
 80025e4:	336a      	adds	r3, #106	; 0x6a
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	1ffe8ef0 	.word	0x1ffe8ef0

080025fc <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <XMC_USBD_ClearEventOUTEP+0x2c>)
 8002610:	3370      	adds	r3, #112	; 0x70
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	1ffe8ef0 	.word	0x1ffe8ef0

0800262c <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <XMC_USBD_EnableEventOUTEP+0x2c>)
 800263a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800263e:	4a06      	ldr	r2, [pc, #24]	; (8002658 <XMC_USBD_EnableEventOUTEP+0x2c>)
 8002640:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002644:	6951      	ldr	r1, [r2, #20]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	430a      	orrs	r2, r1
 800264a:	615a      	str	r2, [r3, #20]
}
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	1ffe8ef0 	.word	0x1ffe8ef0

0800265c <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <XMC_USBD_EnableEventINEP+0x2c>)
 800266a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800266e:	4a06      	ldr	r2, [pc, #24]	; (8002688 <XMC_USBD_EnableEventINEP+0x2c>)
 8002670:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8002674:	6911      	ldr	r1, [r2, #16]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	430a      	orrs	r2, r1
 800267a:	611a      	str	r2, [r3, #16]
}
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	1ffe8ef0 	.word	0x1ffe8ef0

0800268c <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 800269e:	793b      	ldrb	r3, [r7, #4]
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
  cap.event_power_on = 1U;
#else
  cap.event_power_off = 0U;
 80026a6:	793b      	ldrb	r3, [r7, #4]
 80026a8:	f36f 0341 	bfc	r3, #1, #1
 80026ac:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 0U;
 80026ae:	793b      	ldrb	r3, [r7, #4]
 80026b0:	f36f 0300 	bfc	r3, #0, #1
 80026b4:	713b      	strb	r3, [r7, #4]
#endif
  cap.event_high_speed = 0U;
 80026b6:	793b      	ldrb	r3, [r7, #4]
 80026b8:	f36f 1345 	bfc	r3, #5, #1
 80026bc:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80026be:	797b      	ldrb	r3, [r7, #5]
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 80026c6:	793b      	ldrb	r3, [r7, #4]
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 80026ce:	793b      	ldrb	r3, [r7, #4]
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 80026d6:	793b      	ldrb	r3, [r7, #4]
 80026d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026dc:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f36f 235f 	bfc	r3, #9, #23
 80026e4:	607b      	str	r3, [r7, #4]
  return cap;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 80026fc:	f7ff fed4 	bl	80024a8 <XMC_USBD_Enable>
  
  usbd_init = obj;
 8002700:	4a87      	ldr	r2, [pc, #540]	; (8002920 <XMC_USBD_Init+0x22c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	e00c      	b.n	8002726 <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800270c:	4a85      	ldr	r2, [pc, #532]	; (8002924 <XMC_USBD_Init+0x230>)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8002716:	4a84      	ldr	r2, [pc, #528]	; (8002928 <XMC_USBD_Init+0x234>)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	3301      	adds	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2b06      	cmp	r3, #6
 800272a:	d9ef      	bls.n	800270c <XMC_USBD_Init+0x18>
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800272c:	487f      	ldr	r0, [pc, #508]	; (800292c <XMC_USBD_Init+0x238>)
 800272e:	2100      	movs	r1, #0
 8002730:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002734:	f003 ff1b 	bl	800656e <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a7b      	ldr	r2, [pc, #492]	; (800292c <XMC_USBD_Init+0x238>)
 800273e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4a79      	ldr	r2, [pc, #484]	; (800292c <XMC_USBD_Init+0x238>)
 8002748:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <XMC_USBD_Init+0x238>)
 8002758:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002762:	4a72      	ldr	r2, [pc, #456]	; (800292c <XMC_USBD_Init+0x238>)
 8002764:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	e00c      	b.n	8002788 <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3348      	adds	r3, #72	; 0x48
 8002772:	015b      	lsls	r3, r3, #5
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	441a      	add	r2, r3
 8002778:	496c      	ldr	r1, [pc, #432]	; (800292c <XMC_USBD_Init+0x238>)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	336a      	adds	r3, #106	; 0x6a
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	3301      	adds	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b06      	cmp	r3, #6
 800278c:	d9ef      	bls.n	800276e <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e00d      	b.n	80027b0 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3358      	adds	r3, #88	; 0x58
 8002798:	015b      	lsls	r3, r3, #5
 800279a:	6a3a      	ldr	r2, [r7, #32]
 800279c:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 800279e:	4963      	ldr	r1, [pc, #396]	; (800292c <XMC_USBD_Init+0x238>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3370      	adds	r3, #112	; 0x70
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d9ee      	bls.n	8002794 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e00c      	b.n	80027d6 <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	3301      	adds	r3, #1
 80027c0:	031b      	lsls	r3, r3, #12
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	441a      	add	r2, r3
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80027c6:	4959      	ldr	r1, [pc, #356]	; (800292c <XMC_USBD_Init+0x238>)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	3378      	adds	r3, #120	; 0x78
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d9ef      	bls.n	80027bc <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <XMC_USBD_Init+0x238>)
 80027de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 80027e6:	7f3b      	ldrb	r3, [r7, #28]
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 80027ee:	7f3b      	ldrb	r3, [r7, #28]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7b5b      	ldrb	r3, [r3, #13]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 80027fe:	7f3b      	ldrb	r3, [r7, #28]
 8002800:	f043 0320 	orr.w	r3, r3, #32
 8002804:	773b      	strb	r3, [r7, #28]
 8002806:	e003      	b.n	8002810 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8002808:	7f3b      	ldrb	r3, [r7, #28]
 800280a:	f36f 1345 	bfc	r3, #5, #1
 800280e:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <XMC_USBD_Init+0x238>)
 8002812:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <XMC_USBD_Init+0x238>)
 800281c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8002824:	7efb      	ldrb	r3, [r7, #27]
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 800282c:	7e7b      	ldrb	r3, [r7, #25]
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8002834:	4b3d      	ldr	r3, [pc, #244]	; (800292c <XMC_USBD_Init+0x238>)
 8002836:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <XMC_USBD_Init+0x238>)
 8002840:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8002848:	7d3b      	ldrb	r3, [r7, #20]
 800284a:	f043 0303 	orr.w	r3, r3, #3
 800284e:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8002850:	7dbb      	ldrb	r3, [r7, #22]
 8002852:	f36f 13c7 	bfc	r3, #7, #1
 8002856:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <XMC_USBD_Init+0x238>)
 800285a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <XMC_USBD_Init+0x238>)
 8002864:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 800286c:	7c3b      	ldrb	r3, [r7, #16]
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <XMC_USBD_Init+0x238>)
 8002876:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800287e:	2010      	movs	r0, #16
 8002880:	f7ff f81e 	bl	80018c0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8002884:	f7ff f85e 	bl	8001944 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8002888:	4b28      	ldr	r3, [pc, #160]	; (800292c <XMC_USBD_Init+0x238>)
 800288a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <XMC_USBD_Init+0x238>)
 8002894:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 80028a2:	7b3b      	ldrb	r3, [r7, #12]
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 80028aa:	7b3b      	ldrb	r3, [r7, #12]
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b8:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	f043 0310 	orr.w	r3, r3, #16
 80028c0:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 80028ca:	7b7b      	ldrb	r3, [r7, #13]
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 80028d2:	7b7b      	ldrb	r3, [r7, #13]
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 80028e2:	7b3b      	ldrb	r3, [r7, #12]
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b5b      	ldrb	r3, [r3, #13]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d103      	bne.n	80028fa <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 80028f2:	7b3b      	ldrb	r3, [r7, #12]
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <XMC_USBD_Init+0x238>)
 800290c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	1ffe8eec 	.word	0x1ffe8eec
 8002924:	1ffe8d70 	.word	0x1ffe8d70
 8002928:	1ffe8d8c 	.word	0x1ffe8d8c
 800292c:	1ffe8ef0 	.word	0x1ffe8ef0

08002930 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <XMC_USBD_Uninitialize+0x38>)
 8002938:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8002940:	793b      	ldrb	r3, [r7, #4]
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <XMC_USBD_Uninitialize+0x38>)
 800294a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <XMC_USBD_Uninitialize+0x38>)
 8002954:	2100      	movs	r1, #0
 8002956:	f44f 7202 	mov.w	r2, #520	; 0x208
 800295a:	f003 fe08 	bl	800656e <memset>
  return XMC_USBD_STATUS_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	1ffe8ef0 	.word	0x1ffe8ef0

0800296c <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <XMC_USBD_DeviceConnect+0x30>)
 8002974:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 800297c:	793b      	ldrb	r3, [r7, #4]
 800297e:	f36f 0341 	bfc	r3, #1, #1
 8002982:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <XMC_USBD_DeviceConnect+0x30>)
 8002986:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	1ffe8ef0 	.word	0x1ffe8ef0

080029a0 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <XMC_USBD_DeviceDisconnect+0x30>)
 80029a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80029b0:	793b      	ldrb	r3, [r7, #4]
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <XMC_USBD_DeviceDisconnect+0x30>)
 80029ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	1ffe8ef0 	.word	0x1ffe8ef0

080029d4 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f362 03c4 	bfi	r3, r2, #3, #2
 80029e8:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <XMC_USBD_DeviceGetState+0x60>)
 80029ec:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80029f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	7b3b      	ldrb	r3, [r7, #12]
 80029f8:	f362 0341 	bfi	r3, r2, #1, #1
 80029fc:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fe62 	bl	80016c8 <XMC_USBD_lDeviceActive>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	7b3b      	ldrb	r3, [r7, #12]
 8002a0e:	f362 0382 	bfi	r3, r2, #2, #1
 8002a12:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <XMC_USBD_DeviceGetState+0x60>)
 8002a16:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002a1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	f362 0300 	bfi	r3, r2, #0, #1
 8002a26:	733b      	strb	r3, [r7, #12]
  return state;
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	1ffe8ef0 	.word	0x1ffe8ef0

08002a38 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	2234      	movs	r2, #52	; 0x34
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <XMC_USBD_EndpointReadStart+0x88>)
 8002a52:	4413      	add	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <XMC_USBD_EndpointReadStart+0x3c>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	791b      	ldrb	r3, [r3, #4]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e01c      	b.n	8002ab4 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d202      	bcs.n	8002a8a <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7fe ffd2 	bl	8001a54 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	1ffe8ef0 	.word	0x1ffe8ef0

08002ac4 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2234      	movs	r2, #52	; 0x34
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <XMC_USBD_EndpointRead+0x74>)
 8002adc:	4413      	add	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d202      	bcs.n	8002af0 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	68b8      	ldr	r0, [r7, #8]
 8002afc:	4619      	mov	r1, r3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	f003 fd2a 	bl	8006558 <memcpy>
  ep->outBytesAvailable -= length;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad2      	subs	r2, r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	441a      	add	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	e002      	b.n	8002b2c <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	1ffe8ef0 	.word	0x1ffe8ef0

08002b3c <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	2234      	movs	r2, #52	; 0x34
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <XMC_USBD_EndpointWrite+0xa4>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e031      	b.n	8002bd4 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <XMC_USBD_EndpointWrite+0x4a>
  {
    result=(int32_t)0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e026      	b.n	8002bd4 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d202      	bcs.n	8002b96 <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	f003 fcda 	bl	8006558 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8002bc8:	6938      	ldr	r0, [r7, #16]
 8002bca:	f7fe ffff 	bl	8001bcc <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	617b      	str	r3, [r7, #20]
  }
  return result;
 8002bd4:	697b      	ldr	r3, [r7, #20]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	1ffe8ef0 	.word	0x1ffe8ef0

08002be4 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	460a      	mov	r2, r1
 8002bee:	71fb      	strb	r3, [r7, #7]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <XMC_USBD_DeviceSetAddress+0x48>)
 8002bf6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	89bb      	ldrh	r3, [r7, #12]
 8002c0e:	f362 130a 	bfi	r3, r2, #4, #7
 8002c12:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <XMC_USBD_DeviceSetAddress+0x48>)
 8002c16:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	1ffe8ef0 	.word	0x1ffe8ef0

08002c30 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	71fb      	strb	r3, [r7, #7]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2234      	movs	r2, #52	; 0x34
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  if (stall)
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d040      	beq.n	8002cda <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	b25b      	sxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da1a      	bge.n	8002c96 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002c6c:	336a      	adds	r3, #106	; 0x6a
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002c76:	7abb      	ldrb	r3, [r7, #10]
 8002c78:	f043 0320 	orr.w	r3, r3, #32
 8002c7c:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002c8a:	336a      	adds	r3, #106	; 0x6a
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e01b      	b.n	8002cce <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002ca2:	3370      	adds	r3, #112	; 0x70
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8002cae:	7abb      	ldrb	r3, [r7, #10]
 8002cb0:	f043 0320 	orr.w	r3, r3, #32
 8002cb4:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4a2d      	ldr	r2, [pc, #180]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002cc2:	3370      	adds	r3, #112	; 0x70
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	7913      	ldrb	r3, [r2, #4]
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	7113      	strb	r3, [r2, #4]
 8002cd8:	e047      	b.n	8002d6a <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da1e      	bge.n	8002d20 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002cee:	336a      	adds	r3, #106	; 0x6a
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002cf8:	7abb      	ldrb	r3, [r7, #10]
 8002cfa:	f36f 1345 	bfc	r3, #5, #1
 8002cfe:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002d14:	336a      	adds	r3, #106	; 0x6a
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e01f      	b.n	8002d60 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002d2c:	3370      	adds	r3, #112	; 0x70
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8002d38:	7abb      	ldrb	r3, [r7, #10]
 8002d3a:	f36f 1345 	bfc	r3, #5, #1
 8002d3e:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <XMC_USBD_EndpointStall+0x148>)
 8002d54:	3370      	adds	r3, #112	; 0x70
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	7913      	ldrb	r3, [r2, #4]
 8002d64:	f36f 1345 	bfc	r3, #5, #1
 8002d68:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	1ffe8ef0 	.word	0x1ffe8ef0

08002d7c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2234      	movs	r2, #52	; 0x34
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <XMC_USBD_EndpointAbort+0x84>)
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d104      	bne.n	8002dc8 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	f022 0210 	bic.w	r2, r2, #16
 8002dc6:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	7913      	ldrb	r3, [r2, #4]
 8002dcc:	f36f 1345 	bfc	r3, #5, #1
 8002dd0:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	1ffe8ef0 	.word	0x1ffe8ef0

08002e04 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	71bb      	strb	r3, [r7, #6]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8002e16:	4b98      	ldr	r3, [pc, #608]	; (8003078 <XMC_USBD_EndpointConfigure+0x274>)
 8002e18:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	2234      	movs	r2, #52	; 0x34
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	4a92      	ldr	r2, [pc, #584]	; (8003078 <XMC_USBD_EndpointConfigure+0x274>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	2100      	movs	r1, #0
 8002e36:	2234      	movs	r2, #52	; 0x34
 8002e38:	f003 fb99 	bl	800656e <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	7913      	ldrb	r3, [r2, #4]
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8002e4c:	88bb      	ldrh	r3, [r7, #4]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	6853      	ldr	r3, [r2, #4]
 8002e5a:	f361 23d1 	bfi	r3, r1, #11, #7
 8002e5e:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6893      	ldr	r3, [r2, #8]
 8002e6c:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8002e70:	f361 0312 	bfi	r3, r1, #0, #19
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	e005      	b.n	8002e84 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6893      	ldr	r3, [r2, #8]
 8002e7c:	2140      	movs	r1, #64	; 0x40
 8002e7e:	f361 0312 	bfi	r3, r1, #0, #19
 8002e82:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4a7a      	ldr	r2, [pc, #488]	; (800307c <XMC_USBD_EndpointConfigure+0x278>)
 8002e92:	441a      	add	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	4a76      	ldr	r2, [pc, #472]	; (8003080 <XMC_USBD_EndpointConfigure+0x27c>)
 8002ea6:	441a      	add	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b72      	ldr	r3, [pc, #456]	; (8003084 <XMC_USBD_EndpointConfigure+0x280>)
 8002eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <XMC_USBD_EndpointConfigure+0x284>)
 8002ed0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <XMC_USBD_EndpointConfigure+0xe8>
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d17a      	bne.n	8002fe2 <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4a60      	ldr	r2, [pc, #384]	; (8003078 <XMC_USBD_EndpointConfigure+0x274>)
 8002ef8:	336a      	adds	r3, #106	; 0x6a
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f08:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	7bbb      	ldrb	r3, [r7, #14]
 8002f14:	f362 0383 	bfi	r3, r2, #2, #2
 8002f18:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8002f1a:	79bb      	ldrb	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d124      	bne.n	8002f6a <XMC_USBD_EndpointConfigure+0x166>
    {
			switch(ep_max_packet_size)
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d014      	beq.n	8002f50 <XMC_USBD_EndpointConfigure+0x14c>
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	dc02      	bgt.n	8002f30 <XMC_USBD_EndpointConfigure+0x12c>
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d016      	beq.n	8002f5c <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002f2e:	e01b      	b.n	8002f68 <XMC_USBD_EndpointConfigure+0x164>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d007      	beq.n	8002f44 <XMC_USBD_EndpointConfigure+0x140>
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d000      	beq.n	8002f3a <XMC_USBD_EndpointConfigure+0x136>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8002f38:	e016      	b.n	8002f68 <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
			{
				case (64U):
				data.b.mps = 0x0U;
 8002f3a:	89bb      	ldrh	r3, [r7, #12]
 8002f3c:	f36f 030a 	bfc	r3, #0, #11
 8002f40:	81bb      	strh	r3, [r7, #12]
				break;
 8002f42:	e011      	b.n	8002f68 <XMC_USBD_EndpointConfigure+0x164>
				case (32U):
				data.b.mps = 0x1U;
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f362 030a 	bfi	r3, r2, #0, #11
 8002f4c:	81bb      	strh	r3, [r7, #12]
				break;
 8002f4e:	e00b      	b.n	8002f68 <XMC_USBD_EndpointConfigure+0x164>
				case (16U):
				data.b.mps = 0x2U;
 8002f50:	89bb      	ldrh	r3, [r7, #12]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f362 030a 	bfi	r3, r2, #0, #11
 8002f58:	81bb      	strh	r3, [r7, #12]
				break;
 8002f5a:	e005      	b.n	8002f68 <XMC_USBD_EndpointConfigure+0x164>
				case (8U):
				data.b.mps = 0x3U;
 8002f5c:	89bb      	ldrh	r3, [r7, #12]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f362 030a 	bfi	r3, r2, #0, #11
 8002f64:	81bb      	strh	r3, [r7, #12]
				break;
 8002f66:	bf00      	nop
 8002f68:	e007      	b.n	8002f7a <XMC_USBD_EndpointConfigure+0x176>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8002f6a:	88bb      	ldrh	r3, [r7, #4]
 8002f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	89bb      	ldrh	r3, [r7, #12]
 8002f74:	f362 030a 	bfi	r3, r2, #0, #11
 8002f78:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	f36f 1345 	bfc	r3, #5, #1
 8002f88:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8002f8a:	f7fe fd0f 	bl	80019ac <XMC_USBD_lAssignTXFifo>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	b2d9      	uxtb	r1, r3
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	8893      	ldrh	r3, [r2, #4]
 8002f9a:	f361 1389 	bfi	r3, r1, #6, #4
 8002f9e:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	889b      	ldrh	r3, [r3, #4]
 8002fa4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	f362 1389 	bfi	r3, r2, #6, #4
 8002fb0:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <XMC_USBD_EndpointConfigure+0x274>)
 8002fbe:	336a      	adds	r3, #106	; 0x6a
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8002fc8:	8a3a      	ldrh	r2, [r7, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	408b      	lsls	r3, r1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <XMC_USBD_EndpointConfigure+0x1f2>
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d173      	bne.n	80030de <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <XMC_USBD_EndpointConfigure+0x274>)
 8003002:	3370      	adds	r3, #112	; 0x70
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 800300e:	7a7b      	ldrb	r3, [r7, #9]
 8003010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003014:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8003016:	79bb      	ldrb	r3, [r7, #6]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	b2da      	uxtb	r2, r3
 800301e:	7abb      	ldrb	r3, [r7, #10]
 8003020:	f362 0383 	bfi	r3, r2, #2, #2
 8003024:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8003026:	79bb      	ldrb	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d12f      	bne.n	800308c <XMC_USBD_EndpointConfigure+0x288>
		{
			switch(ep_max_packet_size)
 800302c:	88bb      	ldrh	r3, [r7, #4]
 800302e:	2b10      	cmp	r3, #16
 8003030:	d014      	beq.n	800305c <XMC_USBD_EndpointConfigure+0x258>
 8003032:	2b10      	cmp	r3, #16
 8003034:	dc02      	bgt.n	800303c <XMC_USBD_EndpointConfigure+0x238>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d016      	beq.n	8003068 <XMC_USBD_EndpointConfigure+0x264>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 800303a:	e01b      	b.n	8003074 <XMC_USBD_EndpointConfigure+0x270>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 800303c:	2b20      	cmp	r3, #32
 800303e:	d007      	beq.n	8003050 <XMC_USBD_EndpointConfigure+0x24c>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d000      	beq.n	8003046 <XMC_USBD_EndpointConfigure+0x242>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8003044:	e016      	b.n	8003074 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
			{
				case (64U):
					data.b.mps = 0x0U;
 8003046:	893b      	ldrh	r3, [r7, #8]
 8003048:	f36f 030a 	bfc	r3, #0, #11
 800304c:	813b      	strh	r3, [r7, #8]
					break;
 800304e:	e011      	b.n	8003074 <XMC_USBD_EndpointConfigure+0x270>
				case (32U):
					data.b.mps = 0x1U;
 8003050:	893b      	ldrh	r3, [r7, #8]
 8003052:	2201      	movs	r2, #1
 8003054:	f362 030a 	bfi	r3, r2, #0, #11
 8003058:	813b      	strh	r3, [r7, #8]
					break;
 800305a:	e00b      	b.n	8003074 <XMC_USBD_EndpointConfigure+0x270>
				case (16U):
					data.b.mps = 0x2U;
 800305c:	893b      	ldrh	r3, [r7, #8]
 800305e:	2202      	movs	r2, #2
 8003060:	f362 030a 	bfi	r3, r2, #0, #11
 8003064:	813b      	strh	r3, [r7, #8]
					break;
 8003066:	e005      	b.n	8003074 <XMC_USBD_EndpointConfigure+0x270>
				case (8U):
					data.b.mps = 0x3U;
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	2203      	movs	r2, #3
 800306c:	f362 030a 	bfi	r3, r2, #0, #11
 8003070:	813b      	strh	r3, [r7, #8]
					break;
 8003072:	bf00      	nop
 8003074:	e012      	b.n	800309c <XMC_USBD_EndpointConfigure+0x298>
 8003076:	bf00      	nop
 8003078:	1ffe8ef0 	.word	0x1ffe8ef0
 800307c:	20000700 	.word	0x20000700
 8003080:	20000000 	.word	0x20000000
 8003084:	1ffe8d8c 	.word	0x1ffe8d8c
 8003088:	1ffe8d70 	.word	0x1ffe8d70
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 800308c:	88bb      	ldrh	r3, [r7, #4]
 800308e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003092:	b29a      	uxth	r2, r3
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	f362 030a 	bfi	r3, r2, #0, #11
 800309a:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f043 0310 	orr.w	r3, r3, #16
 80030a2:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 80030a4:	7abb      	ldrb	r3, [r7, #10]
 80030a6:	f36f 1345 	bfc	r3, #5, #1
 80030aa:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <XMC_USBD_EndpointConfigure+0x2f0>)
 80030b8:	3370      	adds	r3, #112	; 0x70
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80030c4:	8a7a      	ldrh	r2, [r7, #18]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	2301      	movs	r3, #1
 80030d4:	408b      	lsls	r3, r1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <XMC_USBD_EndpointConfigure+0x2f0>)
 80030e0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	1ffe8ef0 	.word	0x1ffe8ef0

080030f8 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	2234      	movs	r2, #52	; 0x34
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a54      	ldr	r2, [pc, #336]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003110:	4413      	add	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 800311a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	4093      	lsls	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	791b      	ldrb	r3, [r3, #4]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e085      	b.n	8003254 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8003148:	7c7b      	ldrb	r3, [r7, #17]
 800314a:	f36f 13c7 	bfc	r3, #7, #1
 800314e:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003156:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	f043 0308 	orr.w	r3, r3, #8
 800315e:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8003160:	7cbb      	ldrb	r3, [r7, #18]
 8003162:	f36f 1345 	bfc	r3, #5, #1
 8003166:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	7913      	ldrb	r3, [r2, #4]
 800316c:	f36f 0382 	bfc	r3, #2, #1
 8003170:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	7913      	ldrb	r3, [r2, #4]
 8003176:	f36f 1345 	bfc	r3, #5, #1
 800317a:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	f022 0210 	bic.w	r2, r2, #16
 8003184:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <XMC_USBD_EndpointUnconfigure+0xb4>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d112      	bne.n	80031d2 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 80031b8:	336a      	adds	r3, #106	; 0x6a
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80031c2:	89ba      	ldrh	r2, [r7, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <XMC_USBD_EndpointUnconfigure+0xf6>
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	791b      	ldrb	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d123      	bne.n	8003236 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 80031fa:	3370      	adds	r3, #112	; 0x70
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8003206:	89fa      	ldrh	r2, [r7, #14]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	b29b      	uxth	r3, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <XMC_USBD_EndpointUnconfigure+0x16c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	7b5b      	ldrb	r3, [r3, #13]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10a      	bne.n	8003236 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003222:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003226:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003228:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800322c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	43d2      	mvns	r2, r2
 8003232:	400a      	ands	r2, r1
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <XMC_USBD_EndpointUnconfigure+0x168>)
 8003238:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fbe6 	bl	8001a1c <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8003254:	7ffb      	ldrb	r3, [r7, #31]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	1ffe8ef0 	.word	0x1ffe8ef0
 8003264:	1ffe8eec 	.word	0x1ffe8eec

08003268 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <XMC_USBD_GetFrameNumber+0x28>)
 8003270:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800327e:	b29b      	uxth	r3, r3
 8003280:	80fb      	strh	r3, [r7, #6]
  return result;
 8003282:	88fb      	ldrh	r3, [r7, #6]
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	1ffe8ef0 	.word	0x1ffe8ef0

08003294 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <XMC_USBD_IsEnumDone+0x34>)
 800329a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <XMC_USBD_IsEnumDone+0x28>
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <XMC_USBD_IsEnumDone+0x34>)
 80032aa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <XMC_USBD_IsEnumDone+0x28>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <XMC_USBD_IsEnumDone+0x2a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	1ffe8ef0 	.word	0x1ffe8ef0

080032cc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <_sbrk+0x5c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <_sbrk+0x5c>)
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <_sbrk+0x60>)
 80032e0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_sbrk+0x5c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3303      	adds	r3, #3
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <_sbrk+0x5c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <_sbrk+0x64>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d207      	bcs.n	8003310 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <_sbrk+0x5c>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <_sbrk+0x5c>)
 800330a:	6013      	str	r3, [r2, #0]
    return (base);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e006      	b.n	800331e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8003310:	f003 f8f6 	bl	8006500 <__errno>
 8003314:	4602      	mov	r2, r0
 8003316:	230c      	movs	r3, #12
 8003318:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	1ffe8da8 	.word	0x1ffe8da8
 800332c:	20000e00 	.word	0x20000e00
 8003330:	2003ffc0 	.word	0x2003ffc0

08003334 <_init>:

/* Init */
void _init(void)
{}
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	603a      	str	r2, [r7, #0]
 800334a:	80fb      	strh	r3, [r7, #6]
 800334c:	460b      	mov	r3, r1
 800334e:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 8003360:	2300      	movs	r3, #0
 8003362:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 8003364:	7a7b      	ldrb	r3, [r7, #9]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d008      	beq.n	800337c <USBD_VCOM_Event_GetDescriptor+0x3c>
 800336a:	2b03      	cmp	r3, #3
 800336c:	d00b      	beq.n	8003386 <USBD_VCOM_Event_GetDescriptor+0x46>
 800336e:	2b01      	cmp	r3, #1
 8003370:	d121      	bne.n	80033b6 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8003374:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8003376:	2312      	movs	r3, #18
 8003378:	817b      	strh	r3, [r7, #10]
			break;
 800337a:	e01c      	b.n	80033b6 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <USBD_VCOM_Event_GetDescriptor+0x90>)
 800337e:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 8003380:	233e      	movs	r3, #62	; 0x3e
 8003382:	817b      	strh	r3, [r7, #10]
			break;
 8003384:	e017      	b.n	80033b6 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8003386:	7a3b      	ldrb	r3, [r7, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d009      	beq.n	80033a0 <USBD_VCOM_Event_GetDescriptor+0x60>
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00c      	beq.n	80033aa <USBD_VCOM_Event_GetDescriptor+0x6a>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d000      	beq.n	8003396 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8003394:	e00e      	b.n	80033b4 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8003398:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 800339a:	2304      	movs	r3, #4
 800339c:	817b      	strh	r3, [r7, #10]
					break;
 800339e:	e009      	b.n	80033b4 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <USBD_VCOM_Event_GetDescriptor+0x98>)
 80033a2:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 80033a4:	2312      	movs	r3, #18
 80033a6:	817b      	strh	r3, [r7, #10]
					break;
 80033a8:	e004      	b.n	80033b4 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <USBD_VCOM_Event_GetDescriptor+0x9c>)
 80033ac:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 80033ae:	2310      	movs	r3, #16
 80033b0:	817b      	strh	r3, [r7, #10]
					break;
 80033b2:	bf00      	nop
			}
			break;
 80033b4:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	601a      	str	r2, [r3, #0]
	return size;
 80033bc:	897b      	ldrh	r3, [r7, #10]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	080070b4 	.word	0x080070b4
 80033d0:	080070c8 	.word	0x080070c8
 80033d4:	08007108 	.word	0x08007108
 80033d8:	08007170 	.word	0x08007170
 80033dc:	080071d8 	.word	0x080071d8

080033e0 <Endpoint_SelectEndpoint>:
	 *
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <Endpoint_SelectEndpoint+0x30>)
 80033f4:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <Endpoint_SelectEndpoint+0x30>)
 8003402:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	1ffe93e8 	.word	0x1ffe93e8

08003414 <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <Endpoint_IsSETUPReceived+0x28>)
 800341a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800341e:	b2db      	uxtb	r3, r3
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
	}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	1ffe93e8 	.word	0x1ffe93e8

08003440 <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <Endpoint_ClearSETUP+0x1c>)
 8003446:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800344a:	f022 0202 	bic.w	r2, r2, #2
 800344e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	1ffe93e8 	.word	0x1ffe93e8

08003460 <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

	}
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <Endpoint_IsINReady+0x54>)
 8003474:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003478:	461a      	mov	r2, r3
 800347a:	232c      	movs	r3, #44	; 0x2c
 800347c:	fb03 f302 	mul.w	r3, r3, r2
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <Endpoint_IsINReady+0x54>)
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <Endpoint_IsINReady+0x3e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <Endpoint_IsINReady+0x3e>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <Endpoint_IsINReady+0x40>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
	}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	1ffe93e8 	.word	0x1ffe93e8

080034c4 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <Endpoint_IsOUTReceived+0x40>)
 80034cc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80034d0:	461a      	mov	r2, r3
 80034d2:	232c      	movs	r3, #44	; 0x2c
 80034d4:	fb03 f302 	mul.w	r3, r3, r2
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <Endpoint_IsOUTReceived+0x40>)
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
	}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	1ffe93e8 	.word	0x1ffe93e8

08003508 <Endpoint_BytesInEndpoint>:
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <Endpoint_BytesInEndpoint+0x44>)
 8003510:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003514:	461a      	mov	r2, r3
 8003516:	232c      	movs	r3, #44	; 0x2c
 8003518:	fb03 f302 	mul.w	r3, r3, r2
 800351c:	4a0b      	ldr	r2, [pc, #44]	; (800354c <Endpoint_BytesInEndpoint+0x44>)
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	607b      	str	r3, [r7, #4]
		if (ep->Direction)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <Endpoint_BytesInEndpoint+0x32>
			return (uint16_t)(ep->InBytesAvailable);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	b29b      	uxth	r3, r3
 8003538:	e002      	b.n	8003540 <Endpoint_BytesInEndpoint+0x38>
		else
			return (uint16_t)(ep->OutBytesAvailable);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	b29b      	uxth	r3, r3
	}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	1ffe93e8 	.word	0x1ffe93e8

08003550 <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8003558:	f7ff ff5c 	bl	8003414 <Endpoint_IsSETUPReceived>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80ae 	beq.w	80036c0 <CDC_Device_ProcessControlRequest+0x170>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 8003566:	889b      	ldrh	r3, [r3, #4]
 8003568:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 800356e:	b29b      	uxth	r3, r3
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 80a5 	bne.w	80036c0 <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3b20      	subs	r3, #32
 800357e:	2b03      	cmp	r3, #3
 8003580:	f200 809e 	bhi.w	80036c0 <CDC_Device_ProcessControlRequest+0x170>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <CDC_Device_ProcessControlRequest+0x3c>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035f1 	.word	0x080035f1
 8003590:	0800359d 	.word	0x0800359d
 8003594:	08003663 	.word	0x08003663
 8003598:	08003693 	.word	0x08003693
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800359c:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2ba1      	cmp	r3, #161	; 0xa1
 80035a4:	d123      	bne.n	80035ee <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 80035a6:	f7ff ff4b 	bl	8003440 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 80035aa:	bf00      	nop
 80035ac:	f7ff ff5e 	bl	800346c <Endpoint_IsINReady>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f7      	bne.n	80035ac <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fe3d 	bl	8004240 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7f1b      	ldrb	r3, [r3, #28]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fdcc 	bl	8004168 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7f5b      	ldrb	r3, [r3, #29]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fdc7 	bl	8004168 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	7f9b      	ldrb	r3, [r3, #30]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fdc2 	bl	8004168 <Endpoint_Write_8>

					Endpoint_ClearIN();
 80035e4:	f000 fd3e 	bl	8004064 <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 80035e8:	f7ff ff3a 	bl	8003460 <Endpoint_ClearStatusStage>
				}

				break;
 80035ec:	e068      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
 80035ee:	e067      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b21      	cmp	r3, #33	; 0x21
 80035f8:	d132      	bne.n	8003660 <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 80035fa:	f7ff ff21 	bl	8003440 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 80035fe:	e005      	b.n	800360c <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <CDC_Device_ProcessControlRequest+0x17c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d100      	bne.n	800360c <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 800360a:	e059      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 800360c:	f7ff ff5a 	bl	80034c4 <Endpoint_IsOUTReceived>
 8003610:	4603      	mov	r3, r0
 8003612:	f083 0301 	eor.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f1      	bne.n	8003600 <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800361c:	f000 fe44 	bl	80042a8 <Endpoint_Read_32_LE>
 8003620:	4602      	mov	r2, r0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8003626:	f000 fdd3 	bl	80041d0 <Endpoint_Read_8>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8003632:	f000 fdcd 	bl	80041d0 <Endpoint_Read_8>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 800363e:	f000 fdc7 	bl	80041d0 <Endpoint_Read_8>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 800364a:	f7ff ff09 	bl	8003460 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
					}

				}

				break;
 800365e:	e02f      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
 8003660:	e02e      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b21      	cmp	r3, #33	; 0x21
 800366a:	d111      	bne.n	8003690 <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 800366c:	f7ff fee8 	bl	8003440 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8003670:	f7ff fef6 	bl	8003460 <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 8003676:	885b      	ldrh	r3, [r3, #2]
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
					}

				}

				break;
 800368e:	e017      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
 8003690:	e016      	b.n	80036c0 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b21      	cmp	r3, #33	; 0x21
 800369a:	d110      	bne.n	80036be <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 800369c:	f7ff fed0 	bl	8003440 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 80036a0:	f7ff fede 	bl	8003460 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <CDC_Device_ProcessControlRequest+0x180>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <CDC_Device_ProcessControlRequest+0x178>)
 80036b2:	8852      	ldrh	r2, [r2, #2]
 80036b4:	b292      	uxth	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4798      	blx	r3
					}

				}

				break;
 80036be:	bf00      	nop
		}
	}
}
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	1ffe91e0 	.word	0x1ffe91e0
 80036cc:	1ffe91dd 	.word	0x1ffe91dd
 80036d0:	1ffe8828 	.word	0x1ffe8828

080036d4 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	bool status = true;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3314      	adds	r3, #20
 80036e4:	4618      	mov	r0, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	220c      	movs	r2, #12
 80036ea:	f002 ff40 	bl	800656e <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	2101      	movs	r1, #1
 8003706:	f000 fe07 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 800370a:	4603      	mov	r3, r0
 800370c:	f083 0301 	eor.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 800371e:	4618      	mov	r0, r3
 8003720:	2101      	movs	r1, #1
 8003722:	f000 fdf9 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 8003726:	4603      	mov	r3, r0
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 800373a:	4618      	mov	r0, r3
 800373c:	2101      	movs	r1, #1
 800373e:	f000 fdeb 	bl	8004318 <Endpoint_ConfigureEndpointTable>
 8003742:	4603      	mov	r3, r0
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <CDC_Device_USBTask+0x3c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b04      	cmp	r3, #4
 800376c:	d110      	bne.n	8003790 <CDC_Device_USBTask+0x34>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <CDC_Device_USBTask+0x34>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe30 	bl	80033e0 <Endpoint_SelectEndpoint>

		if (Endpoint_IsINReady())
 8003780:	f7ff fe74 	bl	800346c <Endpoint_IsINReady>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <CDC_Device_USBTask+0x34>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f832 	bl	80037f4 <CDC_Device_Flush>
		}
		#endif
	}
}
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	1ffe91dd 	.word	0x1ffe91dd

0800379c <CDC_Device_SendString>:

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const char* const String)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <CDC_Device_SendString+0x54>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d115      	bne.n	80037e0 <CDC_Device_SendString+0x44>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d011      	beq.n	80037e0 <CDC_Device_SendString+0x44>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fe0d 	bl	80033e0 <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f002 fee3 	bl	8006592 <strlen>
 80037cc:	4603      	mov	r3, r0
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	f000 fa63 	bl	8003ca0 <Endpoint_Write_Stream_LE>
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e001      	b.n	80037e4 <CDC_Device_SendString+0x48>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 80037e0:	2302      	movs	r3, #2
 80037e2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	1ffe91dd 	.word	0x1ffe91dd

080037f4 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <CDC_Device_Flush+0x4c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b04      	cmp	r3, #4
 8003808:	d112      	bne.n	8003830 <CDC_Device_Flush+0x3c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <CDC_Device_Flush+0x3c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fde2 	bl	80033e0 <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 800381c:	f7ff fe74 	bl	8003508 <Endpoint_BytesInEndpoint>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <CDC_Device_Flush+0x36>
		{
			Endpoint_ClearIN();
 8003826:	f000 fc1d 	bl	8004064 <Endpoint_ClearIN>
		}

		status = ENDPOINT_READYWAIT_NoError;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e001      	b.n	8003834 <CDC_Device_Flush+0x40>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8003830:	2302      	movs	r3, #2
 8003832:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	1ffe91dd 	.word	0x1ffe91dd

08003844 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	uint16_t bytes = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <CDC_Device_BytesReceived+0x60>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b04      	cmp	r3, #4
 8003858:	d11e      	bne.n	8003898 <CDC_Device_BytesReceived+0x54>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01a      	beq.n	8003898 <CDC_Device_BytesReceived+0x54>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	799b      	ldrb	r3, [r3, #6]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fdba 	bl	80033e0 <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 800386c:	f7ff fe2a 	bl	80034c4 <Endpoint_IsOUTReceived>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <CDC_Device_BytesReceived+0x50>
		{
			if (!(Endpoint_BytesInEndpoint()))
 8003876:	f7ff fe47 	bl	8003508 <Endpoint_BytesInEndpoint>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <CDC_Device_BytesReceived+0x46>
			{
				Endpoint_ClearOUT();
 8003880:	f000 fba4 	bl	8003fcc <Endpoint_ClearOUT>
				bytes = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	81fb      	strh	r3, [r7, #14]
 8003888:	e006      	b.n	8003898 <CDC_Device_BytesReceived+0x54>
			}
			else
			{
				bytes = Endpoint_BytesInEndpoint();
 800388a:	f7ff fe3d 	bl	8003508 <Endpoint_BytesInEndpoint>
 800388e:	4603      	mov	r3, r0
 8003890:	81fb      	strh	r3, [r7, #14]
 8003892:	e001      	b.n	8003898 <CDC_Device_BytesReceived+0x54>
			}
		}
		else
		{
			bytes = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	81fb      	strh	r3, [r7, #14]
		}
	}

	return bytes;
 8003898:	89fb      	ldrh	r3, [r7, #14]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	1ffe91dd 	.word	0x1ffe91dd

080038a8 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(
						USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	int16_t Rx_bytes = -1;
 80038b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038b4:	81fb      	strh	r3, [r7, #14]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <CDC_Device_ReceiveByte+0x58>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d119      	bne.n	80038f4 <CDC_Device_ReceiveByte+0x4c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <CDC_Device_ReceiveByte+0x4c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	799b      	ldrb	r3, [r3, #6]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fd87 	bl	80033e0 <Endpoint_SelectEndpoint>

		if (Endpoint_IsOUTReceived())
 80038d2:	f7ff fdf7 	bl	80034c4 <Endpoint_IsOUTReceived>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <CDC_Device_ReceiveByte+0x4c>
		{
			if (Endpoint_BytesInEndpoint())
 80038dc:	f7ff fe14 	bl	8003508 <Endpoint_BytesInEndpoint>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <CDC_Device_ReceiveByte+0x48>
			{
				Rx_bytes = Endpoint_Read_8();
 80038e6:	f000 fc73 	bl	80041d0 <Endpoint_Read_8>
 80038ea:	4603      	mov	r3, r0
 80038ec:	81fb      	strh	r3, [r7, #14]
 80038ee:	e001      	b.n	80038f4 <CDC_Device_ReceiveByte+0x4c>
			}
			else
			{
				Endpoint_ClearOUT();
 80038f0:	f000 fb6c 	bl	8003fcc <Endpoint_ClearOUT>
			}

		}

	}
	return Rx_bytes;
 80038f4:	89fb      	ldrh	r3, [r7, #14]
 80038f6:	b21b      	sxth	r3, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	1ffe91dd 	.word	0x1ffe91dd

08003904 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <NVIC_EnableIRQ+0x2c>)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	79fa      	ldrb	r2, [r7, #7]
 8003918:	f002 021f 	and.w	r2, r2, #31
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100

08003934 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800393e:	4909      	ldr	r1, [pc, #36]	; (8003964 <NVIC_DisableIRQ+0x30>)
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	79fa      	ldrb	r2, [r7, #7]
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	3320      	adds	r3, #32
 8003954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 8003976:	2200      	movs	r2, #0
 8003978:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 800397c:	2282      	movs	r2, #130	; 0x82
 800397e:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 8003988:	2202      	movs	r2, #2
 800398a:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 800398e:	2200      	movs	r2, #0
 8003990:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 8003994:	2203      	movs	r2, #3
 8003996:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039a0:	2202      	movs	r2, #2
 80039a2:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039ac:	2281      	movs	r2, #129	; 0x81
 80039ae:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039b2:	2208      	movs	r2, #8
 80039b4:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039b8:	2203      	movs	r2, #3
 80039ba:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <USBD_VCOM_Init+0x8c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 80039c2:	480d      	ldr	r0, [pc, #52]	; (80039f8 <USBD_VCOM_Init+0x90>)
 80039c4:	f000 f890 	bl	8003ae8 <USBD_VCOM_Register_USBEvent_CB>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <USBD_VCOM_Init+0x94>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fdfe 	bl	80045d4 <USBD_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e001      	b.n	80039e8 <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	1ffe91bc 	.word	0x1ffe91bc
 80039f8:	1ffe8800 	.word	0x1ffe8800
 80039fc:	1ffe884c 	.word	0x1ffe884c

08003a00 <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 8003a04:	f000 fe84 	bl	8004710 <USBD_IsEnumDone>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <USBD_VCOM_IsEnumDone+0x1c>
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <USBD_VCOM_IsEnumDone+0x24>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d101      	bne.n	8003a1c <USBD_VCOM_IsEnumDone+0x1c>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <USBD_VCOM_IsEnumDone+0x1e>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	1ffe91dd 	.word	0x1ffe91dd

08003a28 <USBD_VCOM_SendString>:
  return status;
}

/* This function sends string data to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendString(const int8_t* const data_string)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]

  if (data_string != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <USBD_VCOM_SendString+0x36>
  {
    /* Send string to the host */
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != CDC_Device_SendString(&USBD_VCOM_cdc_interface, (const char*)data_string))
 8003a3a:	480c      	ldr	r0, [pc, #48]	; (8003a6c <USBD_VCOM_SendString+0x44>)
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	f7ff fead 	bl	800379c <CDC_Device_SendString>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <USBD_VCOM_SendString+0x24>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003a48:	2306      	movs	r3, #6
 8003a4a:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 8003a4c:	4807      	ldr	r0, [pc, #28]	; (8003a6c <USBD_VCOM_SendString+0x44>)
 8003a4e:	f7ff fed1 	bl	80037f4 <CDC_Device_Flush>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <USBD_VCOM_SendString+0x3a>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003a58:	2306      	movs	r3, #6
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e001      	b.n	8003a62 <USBD_VCOM_SendString+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 8003a5e:	2306      	movs	r3, #6
 8003a60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	1ffe91bc 	.word	0x1ffe91bc

08003a70 <USBD_VCOM_ReceiveByte>:

/* This function receives a byte from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveByte(int8_t* data_byte)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]
  int16_t rx_byte;

  if (data_byte != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <USBD_VCOM_ReceiveByte+0x36>
  {
    /* Receive one byte of data */
    rx_byte = CDC_Device_ReceiveByte(&USBD_VCOM_cdc_interface);
 8003a82:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <USBD_VCOM_ReceiveByte+0x44>)
 8003a84:	f7ff ff10 	bl	80038a8 <CDC_Device_ReceiveByte>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	81bb      	strh	r3, [r7, #12]

    if (rx_byte != -1)
 8003a8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d004      	beq.n	8003aa0 <USBD_VCOM_ReceiveByte+0x30>
    {
      *data_byte = (int8_t)rx_byte;
 8003a96:	89bb      	ldrh	r3, [r7, #12]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e004      	b.n	8003aaa <USBD_VCOM_ReceiveByte+0x3a>
    }
    else
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8003aa0:	2306      	movs	r3, #6
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	e001      	b.n	8003aaa <USBD_VCOM_ReceiveByte+0x3a>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	1ffe91bc 	.word	0x1ffe91bc

08003ab8 <USBD_VCOM_BytesReceived>:
  return status;
}

/* This function checks number of bytes received from the USB host. */
uint16_t USBD_VCOM_BytesReceived(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
  uint16_t bytes = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	80fb      	strh	r3, [r7, #6]

  /* Check if bytes are received from host */
  NVIC_DisableIRQ(USB0_0_IRQn);
 8003ac2:	206b      	movs	r0, #107	; 0x6b
 8003ac4:	f7ff ff36 	bl	8003934 <NVIC_DisableIRQ>
  bytes = CDC_Device_BytesReceived(&USBD_VCOM_cdc_interface);
 8003ac8:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <USBD_VCOM_BytesReceived+0x2c>)
 8003aca:	f7ff febb 	bl	8003844 <CDC_Device_BytesReceived>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
  NVIC_EnableIRQ(USB0_0_IRQn);	
 8003ad2:	206b      	movs	r0, #107	; 0x6b
 8003ad4:	f7ff ff16 	bl	8003904 <NVIC_EnableIRQ>
    
  return bytes;
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	1ffe91bc 	.word	0x1ffe91bc

08003ae8 <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d03c      	beq.n	8003b74 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6912      	ldr	r2, [r2, #16]
 8003b04:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68d2      	ldr	r2, [r2, #12]
 8003b28:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6952      	ldr	r2, [r2, #20]
 8003b40:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	69d2      	ldr	r2, [r2, #28]
 8003b4c:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6992      	ldr	r2, [r2, #24]
 8003b58:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6a12      	ldr	r2, [r2, #32]
 8003b64:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
 8003b72:	e001      	b.n	8003b78 <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]

}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	1ffe884c 	.word	0x1ffe884c

08003b8c <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 8003b90:	2081      	movs	r0, #129	; 0x81
 8003b92:	490f      	ldr	r1, [pc, #60]	; (8003bd0 <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8003b94:	2240      	movs	r2, #64	; 0x40
 8003b96:	f000 fdc7 	bl	8004728 <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003b9a:	2082      	movs	r0, #130	; 0x82
 8003b9c:	490d      	ldr	r1, [pc, #52]	; (8003bd4 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	f000 fdc2 	bl	8004728 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8003ba4:	2003      	movs	r0, #3
 8003ba6:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	f000 fdbd 	bl	8004728 <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 8003bae:	480b      	ldr	r0, [pc, #44]	; (8003bdc <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 8003bb0:	f7ff fd90 	bl	80036d4 <CDC_Device_ConfigureEndpoints>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 8003bbc:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 8003bca:	2204      	movs	r2, #4
 8003bcc:	701a      	strb	r2, [r3, #0]
  }
}
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	1ffe913c 	.word	0x1ffe913c
 8003bd4:	1ffe90f8 	.word	0x1ffe90f8
 8003bd8:	1ffe917c 	.word	0x1ffe917c
 8003bdc:	1ffe91bc 	.word	0x1ffe91bc
 8003be0:	1ffe93e8 	.word	0x1ffe93e8
 8003be4:	1ffe91dd 	.word	0x1ffe91dd

08003be8 <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8003bec:	4801      	ldr	r0, [pc, #4]	; (8003bf4 <USBD_VCOM_Event_ControlRequest+0xc>)
 8003bee:	f7ff fcaf 	bl	8003550 <CDC_Device_ProcessControlRequest>
}
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	1ffe91bc 	.word	0x1ffe91bc

08003bf8 <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <USBD_VCOM_Event_Reset+0x38>)
 8003bfe:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 8003c0c:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <USBD_VCOM_Event_Reset+0x38>)
 8003c0e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003c12:	f36f 0300 	bfc	r3, #0, #1
 8003c16:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <USBD_VCOM_Event_Reset+0x3c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fea2 	bl	8003968 <USBD_VCOM_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8003c2a:	f000 f831 	bl	8003c90 <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	1ffe93e8 	.word	0x1ffe93e8
 8003c34:	1ffe8834 	.word	0x1ffe8834

08003c38 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	1ffe9138 	.word	0x1ffe9138

08003c54 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	1ffe9138 	.word	0x1ffe9138

08003c70 <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	1ffe9138 	.word	0x1ffe9138

08003c90 <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8003c94:	f000 fd30 	bl	80046f8 <USBD_Connect>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop

08003ca0 <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003cae:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <Endpoint_Write_Stream_LE+0x108>)
 8003cb0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	232c      	movs	r3, #44	; 0x2c
 8003cb8:	fb03 f302 	mul.w	r3, r3, r2
 8003cbc:	4a3a      	ldr	r2, [pc, #232]	; (8003da8 <Endpoint_Write_Stream_LE+0x108>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	83fb      	strh	r3, [r7, #30]
	uint16_t BytesTransfered = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	83bb      	strh	r3, [r7, #28]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <Endpoint_Write_Stream_LE+0x42>
	{
		Length -= *BytesProcessed;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	897a      	ldrh	r2, [r7, #10]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	83bb      	strh	r3, [r7, #28]
	}

	while (Length) 
 8003ce2:	e058      	b.n	8003d96 <Endpoint_Write_Stream_LE+0xf6>
	{
		if (ep->InInUse)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d000      	beq.n	8003cf6 <Endpoint_Write_Stream_LE+0x56>
		{
			continue;
 8003cf4:	e04f      	b.n	8003d96 <Endpoint_Write_Stream_LE+0xf6>
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8003cf6:	f000 fa05 	bl	8004104 <Endpoint_IsReadWriteAllowed>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02f      	beq.n	8003d60 <Endpoint_Write_Stream_LE+0xc0>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <Endpoint_Write_Stream_LE+0x76>
			{
				Bytes = Length;
 8003d10:	897b      	ldrh	r3, [r7, #10]
 8003d12:	83fb      	strh	r3, [r7, #30]
 8003d14:	e007      	b.n	8003d26 <Endpoint_Write_Stream_LE+0x86>
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	18d1      	adds	r1, r2, r3
 8003d30:	8bbb      	ldrh	r3, [r7, #28]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	441a      	add	r2, r3
 8003d36:	8bfb      	ldrh	r3, [r7, #30]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f002 fc0b 	bl	8006558 <memcpy>
			ep->InBytesAvailable += Bytes;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	8bfb      	ldrh	r3, [r7, #30]
 8003d48:	441a      	add	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8003d4e:	8bba      	ldrh	r2, [r7, #28]
 8003d50:	8bfb      	ldrh	r3, [r7, #30]
 8003d52:	4413      	add	r3, r2
 8003d54:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8003d56:	897a      	ldrh	r2, [r7, #10]
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	e01a      	b.n	8003d96 <Endpoint_Write_Stream_LE+0xf6>
		}
		else 
		{
			Endpoint_ClearIN();
 8003d60:	f000 f980 	bl	8004064 <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	8892      	ldrh	r2, [r2, #4]
 8003d6a:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	4293      	cmp	r3, r2
 8003d72:	da07      	bge.n	8003d84 <Endpoint_Write_Stream_LE+0xe4>
			{
				if (BytesProcessed!=NULL) 
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <Endpoint_Write_Stream_LE+0xe4>
				{
					*BytesProcessed = BytesTransfered;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8bba      	ldrh	r2, [r7, #28]
 8003d7e:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003d80:	2305      	movs	r3, #5
 8003d82:	e00c      	b.n	8003d9e <Endpoint_Write_Stream_LE+0xfe>
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 8003d84:	f000 f8da 	bl	8003f3c <Endpoint_WaitUntilReady>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	75fb      	strb	r3, [r7, #23]
			if (ErrorCode) 
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <Endpoint_Write_Stream_LE+0xf6>
			{
				return ErrorCode;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	e003      	b.n	8003d9e <Endpoint_Write_Stream_LE+0xfe>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1a3      	bne.n	8003ce4 <Endpoint_Write_Stream_LE+0x44>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	1ffe93e8 	.word	0x1ffe93e8

08003dac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003db6:	4908      	ldr	r1, [pc, #32]	; (8003dd8 <NVIC_EnableIRQ+0x2c>)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	79fa      	ldrb	r2, [r7, #7]
 8003dc0:	f002 021f 	and.w	r2, r2, #31
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003de6:	4909      	ldr	r1, [pc, #36]	; (8003e0c <NVIC_DisableIRQ+0x30>)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	79fa      	ldrb	r2, [r7, #7]
 8003df0:	f002 021f 	and.w	r2, r2, #31
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000e100 	.word	0xe000e100

08003e10 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <Endpoint_IsINReady+0x54>)
 8003e18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	232c      	movs	r3, #44	; 0x2c
 8003e20:	fb03 f302 	mul.w	r3, r3, r2
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <Endpoint_IsINReady+0x54>)
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <Endpoint_IsINReady+0x3e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	791b      	ldrb	r3, [r3, #4]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <Endpoint_IsINReady+0x3e>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <Endpoint_IsINReady+0x40>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
	}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	1ffe93e8 	.word	0x1ffe93e8

08003e68 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <Endpoint_IsOUTReceived+0x40>)
 8003e70:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003e74:	461a      	mov	r2, r3
 8003e76:	232c      	movs	r3, #44	; 0x2c
 8003e78:	fb03 f302 	mul.w	r3, r3, r2
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <Endpoint_IsOUTReceived+0x40>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
	}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	1ffe93e8 	.word	0x1ffe93e8

08003eac <Endpoint_GetEndpointDirection>:
	 *  \return The currently selected endpoint's direction, as a
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <Endpoint_GetEndpointDirection+0x34>)
 8003eb4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003eb8:	461a      	mov	r2, r3
 8003eba:	232c      	movs	r3, #44	; 0x2c
 8003ebc:	fb03 f302 	mul.w	r3, r3, r2
 8003ec0:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <Endpoint_GetEndpointDirection+0x34>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	607b      	str	r3, [r7, #4]
		return ep->Address & ENDPOINT_DIR_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ed0:	b2db      	uxtb	r3, r3
	}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	1ffe93e8 	.word	0x1ffe93e8

08003ee4 <Endpoint_IsStalled>:
	 *  \return Boolean \c true if the currently selected endpoint is stalled,
	 *  \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
		bool status = false;
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <Endpoint_IsStalled+0x3c>)
 8003ef0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <Endpoint_IsStalled+0x3c>)
 8003ef8:	232c      	movs	r3, #44	; 0x2c
 8003efa:	fb03 f301 	mul.w	r3, r3, r1
 8003efe:	4413      	add	r3, r2
 8003f00:	7a1b      	ldrb	r3, [r3, #8]
 8003f02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <Endpoint_IsStalled+0x2c>
		{
			status = true;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	71fb      	strb	r3, [r7, #7]
		}
		return status;
 8003f10:	79fb      	ldrb	r3, [r7, #7]
	}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	1ffe93e8 	.word	0x1ffe93e8

08003f24 <USB_Device_GetFrameNumber>:
 *  the frame number is incremented by one.
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	return device.Driver->GetFrameNumber();
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <USB_Device_GetFrameNumber+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	4798      	blx	r3
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	1ffe93e8 	.word	0x1ffe93e8

08003f3c <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8003f42:	2364      	movs	r3, #100	; 0x64
 8003f44:	71fb      	strb	r3, [r7, #7]
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8003f46:	f7ff ffed 	bl	8003f24 <USB_Device_GetFrameNumber>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	80bb      	strh	r3, [r7, #4]

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8003f4e:	f7ff ffad 	bl	8003eac <Endpoint_GetEndpointDirection>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d106      	bne.n	8003f66 <Endpoint_WaitUntilReady+0x2a>
		{
			if (Endpoint_IsINReady())
 8003f58:	f7ff ff5a 	bl	8003e10 <Endpoint_IsINReady>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e02c      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8003f66:	f7ff ff7f 	bl	8003e68 <Endpoint_IsOUTReceived>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e025      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <Endpoint_WaitUntilReady+0x8c>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	70fb      	strb	r3, [r7, #3]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <Endpoint_WaitUntilReady+0x48>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8003f80:	2302      	movs	r3, #2
 8003f82:	e01d      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d101      	bne.n	8003f8e <Endpoint_WaitUntilReady+0x52>
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e018      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
		}
		else if (Endpoint_IsStalled())
 8003f8e:	f7ff ffa9 	bl	8003ee4 <Endpoint_IsStalled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <Endpoint_WaitUntilReady+0x60>
		{
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e011      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003f9c:	f7ff ffc2 	bl	8003f24 <USB_Device_GetFrameNumber>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	803b      	strh	r3, [r7, #0]

		if (CurrentFrameNumber != PreviousFrameNumber)
 8003fa4:	883a      	ldrh	r2, [r7, #0]
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d008      	beq.n	8003fbe <Endpoint_WaitUntilReady+0x82>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 8003fac:	883b      	ldrh	r3, [r7, #0]
 8003fae:	80bb      	strh	r3, [r7, #4]

			if (!(TimeoutMSRem--))
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	71fa      	strb	r2, [r7, #7]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	e000      	b.n	8003fc0 <Endpoint_WaitUntilReady+0x84>
			}
		}
	}
 8003fbe:	e7c6      	b.n	8003f4e <Endpoint_WaitUntilReady+0x12>
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	1ffe91dd 	.word	0x1ffe91dd

08003fcc <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) 
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <Endpoint_ClearOUT+0x94>)
 8003fd4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	232c      	movs	r3, #44	; 0x2c
 8003fdc:	fb03 f302 	mul.w	r3, r3, r2
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <Endpoint_ClearOUT+0x94>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	791b      	ldrb	r3, [r3, #4]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d100      	bne.n	8003ff8 <Endpoint_ClearOUT+0x2c>
	{
		return;
 8003ff6:	e030      	b.n	800405a <Endpoint_ClearOUT+0x8e>
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <Endpoint_ClearOUT+0x94>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	7810      	ldrb	r0, [r2, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6911      	ldr	r1, [r2, #16]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6952      	ldr	r2, [r2, #20]
 800400a:	4798      	blx	r3
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	08db      	lsrs	r3, r3, #3
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d117      	bne.n	800405a <Endpoint_ClearOUT+0x8e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <Endpoint_ClearOUT+0x8e>
	{
		ep->OutInUse = true;
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	8893      	ldrh	r3, [r2, #4]
 8004036:	f043 0308 	orr.w	r3, r3, #8
 800403a:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	8893      	ldrh	r3, [r2, #4]
 8004040:	f36f 1345 	bfc	r3, #5, #1
 8004044:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <Endpoint_ClearOUT+0x94>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	7811      	ldrb	r1, [r2, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6952      	ldr	r2, [r2, #20]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4798      	blx	r3
	}
}
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	1ffe93e8 	.word	0x1ffe93e8

08004064 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <Endpoint_ClearIN+0x9c>)
 800406c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004070:	461a      	mov	r2, r3
 8004072:	232c      	movs	r3, #44	; 0x2c
 8004074:	fb03 f302 	mul.w	r3, r3, r2
 8004078:	4a21      	ldr	r2, [pc, #132]	; (8004100 <Endpoint_ClearIN+0x9c>)
 800407a:	4413      	add	r3, r2
 800407c:	3304      	adds	r3, #4
 800407e:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d006      	beq.n	800409e <Endpoint_ClearIN+0x3a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	791b      	ldrb	r3, [r3, #4]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d100      	bne.n	80040a0 <Endpoint_ClearIN+0x3c>
		return;
 800409e:	e02c      	b.n	80040fa <Endpoint_ClearIN+0x96>
	ep->InInUse = true;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	8893      	ldrh	r3, [r2, #4]
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 80040c0:	206b      	movs	r0, #107	; 0x6b
 80040c2:	f7ff fe8b 	bl	8003ddc <NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <Endpoint_ClearIN+0x9c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040d8:	4798      	blx	r3
 80040da:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	441a      	add	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 80040f4:	206b      	movs	r0, #107	; 0x6b
 80040f6:	f7ff fe59 	bl	8003dac <NVIC_EnableIRQ>

}
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	1ffe93e8 	.word	0x1ffe93e8

08004104 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed() {
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <Endpoint_IsReadWriteAllowed+0x60>)
 800410c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004110:	461a      	mov	r2, r3
 8004112:	232c      	movs	r3, #44	; 0x2c
 8004114:	fb03 f302 	mul.w	r3, r3, r2
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <Endpoint_IsReadWriteAllowed+0x60>)
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8004120:	2300      	movs	r3, #0
 8004122:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf34      	ite	cc
 800413e:	2301      	movcc	r3, #1
 8004140:	2300      	movcs	r3, #0
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	e006      	b.n	8004154 <Endpoint_IsReadWriteAllowed+0x50>
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 8004154:	79fb      	ldrb	r3, [r7, #7]
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	1ffe93e8 	.word	0x1ffe93e8

08004168 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <Endpoint_Write_8+0x64>)
 8004174:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004178:	461a      	mov	r2, r3
 800417a:	232c      	movs	r3, #44	; 0x2c
 800417c:	fb03 f302 	mul.w	r3, r3, r2
 8004180:	4a12      	ldr	r2, [pc, #72]	; (80041cc <Endpoint_Write_8+0x64>)
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	429a      	cmp	r2, r3
 8004196:	d20d      	bcs.n	80041b4 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	619a      	str	r2, [r3, #24]

	      Success = true;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	f083 0301 	eor.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <Endpoint_Write_8+0x24>
}
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	1ffe93e8 	.word	0x1ffe93e8

080041d0 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <Endpoint_Read_8+0x6c>)
 80041d8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80041dc:	461a      	mov	r2, r3
 80041de:	232c      	movs	r3, #44	; 0x2c
 80041e0:	fb03 f302 	mul.w	r3, r3, r2
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <Endpoint_Read_8+0x6c>)
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	603b      	str	r3, [r7, #0]
	bool Success = false;
 80041ec:	2300      	movs	r3, #0
 80041ee:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	609a      	str	r2, [r3, #8]

		  Success = true;
 800421e:	2301      	movs	r3, #1
 8004220:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e2      	bne.n	80041f4 <Endpoint_Read_8+0x24>
	 return data;
 800422e:	79bb      	ldrb	r3, [r7, #6]
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	1ffe93e8 	.word	0x1ffe93e8

08004240 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <Endpoint_Write_32_LE+0x64>)
 800424a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800424e:	461a      	mov	r2, r3
 8004250:	232c      	movs	r3, #44	; 0x2c
 8004252:	fb03 f302 	mul.w	r3, r3, r2
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <Endpoint_Write_32_LE+0x64>)
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	3b03      	subs	r3, #3
 800426c:	429a      	cmp	r2, r3
 800426e:	d20d      	bcs.n	800428c <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	4413      	add	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	619a      	str	r2, [r3, #24]

			Success = true;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e4      	bne.n	8004262 <Endpoint_Write_32_LE+0x22>
}
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	1ffe93e8 	.word	0x1ffe93e8

080042a8 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80042ae:	4b19      	ldr	r3, [pc, #100]	; (8004314 <Endpoint_Read_32_LE+0x6c>)
 80042b0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80042b4:	461a      	mov	r2, r3
 80042b6:	232c      	movs	r3, #44	; 0x2c
 80042b8:	fb03 f302 	mul.w	r3, r3, r2
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <Endpoint_Read_32_LE+0x6c>)
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	607b      	str	r3, [r7, #4]
	bool Success = false;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d912      	bls.n	80042fa <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	1f1a      	subs	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]

			Success = true;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e2      	bne.n	80042cc <Endpoint_Read_32_LE+0x24>
	return data;
 8004306:	68bb      	ldr	r3, [r7, #8]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	1ffe93e8 	.word	0x1ffe93e8

08004318 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e092      	b.n	8004450 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8004342:	4b48      	ldr	r3, [pc, #288]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69dc      	ldr	r4, [r3, #28]
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	7919      	ldrb	r1, [r3, #4]
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 800437c:	885b      	ldrh	r3, [r3, #2]
 800437e:	461a      	mov	r2, r3
 8004380:	47a0      	blx	r4
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8004388:	2300      	movs	r3, #0
 800438a:	e067      	b.n	800445c <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 800438c:	7bb9      	ldrb	r1, [r7, #14]
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	7818      	ldrb	r0, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043a2:	232c      	movs	r3, #44	; 0x2c
 80043a4:	fb03 f301 	mul.w	r3, r3, r1
 80043a8:	4413      	add	r3, r2
 80043aa:	4602      	mov	r2, r0
 80043ac:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 80043ae:	7bb8      	ldrb	r0, [r7, #14]
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	885b      	ldrh	r3, [r3, #2]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c8:	b2d9      	uxtb	r1, r3
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043cc:	232c      	movs	r3, #44	; 0x2c
 80043ce:	fb03 f300 	mul.w	r3, r3, r0
 80043d2:	441a      	add	r2, r3
 80043d4:	8913      	ldrh	r3, [r2, #8]
 80043d6:	f361 138c 	bfi	r3, r1, #6, #7
 80043da:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	441a      	add	r2, r3
 80043e8:	7a13      	ldrb	r3, [r2, #8]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	441a      	add	r2, r3
 80043fc:	7a13      	ldrb	r3, [r2, #8]
 80043fe:	f043 0302 	orr.w	r3, r3, #2
 8004402:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b25b      	sxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	db15      	blt.n	800444a <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	7818      	ldrb	r0, [r3, #0]
 8004436:	7bbb      	ldrb	r3, [r7, #14]
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <Endpoint_ConfigureEndpointTable+0x14c>)
 800443a:	212c      	movs	r1, #44	; 0x2c
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	3310      	adds	r3, #16
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4619      	mov	r1, r3
 8004448:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3301      	adds	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	429a      	cmp	r2, r3
 8004456:	f4ff af68 	bcc.w	800432a <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 800445a:	2301      	movs	r3, #1
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	1ffe93e8 	.word	0x1ffe93e8

08004468 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <NVIC_GetPriorityGrouping+0x18>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004474:	0a1b      	lsrs	r3, r3, #8
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800448e:	4908      	ldr	r1, [pc, #32]	; (80044b0 <NVIC_EnableIRQ+0x2c>)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	79fa      	ldrb	r2, [r7, #7]
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	2001      	movs	r0, #1
 800449e:	fa00 f202 	lsl.w	r2, r0, r2
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80044be:	4909      	ldr	r1, [pc, #36]	; (80044e4 <NVIC_DisableIRQ+0x30>)
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	79fa      	ldrb	r2, [r7, #7]
 80044c8:	f002 021f 	and.w	r2, r2, #31
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	3320      	adds	r3, #32
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80044f2:	4909      	ldr	r1, [pc, #36]	; (8004518 <NVIC_ClearPendingIRQ+0x30>)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	79fa      	ldrb	r2, [r7, #7]
 80044fc:	f002 021f 	and.w	r2, r2, #31
 8004500:	2001      	movs	r0, #1
 8004502:	fa00 f202 	lsl.w	r2, r0, r2
 8004506:	3360      	adds	r3, #96	; 0x60
 8004508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000e100 	.word	0xe000e100

0800451c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	6039      	str	r1, [r7, #0]
 8004526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452c:	2b00      	cmp	r3, #0
 800452e:	da0b      	bge.n	8004548 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004530:	490d      	ldr	r1, [pc, #52]	; (8004568 <NVIC_SetPriority+0x4c>)
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	3b04      	subs	r3, #4
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	440b      	add	r3, r1
 8004544:	761a      	strb	r2, [r3, #24]
 8004546:	e009      	b.n	800455c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	4908      	ldr	r1, [pc, #32]	; (800456c <NVIC_SetPriority+0x50>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed00 	.word	0xe000ed00
 800456c:	e000e100 	.word	0xe000e100

08004570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f1c3 0307 	rsb	r3, r3, #7
 800458a:	2b06      	cmp	r3, #6
 800458c:	bf28      	it	cs
 800458e:	2306      	movcs	r3, #6
 8004590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3306      	adds	r3, #6
 8004596:	2b06      	cmp	r3, #6
 8004598:	d902      	bls.n	80045a0 <NVIC_EncodePriority+0x30>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3b01      	subs	r3, #1
 800459e:	e000      	b.n	80045a2 <NVIC_EncodePriority+0x32>
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	1e5a      	subs	r2, r3, #1
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	401a      	ands	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	1e59      	subs	r1, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80045c4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 80045e0:	f7fd ff70 	bl	80024c4 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 80045e4:	483d      	ldr	r0, [pc, #244]	; (80046dc <USBD_Init+0x108>)
 80045e6:	2100      	movs	r1, #0
 80045e8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80045ec:	f001 ffbf 	bl	800656e <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 80045f0:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <USBD_Init+0x10c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <USBD_Init+0x108>)
 80045f8:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <USBD_Init+0x110>)
 80045fa:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <USBD_Init+0x108>)
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <USBD_Init+0x108>)
 8004606:	4a38      	ldr	r2, [pc, #224]	; (80046e8 <USBD_Init+0x114>)
 8004608:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 800460a:	4b34      	ldr	r3, [pc, #208]	; (80046dc <USBD_Init+0x108>)
 800460c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8004612:	4b32      	ldr	r3, [pc, #200]	; (80046dc <USBD_Init+0x108>)
 8004614:	4a35      	ldr	r2, [pc, #212]	; (80046ec <USBD_Init+0x118>)
 8004616:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8004618:	4b30      	ldr	r3, [pc, #192]	; (80046dc <USBD_Init+0x108>)
 800461a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800461e:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 8004620:	4a2e      	ldr	r2, [pc, #184]	; (80046dc <USBD_Init+0x108>)
 8004622:	7913      	ldrb	r3, [r2, #4]
 8004624:	f36f 13c7 	bfc	r3, #7, #1
 8004628:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <USBD_Init+0x108>)
 800462c:	7a13      	ldrb	r3, [r2, #8]
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8004634:	4a29      	ldr	r2, [pc, #164]	; (80046dc <USBD_Init+0x108>)
 8004636:	7a13      	ldrb	r3, [r2, #8]
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 800463e:	4a27      	ldr	r2, [pc, #156]	; (80046dc <USBD_Init+0x108>)
 8004640:	8913      	ldrh	r3, [r2, #8]
 8004642:	2140      	movs	r1, #64	; 0x40
 8004644:	f361 138c 	bfi	r3, r1, #6, #7
 8004648:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e031      	b.n	80046d2 <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4a1a      	ldr	r2, [pc, #104]	; (80046dc <USBD_Init+0x108>)
 8004674:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8004678:	2001      	movs	r0, #1
 800467a:	f7fc f935 	bl	80008e8 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <USBD_Init+0x11c>)
 8004682:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <USBD_Init+0x120>)
 8004688:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <USBD_Init+0x108>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4610      	mov	r0, r2
 8004694:	4798      	blx	r3
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 80046a0:	f000 f888 	bl	80047b4 <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <USBD_Init+0x108>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2000      	movs	r0, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	4798      	blx	r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 80046bc:	f7fd ff02 	bl	80024c4 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <USBD_Init+0x108>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4798      	blx	r3
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 80046ce:	f000 f887 	bl	80047e0 <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	1ffe93e8 	.word	0x1ffe93e8
 80046e0:	1ffe91dd 	.word	0x1ffe91dd
 80046e4:	08007074 	.word	0x08007074
 80046e8:	1ffe91e8 	.word	0x1ffe91e8
 80046ec:	1ffe92e8 	.word	0x1ffe92e8
 80046f0:	08004e15 	.word	0x08004e15
 80046f4:	08005071 	.word	0x08005071

080046f8 <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <USBD_Connect+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4798      	blx	r3
 8004704:	4603      	mov	r3, r0
}
 8004706:	4618      	mov	r0, r3
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	1ffe93e8 	.word	0x1ffe93e8

08004710 <USBD_IsEnumDone>:
 *
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  return device.Driver->IsEnumDone();
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <USBD_IsEnumDone+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	4798      	blx	r3
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	1ffe93e8 	.word	0x1ffe93e8

08004728 <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	6039      	str	r1, [r7, #0]
 8004732:	71fb      	strb	r3, [r7, #7]
 8004734:	4613      	mov	r3, r2
 8004736:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	b25b      	sxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	da12      	bge.n	800476e <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 8004748:	4a14      	ldr	r2, [pc, #80]	; (800479c <USBD_SetEndpointBuffer+0x74>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	3318      	adds	r3, #24
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 800475a:	88ba      	ldrh	r2, [r7, #4]
 800475c:	490f      	ldr	r1, [pc, #60]	; (800479c <USBD_SetEndpointBuffer+0x74>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	202c      	movs	r0, #44	; 0x2c
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	440b      	add	r3, r1
 8004768:	3320      	adds	r3, #32
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	e011      	b.n	8004792 <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <USBD_SetEndpointBuffer+0x74>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	3310      	adds	r3, #16
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8004780:	88ba      	ldrh	r2, [r7, #4]
 8004782:	4906      	ldr	r1, [pc, #24]	; (800479c <USBD_SetEndpointBuffer+0x74>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	202c      	movs	r0, #44	; 0x2c
 8004788:	fb00 f303 	mul.w	r3, r0, r3
 800478c:	440b      	add	r3, r1
 800478e:	3310      	adds	r3, #16
 8004790:	609a      	str	r2, [r3, #8]
  }

}
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	1ffe93e8 	.word	0x1ffe93e8

080047a0 <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <USB0_0_IRQHandler+0x10>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fdd7 	bl	800235c <XMC_USBD_IRQHandler>
}
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	1ffe884c 	.word	0x1ffe884c

080047b4 <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 80047b8:	f7ff fe56 	bl	8004468 <NVIC_GetPriorityGrouping>
 80047bc:	4603      	mov	r3, r0
 80047be:	4618      	mov	r0, r3
 80047c0:	213f      	movs	r1, #63	; 0x3f
 80047c2:	2200      	movs	r2, #0
 80047c4:	f7ff fed4 	bl	8004570 <NVIC_EncodePriority>
 80047c8:	4603      	mov	r3, r0
 80047ca:	206b      	movs	r0, #107	; 0x6b
 80047cc:	4619      	mov	r1, r3
 80047ce:	f7ff fea5 	bl	800451c <NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80047d2:	206b      	movs	r0, #107	; 0x6b
 80047d4:	f7ff fe88 	bl	80044e8 <NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 80047d8:	206b      	movs	r0, #107	; 0x6b
 80047da:	f7ff fe53 	bl	8004484 <NVIC_EnableIRQ>
}
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80047e4:	206b      	movs	r0, #107	; 0x6b
 80047e6:	f7ff fe7f 	bl	80044e8 <NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 80047ea:	206b      	movs	r0, #107	; 0x6b
 80047ec:	f7ff fe62 	bl	80044b4 <NVIC_DisableIRQ>
}
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop

080047f4 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <USBD_HandleEP0_Stall+0x2c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2080      	movs	r0, #128	; 0x80
 8004800:	2101      	movs	r1, #1
 8004802:	4798      	blx	r3
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <USBD_HandleEP0_Stall+0x2c>)
 800480c:	2201      	movs	r2, #1
 800480e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8004812:	4b03      	ldr	r3, [pc, #12]	; (8004820 <USBD_HandleEP0_Stall+0x2c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	2000      	movs	r0, #0
 800481a:	2118      	movs	r1, #24
 800481c:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 800481e:	bd80      	pop	{r7, pc}
 8004820:	1ffe93e8 	.word	0x1ffe93e8

08004824 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8004836:	4b95      	ldr	r3, [pc, #596]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 8004838:	885b      	ldrh	r3, [r3, #2]
 800483a:	b29b      	uxth	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8004840:	4b93      	ldr	r3, [pc, #588]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004842:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 800484c:	4b90      	ldr	r3, [pc, #576]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 800484e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 8004856:	4b8e      	ldr	r3, [pc, #568]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004858:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800485c:	b2db      	uxtb	r3, r3
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	f040 8227 	bne.w	8004cba <USBD_Handle_DeviceRequest+0x496>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 800486c:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b0c      	cmp	r3, #12
 8004874:	f200 821e 	bhi.w	8004cb4 <USBD_Handle_DeviceRequest+0x490>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <USBD_Handle_DeviceRequest+0x5c>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	08004a1b 	.word	0x08004a1b
 8004884:	080048b5 	.word	0x080048b5
 8004888:	08004cb5 	.word	0x08004cb5
 800488c:	08004be7 	.word	0x08004be7
 8004890:	08004cb5 	.word	0x08004cb5
 8004894:	08004b11 	.word	0x08004b11
 8004898:	08004961 	.word	0x08004961
 800489c:	08004ba1 	.word	0x08004ba1
 80048a0:	08004951 	.word	0x08004951
 80048a4:	08004b55 	.word	0x08004b55
 80048a8:	080049e1 	.word	0x080049e1
 80048ac:	08004ba7 	.word	0x08004ba7
 80048b0:	08004caf 	.word	0x08004caf
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 80048b4:	4b75      	ldr	r3, [pc, #468]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d134      	bne.n	800492c <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80048c2:	4b72      	ldr	r3, [pc, #456]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80048c4:	889b      	ldrh	r3, [r3, #4]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80048ce:	4b71      	ldr	r3, [pc, #452]	; (8004a94 <USBD_Handle_DeviceRequest+0x270>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d004      	beq.n	80048e2 <USBD_Handle_DeviceRequest+0xbe>
 80048d8:	4b6c      	ldr	r3, [pc, #432]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80048da:	889b      	ldrh	r3, [r3, #4]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 80048e2:	4a6b      	ldr	r2, [pc, #428]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	7a1b      	ldrb	r3, [r3, #8]
 80048f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048f4:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d115      	bne.n	8004926 <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 80048fa:	4a65      	ldr	r2, [pc, #404]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	441a      	add	r2, r3
 8004906:	7a13      	ldrb	r3, [r2, #8]
 8004908:	f36f 0382 	bfc	r3, #2, #1
 800490c:	7213      	strb	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 800490e:	4b60      	ldr	r3, [pc, #384]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	4a5d      	ldr	r2, [pc, #372]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 8004916:	8892      	ldrh	r2, [r2, #4]
 8004918:	b292      	uxth	r2, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	4610      	mov	r0, r2
 800491e:	2100      	movs	r1, #0
 8004920:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 8004922:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 8004924:	e1c9      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 8004926:	f7ff ff65 	bl	80047f4 <USBD_HandleEP0_Stall>
          }
          break;
 800492a:	e1c6      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 800492c:	4b57      	ldr	r3, [pc, #348]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 800493a:	4a55      	ldr	r2, [pc, #340]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 800493c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004940:	f36f 0382 	bfc	r3, #2, #1
 8004944:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 8004948:	e1b7      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        USBD_HandleEP0_Stall();
 800494a:	f7ff ff53 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 800494e:	e1b4      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 8004950:	4b4f      	ldr	r3, [pc, #316]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	2000      	movs	r0, #0
 8004958:	494f      	ldr	r1, [pc, #316]	; (8004a98 <USBD_Handle_DeviceRequest+0x274>)
 800495a:	2201      	movs	r2, #1
 800495c:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 800495e:	e1ac      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 8004960:	4b4b      	ldr	r3, [pc, #300]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004962:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 800496c:	4b47      	ldr	r3, [pc, #284]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 800496e:	885b      	ldrh	r3, [r3, #2]
 8004970:	b29b      	uxth	r3, r3
 8004972:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8004974:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 8004976:	889b      	ldrh	r3, [r3, #4]
 8004978:	b29b      	uxth	r3, r3
 800497a:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 800497c:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 800497e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	b290      	uxth	r0, r2
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	b291      	uxth	r1, r2
 800498c:	1d3a      	adds	r2, r7, #4
 800498e:	4798      	blx	r3
 8004990:	4603      	mov	r3, r0
 8004992:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 800499a:	f7ff ff2b 	bl	80047f4 <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 800499e:	e18c      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 80049a0:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80049a2:	88db      	ldrh	r3, [r3, #6]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d803      	bhi.n	80049b6 <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 80049ae:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80049b0:	88db      	ldrh	r3, [r3, #6]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	2000      	movs	r0, #0
 80049c0:	4611      	mov	r1, r2
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	4798      	blx	r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80049d2:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 80049de:	e16c      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80049e0:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <USBD_Handle_DeviceRequest+0x270>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d10e      	bne.n	8004a08 <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 80049f2:	8892      	ldrh	r2, [r2, #4]
 80049f4:	b292      	uxth	r2, r2
 80049f6:	f502 729c 	add.w	r2, r2, #312	; 0x138
 80049fa:	4925      	ldr	r1, [pc, #148]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 80049fc:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80049fe:	2000      	movs	r0, #0
 8004a00:	4611      	mov	r1, r2
 8004a02:	2201      	movs	r2, #1
 8004a04:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 8004a06:	e158      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004a08:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <USBD_Handle_DeviceRequest+0x270>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d102      	bne.n	8004a18 <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 8004a12:	f7ff feef 	bl	80047f4 <USBD_HandleEP0_Stall>
          break;
 8004a16:	e150      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        break;
 8004a18:	e14f      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004a2a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004a2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004a3c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	463a      	mov	r2, r7
 8004a52:	2000      	movs	r0, #0
 8004a54:	4611      	mov	r1, r2
 8004a56:	2202      	movs	r2, #2
 8004a58:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 8004a5a:	e12e      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <USBD_Handle_DeviceRequest+0x268>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d118      	bne.n	8004a9c <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <USBD_Handle_DeviceRequest+0x270>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d113      	bne.n	8004a9c <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <USBD_Handle_DeviceRequest+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	463a      	mov	r2, r7
 8004a80:	2000      	movs	r0, #0
 8004a82:	4611      	mov	r1, r2
 8004a84:	2202      	movs	r2, #2
 8004a86:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 8004a88:	e117      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
 8004a8a:	bf00      	nop
 8004a8c:	1ffe91e0 	.word	0x1ffe91e0
 8004a90:	1ffe93e8 	.word	0x1ffe93e8
 8004a94:	1ffe91dd 	.word	0x1ffe91dd
 8004a98:	1ffe9521 	.word	0x1ffe9521
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8004a9c:	4b8c      	ldr	r3, [pc, #560]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d12f      	bne.n	8004b0a <USBD_Handle_DeviceRequest+0x2e6>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8004aaa:	4b89      	ldr	r3, [pc, #548]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004aac:	889b      	ldrh	r3, [r3, #4]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8004ab6:	4b87      	ldr	r3, [pc, #540]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d004      	beq.n	8004aca <USBD_Handle_DeviceRequest+0x2a6>
 8004ac0:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004ac2:	889b      	ldrh	r3, [r3, #4]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11f      	bne.n	8004b0a <USBD_Handle_DeviceRequest+0x2e6>
              (1U == device.Endpoints[index].IsConfigured))
 8004aca:	4a83      	ldr	r2, [pc, #524]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	7a1b      	ldrb	r3, [r3, #8]
 8004ad8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004adc:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d113      	bne.n	8004b0a <USBD_Handle_DeviceRequest+0x2e6>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8004ae2:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	7a1b      	ldrb	r3, [r3, #8]
 8004af0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8004af8:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	463a      	mov	r2, r7
 8004b00:	2000      	movs	r0, #0
 8004b02:	4611      	mov	r1, r2
 8004b04:	2202      	movs	r2, #2
 8004b06:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 8004b08:	e0d7      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 8004b0a:	f7ff fe73 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 8004b0e:	e0d4      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SetAddress:
        if (0U == value)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <USBD_Handle_DeviceRequest+0x2fa>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8004b16:	4b6f      	ldr	r3, [pc, #444]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004b18:	2202      	movs	r2, #2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e002      	b.n	8004b24 <USBD_Handle_DeviceRequest+0x300>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004b20:	2203      	movs	r2, #3
 8004b22:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 8004b24:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	4610      	mov	r0, r2
 8004b30:	2100      	movs	r1, #0
 8004b32:	4798      	blx	r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <USBD_Handle_DeviceRequest+0x32e>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <USBD_Handle_DeviceRequest+0x32e>
          {
            device.events->set_address();
 8004b46:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	4798      	blx	r3
          }
        }
        break;
 8004b50:	e0b3      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
 8004b52:	e0b2      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b5a:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 8004b5e:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <USBD_Handle_DeviceRequest+0x350>
        {
          device.events->config_changed();
 8004b6a:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <USBD_Handle_DeviceRequest+0x35e>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8004b7a:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	701a      	strb	r2, [r3, #0]
          break;
 8004b80:	e09b      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8004b82:	4b55      	ldr	r3, [pc, #340]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004b84:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <USBD_Handle_DeviceRequest+0x376>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8004b92:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004b94:	2204      	movs	r2, #4
 8004b96:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 8004b98:	e08f      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 8004b9a:	f7ff fe2b 	bl	80047f4 <USBD_HandleEP0_Stall>
        }
        break;
 8004b9e:	e08c      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 8004ba0:	f7ff fe28 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 8004ba4:	e089      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d111      	bne.n	8004bd4 <USBD_Handle_DeviceRequest+0x3b0>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004bb2:	885b      	ldrh	r3, [r3, #2]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8004bb8:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004bba:	889b      	ldrh	r3, [r3, #4]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	b2d9      	uxtb	r1, r3
 8004bc4:	4a44      	ldr	r2, [pc, #272]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004bce:	460a      	mov	r2, r1
 8004bd0:	701a      	strb	r2, [r3, #0]
          break;
 8004bd2:	e072      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d102      	bne.n	8004be4 <USBD_Handle_DeviceRequest+0x3c0>
        {
          USBD_HandleEP0_Stall();
 8004bde:	f7ff fe09 	bl	80047f4 <USBD_HandleEP0_Stall>
          break;
 8004be2:	e06a      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        break;
 8004be4:	e069      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d102      	bne.n	8004bf2 <USBD_Handle_DeviceRequest+0x3ce>
        {
          USBD_HandleEP0_Stall();
 8004bec:	f7ff fe02 	bl	80047f4 <USBD_HandleEP0_Stall>
          break;
 8004bf0:	e063      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d138      	bne.n	8004c6e <USBD_Handle_DeviceRequest+0x44a>
        {
          switch (value)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <USBD_Handle_DeviceRequest+0x3f4>
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d000      	beq.n	8004c08 <USBD_Handle_DeviceRequest+0x3e4>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 8004c06:	e031      	b.n	8004c6c <USBD_Handle_DeviceRequest+0x448>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 8004c08:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004c0a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 8004c16:	e029      	b.n	8004c6c <USBD_Handle_DeviceRequest+0x448>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 8004c18:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004c1a:	889b      	ldrh	r3, [r3, #4]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 8004c24:	4a2c      	ldr	r2, [pc, #176]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	7a1b      	ldrb	r3, [r3, #8]
 8004c32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <USBD_Handle_DeviceRequest+0x41e>
              {
                USBD_HandleEP0_Stall();
 8004c3c:	f7ff fdda 	bl	80047f4 <USBD_HandleEP0_Stall>
 8004c40:	e013      	b.n	8004c6a <USBD_Handle_DeviceRequest+0x446>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 8004c42:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	7a13      	ldrb	r3, [r2, #8]
 8004c50:	f043 0304 	orr.w	r3, r3, #4
 8004c54:	7213      	strb	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004c5e:	8892      	ldrh	r2, [r2, #4]
 8004c60:	b292      	uxth	r2, r2
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	4610      	mov	r0, r2
 8004c66:	2101      	movs	r1, #1
 8004c68:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 8004c6a:	bf00      	nop
            default:
              break;
          }
          break;
 8004c6c:	e025      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <USBD_Handle_DeviceRequest+0x4b0>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d117      	bne.n	8004ca8 <USBD_Handle_DeviceRequest+0x484>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d114      	bne.n	8004ca8 <USBD_Handle_DeviceRequest+0x484>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d10d      	bne.n	8004ca8 <USBD_Handle_DeviceRequest+0x484>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <USBD_Handle_DeviceRequest+0x4ac>)
 8004c8e:	889b      	ldrh	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <USBD_Handle_DeviceRequest+0x484>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 8004c98:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004c9a:	7a13      	ldrb	r3, [r2, #8]
 8004c9c:	f043 0304 	orr.w	r3, r3, #4
 8004ca0:	7213      	strb	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 8004ca2:	f7ff fda7 	bl	80047f4 <USBD_HandleEP0_Stall>
            break;
 8004ca6:	e008      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 8004ca8:	f7ff fda4 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 8004cac:	e005      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 8004cae:	f7ff fda1 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 8004cb2:	e002      	b.n	8004cba <USBD_Handle_DeviceRequest+0x496>

      default:
        USBD_HandleEP0_Stall();
 8004cb4:	f7ff fd9e 	bl	80047f4 <USBD_HandleEP0_Stall>
        break;
 8004cb8:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <USBD_Handle_DeviceRequest+0x4b4>)
 8004cbc:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004cc0:	f022 0202 	bic.w	r2, r2, #2
 8004cc4:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	1ffe91e0 	.word	0x1ffe91e0
 8004cd4:	1ffe91dd 	.word	0x1ffe91dd
 8004cd8:	1ffe93e8 	.word	0x1ffe93e8

08004cdc <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004ce2:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d10a      	bne.n	8004d00 <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004cfe:	e010      	b.n	8004d22 <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8004d00:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004d02:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d10b      	bne.n	8004d22 <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004d12:	7912      	ldrb	r2, [r2, #4]
 8004d14:	4610      	mov	r0, r2
 8004d16:	2118      	movs	r1, #24
 8004d18:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8004d1a:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <USBD_HandleEP0_IN+0x48>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	1ffe93e8 	.word	0x1ffe93e8

08004d28 <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d2e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d10d      	bne.n	8004d52 <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8004d36:	f7ff fd75 	bl	8004824 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2000      	movs	r0, #0
 8004d42:	2100      	movs	r1, #0
 8004d44:	2200      	movs	r2, #0
 8004d46:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004d50:	e010      	b.n	8004d74 <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d54:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d10b      	bne.n	8004d74 <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d64:	7912      	ldrb	r2, [r2, #4]
 8004d66:	4610      	mov	r0, r2
 8004d68:	2118      	movs	r1, #24
 8004d6a:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8004d6c:	4b02      	ldr	r3, [pc, #8]	; (8004d78 <USBD_HandleEP0_OUT+0x50>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	1ffe93e8 	.word	0x1ffe93e8

08004d7c <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8004d82:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4921      	ldr	r1, [pc, #132]	; (8004e10 <USBD_HandleEP0_SETUP+0x94>)
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	4798      	blx	r3
 8004d90:	4603      	mov	r3, r0
 8004d92:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004d96:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004d9a:	f042 0202 	orr.w	r2, r2, #2
 8004d9e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d12d      	bne.n	8004e04 <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <USBD_HandleEP0_SETUP+0x94>)
 8004daa:	88db      	ldrh	r3, [r3, #6]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 8004dba:	f7ff fd33 	bl	8004824 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4798      	blx	r3
 8004dcc:	e01a      	b.n	8004e04 <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <USBD_HandleEP0_SETUP+0x94>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	b25b      	sxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da06      	bge.n	8004dea <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 8004de4:	f7ff fd1e 	bl	8004824 <USBD_Handle_DeviceRequest>
 8004de8:	e00c      	b.n	8004e04 <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004dec:	2204      	movs	r2, #4
 8004dee:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <USBD_HandleEP0_SETUP+0x90>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <USBD_HandleEP0_SETUP+0x94>)
 8004dfa:	88d2      	ldrh	r2, [r2, #6]
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	2000      	movs	r0, #0
 8004e00:	4611      	mov	r1, r2
 8004e02:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	1ffe93e8 	.word	0x1ffe93e8
 8004e10:	1ffe91e0 	.word	0x1ffe91e0

08004e14 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	f200 811c 	bhi.w	800505e <USBD_SignalDeviceEventHandler+0x24a>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <USBD_SignalDeviceEventHandler+0x18>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08005007 	.word	0x08005007
 8004e30:	08004fe7 	.word	0x08004fe7
 8004e34:	08004fad 	.word	0x08004fad
 8004e38:	08004fc7 	.word	0x08004fc7
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	0800505f 	.word	0x0800505f
 8004e44:	08005033 	.word	0x08005033
 8004e48:	0800500f 	.word	0x0800500f
 8004e4c:	0800505f 	.word	0x0800505f
 8004e50:	08004f93 	.word	0x08004f93
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8004e54:	4b84      	ldr	r3, [pc, #528]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8004e56:	2202      	movs	r2, #2
 8004e58:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8004e5a:	4b84      	ldr	r3, [pc, #528]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 8004e62:	4a82      	ldr	r2, [pc, #520]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004e64:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004e68:	f36f 0382 	bfc	r3, #2, #1
 8004e6c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8004e70:	2307      	movs	r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e060      	b.n	8004f38 <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f1c3 0307 	rsb	r3, r3, #7
 8004e7c:	4a7b      	ldr	r2, [pc, #492]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004e7e:	212c      	movs	r1, #44	; 0x2c
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	441a      	add	r2, r3
 8004e86:	8913      	ldrh	r3, [r2, #8]
 8004e88:	f36f 1304 	bfc	r3, #4, #1
 8004e8c:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f1c3 0307 	rsb	r3, r3, #7
 8004e94:	4a75      	ldr	r2, [pc, #468]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	441a      	add	r2, r3
 8004e9e:	8913      	ldrh	r3, [r2, #8]
 8004ea0:	f36f 03c3 	bfc	r3, #3, #1
 8004ea4:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1c3 0307 	rsb	r3, r3, #7
 8004eac:	4a6f      	ldr	r2, [pc, #444]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	441a      	add	r2, r3
 8004eb6:	7a13      	ldrb	r3, [r2, #8]
 8004eb8:	f36f 0382 	bfc	r3, #2, #1
 8004ebc:	7213      	strb	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b07      	cmp	r3, #7
 8004ec2:	d036      	beq.n	8004f32 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f1c3 0307 	rsb	r3, r3, #7
 8004eca:	4a68      	ldr	r2, [pc, #416]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	7a1b      	ldrb	r3, [r3, #8]
 8004ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004eda:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d028      	beq.n	8004f32 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004ee0:	4b62      	ldr	r3, [pc, #392]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8004eec:	495f      	ldr	r1, [pc, #380]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004eee:	202c      	movs	r0, #44	; 0x2c
 8004ef0:	fb00 f202 	mul.w	r2, r0, r2
 8004ef4:	440a      	add	r2, r1
 8004ef6:	7912      	ldrb	r2, [r2, #4]
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4798      	blx	r3
 8004efc:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d117      	bne.n	8004f32 <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f1c3 0307 	rsb	r3, r3, #7
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	441a      	add	r2, r3
 8004f12:	7a13      	ldrb	r3, [r2, #8]
 8004f14:	f36f 0300 	bfc	r3, #0, #1
 8004f18:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f1c3 0307 	rsb	r3, r3, #7
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	441a      	add	r2, r3
 8004f2a:	7a13      	ldrb	r3, [r2, #8]
 8004f2c:	f36f 0341 	bfc	r3, #1, #1
 8004f30:	7213      	strb	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d19b      	bne.n	8004e76 <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004f46:	2301      	movs	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e00a      	b.n	8004f62 <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f1c3 0301 	rsb	r3, r3, #1
 8004f52:	4a46      	ldr	r2, [pc, #280]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f54:	4413      	add	r3, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f1      	bne.n	8004f4c <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8004f68:	4b40      	ldr	r3, [pc, #256]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	4a3f      	ldr	r2, [pc, #252]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f70:	7912      	ldrb	r2, [r2, #4]
 8004f72:	4610      	mov	r0, r2
 8004f74:	2118      	movs	r1, #24
 8004f76:	4798      	blx	r3
      if (NULL != device.events->reset)
 8004f78:	4b3c      	ldr	r3, [pc, #240]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 8004f84:	4b39      	ldr	r3, [pc, #228]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	4798      	blx	r3
      }
      break;
 8004f8e:	e067      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8004f90:	e066      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004f94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4798      	blx	r3
      }
      break;
 8004fa8:	e05a      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8004faa:	e059      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4798      	blx	r3
      }
      break;
 8004fc2:	e04d      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8004fc4:	e04c      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 8004fd8:	4b24      	ldr	r3, [pc, #144]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4798      	blx	r3
      }
      break;
 8004fe2:	e03d      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8004fe4:	e03c      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8004ffa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4798      	blx	r3
      }
      break;
 8005002:	e02d      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8005004:	e02c      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
      break;
 800500c:	e028      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 800500e:	4b17      	ldr	r3, [pc, #92]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8005010:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8005014:	4b14      	ldr	r3, [pc, #80]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8005016:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 800501a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8005026:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4798      	blx	r3
      }
      break;
 800502e:	e017      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 8005030:	e016      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 800503a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <USBD_SignalDeviceEventHandler+0x254>)
 8005040:	2205      	movs	r2, #5
 8005042:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8005046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <USBD_SignalDeviceEventHandler+0x258>)
 8005052:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	4798      	blx	r3
      }
      break;
 800505a:	e001      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
 800505c:	e000      	b.n	8005060 <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 800505e:	bf00      	nop
  }
}
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	1ffe91dd 	.word	0x1ffe91dd
 800506c:	1ffe93e8 	.word	0x1ffe93e8

08005070 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	460a      	mov	r2, r1
 800507a:	71fb      	strb	r3, [r7, #7]
 800507c:	4613      	mov	r3, r2
 800507e:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	222c      	movs	r2, #44	; 0x2c
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	4a5e      	ldr	r2, [pc, #376]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 800508e:	4413      	add	r3, r2
 8005090:	3304      	adds	r3, #4
 8005092:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8005094:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 8005096:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800509a:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 800509e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80050a2:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b56      	ldr	r3, [pc, #344]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80050ae:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b53      	ldr	r3, [pc, #332]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80050bc:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 80050c0:	79bb      	ldrb	r3, [r7, #6]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d013      	beq.n	80050ee <USBD_SignalEndpointEvent_Handler+0x7e>
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d03a      	beq.n	8005140 <USBD_SignalEndpointEvent_Handler+0xd0>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d000      	beq.n	80050d0 <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 80050ce:	e08e      	b.n	80051ee <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	8893      	ldrh	r3, [r2, #4]
 80050d4:	f36f 03c3 	bfc	r3, #3, #1
 80050d8:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 80050da:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80050dc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d000      	beq.n	80050e6 <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 80050e4:	e002      	b.n	80050ec <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 80050e6:	f7ff fe49 	bl	8004d7c <USBD_HandleEP0_SETUP>
          break;
 80050ea:	bf00      	nop
        default:
          break;
      }
      break;
 80050ec:	e07f      	b.n	80051ee <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	8893      	ldrh	r3, [r2, #4]
 80050f2:	f043 0320 	orr.w	r3, r3, #32
 80050f6:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d110      	bne.n	8005122 <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2200      	movs	r2, #0
 8005104:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8005106:	4b40      	ldr	r3, [pc, #256]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	7810      	ldrb	r0, [r2, #0]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	6911      	ldr	r1, [r2, #16]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	6952      	ldr	r2, [r2, #20]
 8005118:	4798      	blx	r3
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	8893      	ldrh	r3, [r2, #4]
 8005126:	f36f 03c3 	bfc	r3, #3, #1
 800512a:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 800512e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d000      	beq.n	8005138 <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 8005136:	e002      	b.n	800513e <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 8005138:	f7ff fdf6 	bl	8004d28 <USBD_HandleEP0_OUT>
          break;
 800513c:	bf00      	nop
        default:
          break;
      }
      break;
 800513e:	e056      	b.n	80051ee <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d017      	beq.n	8005178 <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8005148:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	7810      	ldrb	r0, [r2, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800515a:	4798      	blx	r3
 800515c:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	1ad2      	subs	r2, r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	441a      	add	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005176:	e03a      	b.n	80051ee <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d121      	bne.n	80051ca <USBD_SignalEndpointEvent_Handler+0x15a>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <USBD_SignalEndpointEvent_Handler+0x19c>)
 8005194:	88d2      	ldrh	r2, [r2, #6]
 8005196:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8005198:	4293      	cmp	r3, r2
 800519a:	d016      	beq.n	80051ca <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	8892      	ldrh	r2, [r2, #4]
 80051a4:	f3c2 1286 	ubfx	r2, r2, #6, #7
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80051ae:	fb02 f201 	mul.w	r2, r2, r1
 80051b2:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	4610      	mov	r0, r2
 80051c4:	2100      	movs	r1, #0
 80051c6:	2200      	movs	r2, #0
 80051c8:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	8893      	ldrh	r3, [r2, #4]
 80051d4:	f36f 1304 	bfc	r3, #4, #1
 80051d8:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80051dc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d000      	beq.n	80051e6 <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 80051e4:	e002      	b.n	80051ec <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 80051e6:	f7ff fd79 	bl	8004cdc <USBD_HandleEP0_IN>
          break;
 80051ea:	bf00      	nop
        default:
          break;
      }
      break;
 80051ec:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80051f4:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <USBD_SignalEndpointEvent_Handler+0x198>)
 80051fe:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	1ffe93e8 	.word	0x1ffe93e8
 800520c:	1ffe91e0 	.word	0x1ffe91e0

08005210 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <NVIC_GetPriorityGrouping+0x18>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800521c:	0a1b      	lsrs	r3, r3, #8
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005236:	4908      	ldr	r1, [pc, #32]	; (8005258 <NVIC_EnableIRQ+0x2c>)
 8005238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	79fa      	ldrb	r2, [r7, #7]
 8005240:	f002 021f 	and.w	r2, r2, #31
 8005244:	2001      	movs	r0, #1
 8005246:	fa00 f202 	lsl.w	r2, r0, r2
 800524a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000e100 	.word	0xe000e100

0800525c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da0b      	bge.n	8005288 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005270:	490d      	ldr	r1, [pc, #52]	; (80052a8 <NVIC_SetPriority+0x4c>)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	3b04      	subs	r3, #4
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	0092      	lsls	r2, r2, #2
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	440b      	add	r3, r1
 8005284:	761a      	strb	r2, [r3, #24]
 8005286:	e009      	b.n	800529c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005288:	4908      	ldr	r1, [pc, #32]	; (80052ac <NVIC_SetPriority+0x50>)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	440b      	add	r3, r1
 8005298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00
 80052ac:	e000e100 	.word	0xe000e100

080052b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f1c3 0307 	rsb	r3, r3, #7
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	bf28      	it	cs
 80052ce:	2306      	movcs	r3, #6
 80052d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3306      	adds	r3, #6
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d902      	bls.n	80052e0 <NVIC_EncodePriority+0x30>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3b01      	subs	r3, #1
 80052de:	e000      	b.n	80052e2 <NVIC_EncodePriority+0x32>
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2201      	movs	r2, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	401a      	ands	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	1e59      	subs	r1, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005304:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005306:	4618      	mov	r0, r3
 8005308:	3724      	adds	r7, #36	; 0x24
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop

08005314 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b25b      	sxtb	r3, r3
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff82 	bl	800522c <NVIC_EnableIRQ>
}
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop

08005330 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	781c      	ldrb	r4, [r3, #0]
 800533c:	f7ff ff68 	bl	8005210 <NVIC_GetPriorityGrouping>
 8005340:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8005346:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	f7ff ffad 	bl	80052b0 <NVIC_EncodePriority>
 8005356:	4602      	mov	r2, r0
 8005358:	b263      	sxtb	r3, r4
 800535a:	4618      	mov	r0, r3
 800535c:	4611      	mov	r1, r2
 800535e:	f7ff ff7d 	bl	800525c <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ffd2 	bl	8005314 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop

0800537c <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7a5b      	ldrb	r3, [r3, #9]
 800538c:	f083 0301 	eor.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_Init(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7a1a      	ldrb	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fb fea6 	bl	80010f8 <XMC_CAN_Init>
#else
    XMC_CAN_Init(handle->canglobal_ptr, handle->can_frequency);
#endif
    handle->init_status = true;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80053b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d0:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <NVIC_SetPriorityGrouping+0x44>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80053e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <NVIC_SetPriorityGrouping+0x44>)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60d3      	str	r3, [r2, #12]
}
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800540e:	2001      	movs	r0, #1
 8005410:	f7ff ffd6 	bl	80053c0 <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005414:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <SystemCoreSetup+0x94>)
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <SystemCoreSetup+0x98>)
 800541a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800541c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005420:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005422:	4a1e      	ldr	r2, [pc, #120]	; (800549c <SystemCoreSetup+0x94>)
 8005424:	4b1d      	ldr	r3, [pc, #116]	; (800549c <SystemCoreSetup+0x94>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800542e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <SystemCoreSetup+0x9c>)
 8005434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005438:	3314      	adds	r3, #20
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f023 030f 	bic.w	r3, r3, #15
 8005444:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f043 0304 	orr.w	r3, r3, #4
 800544c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <SystemCoreSetup+0x9c>)
 8005450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005454:	3314      	adds	r3, #20
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800545a:	4a10      	ldr	r2, [pc, #64]	; (800549c <SystemCoreSetup+0x94>)
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <SystemCoreSetup+0x94>)
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f023 0310 	bic.w	r3, r3, #16
 8005464:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8005466:	4a0d      	ldr	r2, [pc, #52]	; (800549c <SystemCoreSetup+0x94>)
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <SystemCoreSetup+0x94>)
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f023 0308 	bic.w	r3, r3, #8
 8005470:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <SystemCoreSetup+0x94>)
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <SystemCoreSetup+0x94>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <SystemCoreSetup+0x94>)
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <SystemCoreSetup+0x94>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005488:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <SystemCoreSetup+0x94>)
 800548c:	4b03      	ldr	r3, [pc, #12]	; (800549c <SystemCoreSetup+0x94>)
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005494:	6253      	str	r3, [r2, #36]	; 0x24
}
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	e000ed00 	.word	0xe000ed00
 80054a0:	08000000 	.word	0x08000000
 80054a4:	58001000 	.word	0x58001000

080054a8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]

  return (status);
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <OSCHP_GetFrequency+0x10>)
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	00b71b00 	.word	0x00b71b00

080054dc <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <SystemCoreClockSetup+0x50>)
 80054e4:	1d3c      	adds	r4, r7, #4
 80054e6:	461d      	mov	r5, r3
 80054e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	6023      	str	r3, [r4, #0]
    .fccu_clkdiv = 1U,
#endif
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f81a 	bl	800052c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80054f8:	2000      	movs	r0, #0
 80054fa:	f7fb f92d 	bl	8000758 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fb f8e2 	bl	80006c8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005504:	2004      	movs	r0, #4
 8005506:	f7fb f9b3 	bl	8000870 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800550a:	2001      	movs	r0, #1
 800550c:	2120      	movs	r1, #32
 800550e:	f7fb fa47 	bl	80009a0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005512:	2000      	movs	r0, #0
 8005514:	f7fb f8ec 	bl	80006f0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8005518:	2001      	movs	r0, #1
 800551a:	f7fb f9d1 	bl	80008c0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800551e:	2001      	movs	r0, #1
 8005520:	f7fb f9ba 	bl	8000898 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bdb0      	pop	{r4, r5, r7, pc}
 800552a:	bf00      	nop
 800552c:	08007244 	.word	0x08007244

08005530 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
		                                      const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
		                                      const uint32_t service_request)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	460b      	mov	r3, r1
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	2107      	movs	r1, #7
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	401a      	ands	r2, r3
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop

08005568 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop

08005594 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]
}
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <XMC_CAN_NODE_GetStatus>:
 *  XMC_CAN_NODE_ClearStatus()
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  return ((can_node->NSR));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop

080055ec <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
}
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop

0800560c <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
}
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 0201 	bic.w	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop

0800564c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
		                                            const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
		                                            const uint32_t service_request)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	460b      	mov	r3, r1
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	6891      	ldr	r1, [r2, #8]
 8005664:	7afa      	ldrb	r2, [r7, #11]
 8005666:	2007      	movs	r0, #7
 8005668:	fa00 f202 	lsl.w	r2, r0, r2
 800566c:	43d2      	mvns	r2, r2
 800566e:	4011      	ands	r1, r2
		                      (service_request << (uint32_t)can_mo_ptr_int);
 8005670:	7afa      	ldrb	r2, [r7, #11]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
		                                            const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
		                                            const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8005678:	430a      	orrs	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
		                      (service_request << (uint32_t)can_mo_ptr_int);
}
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
		                                    const uint32_t event)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6811      	ldr	r1, [r2, #0]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80056da:	f7ff ffe3 	bl	80056a4 <XMC_CAN_MO_EnableEvent>
}
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80056f6:	f7ff ffd5 	bl	80056a4 <XMC_CAN_MO_EnableEvent>
}
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f831 	bl	8005774 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f043 0308 	orr.w	r3, r3, #8
 8005746:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	f7fb ff5e 	bl	8001610 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005768:	f7fb ff52 	bl	8001610 <XMC_CAN_NODE_EnableEvent>
  }

}
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop

08005774 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005786:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8005788:	4610      	mov	r0, r2
 800578a:	2100      	movs	r1, #0
 800578c:	461a      	mov	r2, r3
 800578e:	f7ff fecf 	bl	8005530 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579c:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800579e:	4610      	mov	r0, r2
 80057a0:	2104      	movs	r1, #4
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7ff fec4 	bl	8005530 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b2:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80057b4:	4610      	mov	r0, r2
 80057b6:	2108      	movs	r1, #8
 80057b8:	461a      	mov	r2, r3
 80057ba:	f7ff feb9 	bl	8005530 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c8:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80057ca:	4610      	mov	r0, r2
 80057cc:	210c      	movs	r1, #12
 80057ce:	461a      	mov	r2, r3
 80057d0:	f7ff feae 	bl	8005530 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop

080057dc <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fb fd53 	bl	8001294 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	79db      	ldrb	r3, [r3, #7]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	795b      	ldrb	r3, [r3, #5]
 80057fe:	4610      	mov	r0, r2
 8005800:	2104      	movs	r1, #4
 8005802:	461a      	mov	r2, r3
 8005804:	f7ff ff22 	bl	800564c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff5d 	bl	80056c8 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7a1b      	ldrb	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	799b      	ldrb	r3, [r3, #6]
 800581e:	4610      	mov	r0, r2
 8005820:	2100      	movs	r1, #0
 8005822:	461a      	mov	r2, r3
 8005824:	f7ff ff12 	bl	800564c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff5b 	bl	80056e4 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7fb fde5 	bl	8001414 <XMC_CAN_MO_Transmit>
 800584a:	4603      	mov	r3, r0
 800584c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f7fb fe01 	bl	8001470 <XMC_CAN_MO_Receive>
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]
  return (status);
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <CAN_NODE_MO_GetStatus>:
  return (status);
}

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fefd 	bl	8005688 <XMC_CAN_MO_GetStatus>
 800588e:	60f8      	str	r0, [r7, #12]

  return (status);
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <CAN_NODE_GetStatus>:

}

/* Function to read the current status of the CAN node  */
uint32_t CAN_NODE_GetStatus(const CAN_NODE_t* handle)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t  status;

  XMC_ASSERT("CAN_NODE_GetStatus: handle null", handle != NULL);

  XMC_CAN_NODE_t *const can_node = handle->node_ptr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  status = XMC_CAN_NODE_GetStatus(can_node);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fe82 	bl	80055b4 <XMC_CAN_NODE_GetStatus>
 80058b0:	60b8      	str	r0, [r7, #8]
  return (status);
 80058b2:	68bb      	ldr	r3, [r7, #8]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fd51 	bl	800537c <GLOBAL_CAN_Init>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d17b      	bne.n	80059dc <CAN_NODE_Init+0x120>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4610      	mov	r0, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fb faca 	bl	8000e88 <XMC_CAN_NODE_NominalBitTimeConfigure>
    /* set CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fe67 	bl	80055cc <XMC_CAN_NODE_EnableConfigurationChange>
    XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fe82 	bl	800560c <XMC_CAN_NODE_SetInitBit>

    if (handle->loopback_enable == true) /* Loop back mode enabled */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <CAN_NODE_Init+0x62>
    {
      XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fe3c 	bl	8005594 <XMC_CAN_NODE_EnableLoopBack>
 800591c:	e018      	b.n	8005950 <CAN_NODE_Init+0x94>
    }
    else
    {
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005924:	6819      	ldr	r1, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800592c:	791a      	ldrb	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	461a      	mov	r2, r3
 800593a:	f7fa fd29 	bl	8000390 <XMC_GPIO_Init>
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	f7ff fe0c 	bl	8005568 <XMC_CAN_NODE_SetReceiveInput>
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fed5 	bl	8005700 <CAN_NODE_SetNodeEvents>

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e019      	b.n	8005990 <CAN_NODE_Init+0xd4>
    {
      lmo_ptr = handle->lmobj_ptr[loop_count];
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3302      	adds	r3, #2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60bb      	str	r3, [r7, #8]
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	4608      	mov	r0, r1
 800597c:	4611      	mov	r1, r2
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fb64 	bl	800104c <XMC_CAN_AllocateMOtoNodeList>
      CAN_NODE_MO_Init(lmo_ptr);
 8005984:	68b8      	ldr	r0, [r7, #8]
 8005986:	f7ff ff29 	bl	80057dc <CAN_NODE_MO_Init>
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8005996:	461a      	mov	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	429a      	cmp	r2, r3
 800599c:	d8de      	bhi.n	800595c <CAN_NODE_Init+0xa0>
      lmo_ptr = handle->lmobj_ptr[loop_count];
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
      CAN_NODE_MO_Init(lmo_ptr);
    }
    /* reset CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fe22 	bl	80055ec <XMC_CAN_NODE_DisableConfigurationChange>
    XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fe3d 	bl	800562c <XMC_CAN_NODE_ResetInitBit>
    if (handle->loopback_enable == false)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80059b8:	f083 0301 	eor.w	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00e      	beq.n	80059e0 <CAN_NODE_Init+0x124>
    {
      /* CAN transmit pin configuration */
      XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6819      	ldr	r1, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	791a      	ldrb	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	f7fa fcdb 	bl	8000390 <XMC_GPIO_Init>
 80059da:	e001      	b.n	80059e0 <CAN_NODE_Init+0x124>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 80059dc:	2301      	movs	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop

080059ec <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80059f2:	2300      	movs	r3, #0
 80059f4:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80059f6:	4811      	ldr	r0, [pc, #68]	; (8005a3c <DAVE_Init+0x50>)
 80059f8:	f7ff fd56 	bl	80054a8 <CLOCK_XMC4_Init>
 80059fc:	4603      	mov	r3, r0
 80059fe:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <DAVE_Init+0x24>
  {
	 /**  Initialization of USBD_VCOM APP instance USBD_VCOM_0 */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&USBD_VCOM_0); 
 8005a06:	480e      	ldr	r0, [pc, #56]	; (8005a40 <DAVE_Init+0x54>)
 8005a08:	f7fd ffae 	bl	8003968 <USBD_VCOM_Init>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <DAVE_Init+0x34>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8005a16:	480b      	ldr	r0, [pc, #44]	; (8005a44 <DAVE_Init+0x58>)
 8005a18:	f7ff ff50 	bl	80058bc <CAN_NODE_Init>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance CanRxInterrupt */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CanRxInterrupt); 
 8005a26:	4808      	ldr	r0, [pc, #32]	; (8005a48 <DAVE_Init+0x5c>)
 8005a28:	f7ff fc82 	bl	8005330 <INTERRUPT_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8005a30:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	1ffe8dd8 	.word	0x1ffe8dd8
 8005a40:	1ffe8dac 	.word	0x1ffe8dac
 8005a44:	08007404 	.word	0x08007404
 8005a48:	08007240 	.word	0x08007240

08005a4c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	605a      	str	r2, [r3, #4]
}
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	605a      	str	r2, [r3, #4]
}
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	f003 0301 	and.w	r3, r3, #1
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <XMC_GPIO_EnableDigitalInput>:
 * Enable digital input path for analog pins and configures Pn_PDISC register.This configuration is applicable only for
 * analog port pins.
 *
 */
__STATIC_INLINE void XMC_GPIO_EnableDigitalInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_EnableDigitalInput: Invalid analog port", XMC_GPIO_CHECK_ANALOG_PORT(port));
  
  port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	2101      	movs	r1, #1
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop

08005ae4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
}
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f023 0201 	bic.w	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]
}
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop

08005b24 <XMC_CAN_NODE_SetAnalyzerMode>:
 *
 */


__STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop

08005b44 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
}
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop

08005b64 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <_error>:
		XMC_DEBUG("\n")\
		_error();\
	}

void _error()
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	XMC_GPIO_SetOutputHigh(LED_ERROR);
 8005b84:	4802      	ldr	r0, [pc, #8]	; (8005b90 <_error+0x10>)
 8005b86:	2108      	movs	r1, #8
 8005b88:	f7ff ff60 	bl	8005a4c <XMC_GPIO_SetOutputHigh>
	while (1 == 1)
		;
 8005b8c:	e7fe      	b.n	8005b8c <_error+0xc>
 8005b8e:	bf00      	nop
 8005b90:	48028500 	.word	0x48028500

08005b94 <is_printable>:
{ .condition = Condition_Passive, .kind = SendCommand_Kind_CanMsg, .trigger =
{ .can_identifier = 0x0, .can_bit = 56, .is_valid = true }, .can_identifier =
		0x400, .can_data_length = 8, .count = -1 };

int is_printable(int8_t data_byte)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	71fb      	strb	r3, [r7, #7]
	return (31 < data_byte) && (data_byte < 126);
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	2b1f      	cmp	r3, #31
 8005ba4:	dd05      	ble.n	8005bb2 <is_printable+0x1e>
 8005ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005baa:	2b7d      	cmp	r3, #125	; 0x7d
 8005bac:	dc01      	bgt.n	8005bb2 <is_printable+0x1e>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <is_printable+0x20>
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_CAN_printf>:

USB_CAN_STATUS_t USB_CAN_printf(const char *format, ...)
{
 8005bc0:	b40f      	push	{r0, r1, r2, r3}
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b0c2      	sub	sp, #264	; 0x108
 8005bc6:	af00      	add	r7, sp, #0
	char outPutString[USBD_VCOM_BUFFSIZE];
	USB_CAN_STATUS_t result;
	va_list args;
	va_start(args, format);
 8005bc8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8005bcc:	463b      	mov	r3, r7
 8005bce:	601a      	str	r2, [r3, #0]

	vsnprintf(outPutString, USBD_VCOM_BUFFSIZE, format, args);
 8005bd0:	1d3a      	adds	r2, r7, #4
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bda:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f000 fe58 	bl	8006894 <vsniprintf>
	result = USBD_VCOM_SendString(S(outPutString));
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd ff1e 	bl	8003a28 <USBD_VCOM_SendString>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	va_end(args);
	return result;
 8005bf2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c02:	b004      	add	sp, #16
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop

08005c08 <printCanMsg>:

USB_CAN_STATUS_t printCanMsg(XMC_CAN_MO_t* canMessageObject)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	uint8_t length;

	if (canMessageObject == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <printCanMsg+0x12>
	{
		return USB_CAN_STATUS_FAILURE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e023      	b.n	8005c62 <printCanMsg+0x5a>
	}

	length = canMessageObject->can_data_length;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	7b1b      	ldrb	r3, [r3, #12]
 8005c1e:	73bb      	strb	r3, [r7, #14]

	USB_CAN_printf("\r\nReceived 0x%0x %u", canMessageObject->can_identifier,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8005c28:	461a      	mov	r2, r3
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	480f      	ldr	r0, [pc, #60]	; (8005c6c <printCanMsg+0x64>)
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	f7ff ffc5 	bl	8005bc0 <USB_CAN_printf>
			length);

	for (uint8_t i = 0; i < length; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e00a      	b.n	8005c52 <printCanMsg+0x4a>
	{
		USB_CAN_printf(" 0x%0x", canMessageObject->can_data_byte[i]);
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	7c1b      	ldrb	r3, [r3, #16]
 8005c44:	480a      	ldr	r0, [pc, #40]	; (8005c70 <printCanMsg+0x68>)
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7ff ffba 	bl	8005bc0 <USB_CAN_printf>
	length = canMessageObject->can_data_length;

	USB_CAN_printf("\r\nReceived 0x%0x %u", canMessageObject->can_identifier,
			length);

	for (uint8_t i = 0; i < length; i++)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d3f0      	bcc.n	8005c3c <printCanMsg+0x34>
	{
		USB_CAN_printf(" 0x%0x", canMessageObject->can_data_byte[i]);
	}

	USB_CAN_printf("\r\n");
 8005c5a:	4806      	ldr	r0, [pc, #24]	; (8005c74 <printCanMsg+0x6c>)
 8005c5c:	f7ff ffb0 	bl	8005bc0 <USB_CAN_printf>

	return USB_CAN_STATUS_SUCCESS;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	080074b0 	.word	0x080074b0
 8005c70:	080074c4 	.word	0x080074c4
 8005c74:	080074cc 	.word	0x080074cc

08005c78 <consumeCanMsg>:

USB_CAN_STATUS_t consumeCanMsg(XMC_CAN_MO_t* canMessageObject)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	if (canMessageObject == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <consumeCanMsg+0x12>
	{
		return USB_CAN_STATUS_FAILURE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e009      	b.n	8005c9e <consumeCanMsg+0x26>
	}

	if (echoEnabled == Echo_On)
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <consumeCanMsg+0x30>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d104      	bne.n	8005c9c <consumeCanMsg+0x24>
	{
		return printCanMsg(canMessageObject);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ffb8 	bl	8005c08 <printCanMsg>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	e000      	b.n	8005c9e <consumeCanMsg+0x26>
	}
	else
	{
		return USB_CAN_STATUS_SUCCESS;
 8005c9c:	2300      	movs	r3, #0
	}
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	1ffe8ee0 	.word	0x1ffe8ee0

08005cac <executeAnalyserCommand>:

USB_CAN_STATUS_t executeAnalyserCommand(XMC_CAN_NODE_t *const node_ptr, bool enable)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
	if ( enable == true)
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <executeAnalyserCommand+0x26>
	{
		XMC_CAN_NODE_SetInitBit(node_ptr);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ff10 	bl	8005ae4 <XMC_CAN_NODE_SetInitBit>
		XMC_CAN_NODE_SetAnalyzerMode(node_ptr);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ff2d 	bl	8005b24 <XMC_CAN_NODE_SetAnalyzerMode>
		XMC_CAN_NODE_ResetInitBit(node_ptr);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ff1a 	bl	8005b04 <XMC_CAN_NODE_ResetInitBit>
 8005cd0:	e008      	b.n	8005ce4 <executeAnalyserCommand+0x38>
	}
	else
	{
		XMC_CAN_NODE_SetInitBit(node_ptr);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff ff06 	bl	8005ae4 <XMC_CAN_NODE_SetInitBit>
		XMC_CAN_NODE_ReSetAnalyzerMode(node_ptr);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff33 	bl	8005b44 <XMC_CAN_NODE_ReSetAnalyzerMode>
		XMC_CAN_NODE_ResetInitBit(node_ptr);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff ff10 	bl	8005b04 <XMC_CAN_NODE_ResetInitBit>
	}
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <XMC_CAN_MO_Transmission_Ongoing>:

uint32_t XMC_CAN_MO_Transmission_Ongoing(const XMC_CAN_MO_t * const mo_ptr)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	uint32_t status = XMC_CAN_MO_GetStatus(mo_ptr);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff35 	bl	8005b64 <XMC_CAN_MO_GetStatus>
 8005cfa:	60f8      	str	r0, [r7, #12]

	return ((status) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	0a1b      	lsrs	r3, r3, #8
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <sendCanMsg>:

XMC_CAN_STATUS_t sendCanMsg(uint32_t can_identifier, uint8_t can_data_length,
		uint32_t can_data[2])
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	460b      	mov	r3, r1
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	72fb      	strb	r3, [r7, #11]
	XMC_CAN_MO_t* mo_ptr = CAN_NODE_0_LMO_02_Config.mo_ptr;
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <sendCanMsg+0x6c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
	XMC_CAN_STATUS_t result;

	/* Do not touch MO during transmission */
	if (XMC_CAN_MO_Transmission_Ongoing(mo_ptr) == 1U)
 8005d20:	6978      	ldr	r0, [r7, #20]
 8005d22:	f7ff ffe3 	bl	8005cec <XMC_CAN_MO_Transmission_Ongoing>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <sendCanMsg+0x24>
	{
		return XMC_CAN_STATUS_BUSY;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e01f      	b.n	8005d70 <sendCanMsg+0x64>
	}

	XMC_CAN_MO_SetIdentifier(mo_ptr, can_identifier);
 8005d30:	6978      	ldr	r0, [r7, #20]
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	f7fb fa7a 	bl	800122c <XMC_CAN_MO_SetIdentifier>

	mo_ptr->can_data[0] = can_data[0];
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	611a      	str	r2, [r3, #16]
	mo_ptr->can_data[1] = can_data[1];
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	615a      	str	r2, [r3, #20]
	mo_ptr->can_data_length = can_data_length;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	7afa      	ldrb	r2, [r7, #11]
 8005d4c:	731a      	strb	r2, [r3, #12]
	XMC_CAN_MO_UpdateData(mo_ptr);
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f7fb fb28 	bl	80013a4 <XMC_CAN_MO_UpdateData>

	XMC_GPIO_SetOutputHigh(LED_INFO);
 8005d54:	4809      	ldr	r0, [pc, #36]	; (8005d7c <sendCanMsg+0x70>)
 8005d56:	2109      	movs	r1, #9
 8005d58:	f7ff fe78 	bl	8005a4c <XMC_GPIO_SetOutputHigh>
	result = XMC_CAN_MO_Transmit(mo_ptr);
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7fb fb59 	bl	8001414 <XMC_CAN_MO_Transmit>
 8005d62:	4603      	mov	r3, r0
 8005d64:	74fb      	strb	r3, [r7, #19]
	XMC_GPIO_SetOutputLow(LED_INFO);
 8005d66:	4805      	ldr	r0, [pc, #20]	; (8005d7c <sendCanMsg+0x70>)
 8005d68:	2109      	movs	r1, #9
 8005d6a:	f7ff fe7f 	bl	8005a6c <XMC_GPIO_SetOutputLow>

	return result;
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08007290 	.word	0x08007290
 8005d7c:	48028500 	.word	0x48028500

08005d80 <executeSurgeCommand>:

USB_CAN_STATUS_t executeSurgeCommand()
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
	USB_CAN_STATUS_t result = USB_CAN_STATUS_SUCCESS;
 8005d86:	2300      	movs	r3, #0
 8005d88:	71fb      	strb	r3, [r7, #7]
	XMC_GPIO_SetOutputHigh(LED_INFO);
 8005d8a:	4811      	ldr	r0, [pc, #68]	; (8005dd0 <executeSurgeCommand+0x50>)
 8005d8c:	2109      	movs	r1, #9
 8005d8e:	f7ff fe5d 	bl	8005a4c <XMC_GPIO_SetOutputHigh>
	for (int messageObject = 3; messageObject < messageObjectsMax;
 8005d92:	2303      	movs	r3, #3
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	e00e      	b.n	8005db6 <executeSurgeCommand+0x36>
			messageObject++)
	{
		result |= CAN_NODE_MO_Transmit(messageObjects[messageObject]);
 8005d98:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <executeSurgeCommand+0x54>)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fd47 	bl	8005834 <CAN_NODE_MO_Transmit>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
USB_CAN_STATUS_t executeSurgeCommand()
{
	USB_CAN_STATUS_t result = USB_CAN_STATUS_SUCCESS;
	XMC_GPIO_SetOutputHigh(LED_INFO);
	for (int messageObject = 3; messageObject < messageObjectsMax;
			messageObject++)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	603b      	str	r3, [r7, #0]

USB_CAN_STATUS_t executeSurgeCommand()
{
	USB_CAN_STATUS_t result = USB_CAN_STATUS_SUCCESS;
	XMC_GPIO_SetOutputHigh(LED_INFO);
	for (int messageObject = 3; messageObject < messageObjectsMax;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b1f      	cmp	r3, #31
 8005dba:	dded      	ble.n	8005d98 <executeSurgeCommand+0x18>
			messageObject++)
	{
		result |= CAN_NODE_MO_Transmit(messageObjects[messageObject]);
	}
	XMC_GPIO_SetOutputLow(LED_INFO);
 8005dbc:	4804      	ldr	r0, [pc, #16]	; (8005dd0 <executeSurgeCommand+0x50>)
 8005dbe:	2109      	movs	r1, #9
 8005dc0:	f7ff fe54 	bl	8005a6c <XMC_GPIO_SetOutputLow>
	return result;
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	48028500 	.word	0x48028500
 8005dd4:	1ffe8c68 	.word	0x1ffe8c68

08005dd8 <executeTriggertSendCommand>:

USB_CAN_STATUS_t executeTriggertSendCommand(SendCommand_t *sendCommand)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	XMC_CAN_STATUS_t result;

	if (sendCommand == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <executeTriggertSendCommand+0x12>
	{
		return USB_CAN_STATUS_FAILURE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e045      	b.n	8005e76 <executeTriggertSendCommand+0x9e>
	}

	if (sendCommand->kind == SendCommand_Kind_CanMsg)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d128      	bne.n	8005e44 <executeTriggertSendCommand+0x6c>
	{
		result = sendCanMsg(sendCommand->can_identifier,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68d9      	ldr	r1, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7d1a      	ldrb	r2, [r3, #20]
				sendCommand->can_data_length, sendCommand->can_data.i);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3318      	adds	r3, #24
		return USB_CAN_STATUS_FAILURE;
	}

	if (sendCommand->kind == SendCommand_Kind_CanMsg)
	{
		result = sendCanMsg(sendCommand->can_identifier,
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7ff ff82 	bl	8005d0c <sendCanMsg>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
				sendCommand->can_data_length, sendCommand->can_data.i);

		if ((result == XMC_CAN_STATUS_SUCCESS))
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d111      	bne.n	8005e36 <executeTriggertSendCommand+0x5e>
		{
			if (sendCommand->count > 0)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd04      	ble.n	8005e24 <executeTriggertSendCommand+0x4c>
			{
				sendCommand->count--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	1e5a      	subs	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]
			}

			if (sendCommand->count == 0)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <executeTriggertSendCommand+0x5a>
			{
				sendCommand->condition = Condition_Passive;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
			}

			return USB_CAN_STATUS_SUCCESS;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e01f      	b.n	8005e76 <executeTriggertSendCommand+0x9e>
		}
		else if (result == XMC_CAN_STATUS_BUSY)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d101      	bne.n	8005e40 <executeTriggertSendCommand+0x68>
		{
			return USB_CAN_STATUS_SUCCESS;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e01a      	b.n	8005e76 <executeTriggertSendCommand+0x9e>
		}
		else
		{
			return USB_CAN_STATUS_FAILURE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e018      	b.n	8005e76 <executeTriggertSendCommand+0x9e>
		}
	}
	else if (sendCommand->kind == SendCommand_Kind_Surge)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d113      	bne.n	8005e74 <executeTriggertSendCommand+0x9c>
	{
		if (sendCommand->count > 0)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	dd04      	ble.n	8005e5e <executeTriggertSendCommand+0x86>
		{
			sendCommand->count--;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	611a      	str	r2, [r3, #16]
		}

		if (sendCommand->count == 0)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <executeTriggertSendCommand+0x94>
		{
			sendCommand->condition = Condition_Passive;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
		}

		return executeSurgeCommand();
 8005e6c:	f7ff ff88 	bl	8005d80 <executeSurgeCommand>
 8005e70:	4603      	mov	r3, r0
 8005e72:	e000      	b.n	8005e76 <executeTriggertSendCommand+0x9e>
	}
	else
	{
		return USB_CAN_STATUS_FAILURE;
 8005e74:	2301      	movs	r3, #1
	}
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop

08005e80 <executeSendCommand>:

USB_CAN_STATUS_t executeSendCommand(SendCommand_t *sendCommand)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	if (sendCommand == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <executeSendCommand+0x12>
	{
		return USB_CAN_STATUS_FAILURE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e009      	b.n	8005ea6 <executeSendCommand+0x26>
	}

	if (sendCommand->condition == Condition_Active)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d104      	bne.n	8005ea4 <executeSendCommand+0x24>
	{
		return executeTriggertSendCommand(sendCommand);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff9c 	bl	8005dd8 <executeTriggertSendCommand>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	e000      	b.n	8005ea6 <executeSendCommand+0x26>
	}

	return USB_CAN_STATUS_SUCCESS;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop

08005eb0 <processSendCommand>:

USB_CAN_STATUS_t processSendCommand(char* commandLine)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	uint32_t can_identifier = 0x400;
 8005eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t can_data_length = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	can_data_t can_data;
	trigger_t trigger;
	SendCommand_Kind_t kind = SendCommand_Kind_CanMsg;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	char *token;

	condition_t condition;
	int32_t count;

	if (commandLine == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <processSendCommand+0x24>
	{
		return USB_CAN_STATUS_FAILURE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0e7      	b.n	80060a4 <processSendCommand+0x1f4>
	}

	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	4974      	ldr	r1, [pc, #464]	; (80060ac <processSendCommand+0x1fc>)
 8005eda:	f000 fb62 	bl	80065a2 <strsep>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d049      	beq.n	8005f7c <processSendCommand+0xcc>
	{
		trigger.is_valid = false;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	757b      	strb	r3, [r7, #21]
		if (!strcmp(token, "active"))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	496f      	ldr	r1, [pc, #444]	; (80060b0 <processSendCommand+0x200>)
 8005ef2:	f000 fb44 	bl	800657e <strcmp>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <processSendCommand+0x54>
		{
			condition = Condition_Active;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005f02:	e03d      	b.n	8005f80 <processSendCommand+0xd0>
		}
		else if (!strcmp(token, "passive"))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4618      	mov	r0, r3
 8005f08:	496a      	ldr	r1, [pc, #424]	; (80060b4 <processSendCommand+0x204>)
 8005f0a:	f000 fb38 	bl	800657e <strcmp>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <processSendCommand+0x6c>
		{
			condition = Condition_Passive;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005f1a:	e031      	b.n	8005f80 <processSendCommand+0xd0>
		}
		else
		{
			char* innerToken = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
			if ((innerToken = strsep(&token, ":")) != NULL)
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	4618      	mov	r0, r3
 8005f26:	4964      	ldr	r1, [pc, #400]	; (80060b8 <processSendCommand+0x208>)
 8005f28:	f000 fb3b 	bl	80065a2 <strsep>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <processSendCommand+0xa8>
			{
				trigger.can_identifier = strtoul(innerToken, NULL, 0);
 8005f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f36:	2100      	movs	r1, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f000 fc73 	bl	8006824 <strtoul>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	613b      	str	r3, [r7, #16]
			}
			else
			{
				return USB_CAN_STATUS_FAILURE;
			}
			if ((innerToken = strsep(&token, ":")) != NULL)
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	4618      	mov	r0, r3
 8005f48:	495b      	ldr	r1, [pc, #364]	; (80060b8 <processSendCommand+0x208>)
 8005f4a:	f000 fb2a 	bl	80065a2 <strsep>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <processSendCommand+0xc8>
 8005f56:	e001      	b.n	8005f5c <processSendCommand+0xac>
			{
				trigger.can_identifier = strtoul(innerToken, NULL, 0);
			}
			else
			{
				return USB_CAN_STATUS_FAILURE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0a3      	b.n	80060a4 <processSendCommand+0x1f4>
			}
			if ((innerToken = strsep(&token, ":")) != NULL)
			{
				trigger.can_bit = (uint8_t) strtoul(innerToken, NULL, 0);
 8005f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f5e:	2100      	movs	r1, #0
 8005f60:	2200      	movs	r2, #0
 8005f62:	f000 fc5f 	bl	8006824 <strtoul>
 8005f66:	4603      	mov	r3, r0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	753b      	strb	r3, [r7, #20]
			}
			else
			{
				return USB_CAN_STATUS_FAILURE;
			}
			condition = Condition_Passive;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			trigger.is_valid = true;
 8005f72:	2301      	movs	r3, #1
 8005f74:	757b      	strb	r3, [r7, #21]
 8005f76:	e003      	b.n	8005f80 <processSendCommand+0xd0>
			{
				trigger.can_bit = (uint8_t) strtoul(innerToken, NULL, 0);
			}
			else
			{
				return USB_CAN_STATUS_FAILURE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e093      	b.n	80060a4 <processSendCommand+0x1f4>

		}
	}
	else
	{
		return USB_CAN_STATUS_FAILURE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e091      	b.n	80060a4 <processSendCommand+0x1f4>
	}

	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	4949      	ldr	r1, [pc, #292]	; (80060ac <processSendCommand+0x1fc>)
 8005f86:	f000 fb0c 	bl	80065a2 <strsep>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d030      	beq.n	8005ff6 <processSendCommand+0x146>
	{
		if (!strcmp(token, "surge"))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4618      	mov	r0, r3
 8005f98:	4948      	ldr	r1, [pc, #288]	; (80060bc <processSendCommand+0x20c>)
 8005f9a:	f000 faf0 	bl	800657e <strcmp>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <processSendCommand+0x122>
		{
			SendCommand.condition = Condition_Passive;
 8005fa4:	4b46      	ldr	r3, [pc, #280]	; (80060c0 <processSendCommand+0x210>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
			SendCommand.trigger = trigger;
 8005faa:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <processSendCommand+0x210>)
 8005fac:	3304      	adds	r3, #4
 8005fae:	f107 0210 	add.w	r2, r7, #16
 8005fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fb6:	e883 0003 	stmia.w	r3, {r0, r1}
			SendCommand.kind = SendCommand_Kind_Surge;
 8005fba:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <processSendCommand+0x210>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	705a      	strb	r2, [r3, #1]
			SendCommand.count = 1;
 8005fc0:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <processSendCommand+0x210>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	611a      	str	r2, [r3, #16]
			SendCommand.condition = condition;
 8005fc6:	4a3e      	ldr	r2, [pc, #248]	; (80060c0 <processSendCommand+0x210>)
 8005fc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005fcc:	7013      	strb	r3, [r2, #0]
			return USB_CAN_STATUS_SUCCESS;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e068      	b.n	80060a4 <processSendCommand+0x1f4>
		}
		else
		{
			count = strtol(token, NULL, 0);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f000 fb99 	bl	8006710 <strtol>
 8005fde:	6238      	str	r0, [r7, #32]
	else
	{
		return USB_CAN_STATUS_FAILURE;
	}

	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	4931      	ldr	r1, [pc, #196]	; (80060ac <processSendCommand+0x1fc>)
 8005fe6:	f000 fadc 	bl	80065a2 <strsep>
 8005fea:	4603      	mov	r3, r0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00c      	beq.n	800600e <processSendCommand+0x15e>
 8005ff4:	e001      	b.n	8005ffa <processSendCommand+0x14a>
			count = strtol(token, NULL, 0);
		}
	}
	else
	{
		return USB_CAN_STATUS_FAILURE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e054      	b.n	80060a4 <processSendCommand+0x1f4>
	}

	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
	{
		can_identifier = strtoul(token, NULL, 0);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	2100      	movs	r1, #0
 8006000:	2200      	movs	r2, #0
 8006002:	f000 fc0f 	bl	8006824 <strtoul>
 8006006:	62f8      	str	r0, [r7, #44]	; 0x2c
	else
	{
		return USB_CAN_STATUS_FAILURE;
	}

	for (int i = 0; i < 8; i++)
 8006008:	2300      	movs	r3, #0
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
 800600c:	e021      	b.n	8006052 <processSendCommand+0x1a2>
	{
		can_identifier = strtoul(token, NULL, 0);
	}
	else
	{
		return USB_CAN_STATUS_FAILURE;
 800600e:	2301      	movs	r3, #1
 8006010:	e048      	b.n	80060a4 <processSendCommand+0x1f4>
	}

	for (int i = 0; i < 8; i++)
	{
		if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	4618      	mov	r0, r3
 8006016:	4925      	ldr	r1, [pc, #148]	; (80060ac <processSendCommand+0x1fc>)
 8006018:	f000 fac3 	bl	80065a2 <strsep>
 800601c:	4603      	mov	r3, r0
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d012      	beq.n	800604c <processSendCommand+0x19c>
		{
			can_data.b[i] = strtoul(token, NULL, 0);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4618      	mov	r0, r3
 800602a:	2100      	movs	r1, #0
 800602c:	2200      	movs	r2, #0
 800602e:	f000 fbf9 	bl	8006824 <strtoul>
 8006032:	4603      	mov	r3, r0
 8006034:	b2d9      	uxtb	r1, r3
 8006036:	f107 0218 	add.w	r2, r7, #24
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	4413      	add	r3, r2
 800603e:	460a      	mov	r2, r1
 8006040:	701a      	strb	r2, [r3, #0]
			can_data_length++;
 8006042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006046:	3301      	adds	r3, #1
 8006048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	else
	{
		return USB_CAN_STATUS_FAILURE;
	}

	for (int i = 0; i < 8; i++)
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3301      	adds	r3, #1
 8006050:	633b      	str	r3, [r7, #48]	; 0x30
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	2b07      	cmp	r3, #7
 8006056:	dddc      	ble.n	8006012 <processSendCommand+0x162>
			can_data.b[i] = strtoul(token, NULL, 0);
			can_data_length++;
		}
	}

	SendCommand.condition = Condition_Passive;
 8006058:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <processSendCommand+0x210>)
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
	SendCommand.trigger = trigger;
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <processSendCommand+0x210>)
 8006060:	3304      	adds	r3, #4
 8006062:	f107 0210 	add.w	r2, r7, #16
 8006066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800606a:	e883 0003 	stmia.w	r3, {r0, r1}
	SendCommand.kind = kind;
 800606e:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <processSendCommand+0x210>)
 8006070:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006074:	7053      	strb	r3, [r2, #1]
	SendCommand.count = count;
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <processSendCommand+0x210>)
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	6113      	str	r3, [r2, #16]
	SendCommand.can_identifier = can_identifier;
 800607c:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <processSendCommand+0x210>)
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	60d3      	str	r3, [r2, #12]
	SendCommand.can_data_length = can_data_length;
 8006082:	4a0f      	ldr	r2, [pc, #60]	; (80060c0 <processSendCommand+0x210>)
 8006084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006088:	7513      	strb	r3, [r2, #20]
	SendCommand.can_data = can_data;
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <processSendCommand+0x210>)
 800608c:	3318      	adds	r3, #24
 800608e:	f107 0218 	add.w	r2, r7, #24
 8006092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006096:	e883 0003 	stmia.w	r3, {r0, r1}
	SendCommand.condition = condition;
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <processSendCommand+0x210>)
 800609c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060a0:	7013      	strb	r3, [r2, #0]

	return USB_CAN_STATUS_SUCCESS;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3738      	adds	r7, #56	; 0x38
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	080074ac 	.word	0x080074ac
 80060b0:	080074d0 	.word	0x080074d0
 80060b4:	080074d8 	.word	0x080074d8
 80060b8:	080074e0 	.word	0x080074e0
 80060bc:	080074e4 	.word	0x080074e4
 80060c0:	1ffe8ce8 	.word	0x1ffe8ce8

080060c4 <processSurgeCommand>:

USB_CAN_STATUS_t processSurgeCommand()
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
	return executeSurgeCommand();
 80060c8:	f7ff fe5a 	bl	8005d80 <executeSurgeCommand>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <processEchoCommand>:

USB_CAN_STATUS_t processEchoCommand(char* commandLine)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	if (!strcmp(commandLine, "on"))
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4909      	ldr	r1, [pc, #36]	; (8006104 <processEchoCommand+0x30>)
 80060e0:	f000 fa4d 	bl	800657e <strcmp>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <processEchoCommand+0x1e>
	{
		echoEnabled = Echo_On;
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <processEchoCommand+0x34>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <processEchoCommand+0x24>
	}
	else
	{
		echoEnabled = Echo_Off;
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <processEchoCommand+0x34>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
	}

	return USB_CAN_STATUS_SUCCESS;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	080074ec 	.word	0x080074ec
 8006108:	1ffe8ee0 	.word	0x1ffe8ee0

0800610c <processAnalyzerCommand>:


USB_CAN_STATUS_t processAnalyzerCommand(char* commandLine)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	XMC_CAN_NODE_t *const node_ptr = CAN_NODE_0.node_ptr;
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <processAnalyzerCommand+0x38>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60bb      	str	r3, [r7, #8]
	bool enable = false;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]

	if (!strcmp(commandLine, "on"))
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4909      	ldr	r1, [pc, #36]	; (8006148 <processAnalyzerCommand+0x3c>)
 8006122:	f000 fa2c 	bl	800657e <strcmp>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <processAnalyzerCommand+0x24>
	{
		enable = true;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
	}

	return executeAnalyserCommand(node_ptr, enable);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	68b8      	ldr	r0, [r7, #8]
 8006134:	4619      	mov	r1, r3
 8006136:	f7ff fdb9 	bl	8005cac <executeAnalyserCommand>
 800613a:	4603      	mov	r3, r0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	08007404 	.word	0x08007404
 8006148:	080074ec 	.word	0x080074ec

0800614c <processCommand>:

USB_CAN_STATUS_t processCommand(int8_t usb_rx_buffer[])
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	USB_CAN_STATUS_t result = USB_CAN_STATUS_FAILURE;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
	char* commandLine = (char*) usb_rx_buffer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60bb      	str	r3, [r7, #8]
	const char* cmd = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
	char *token;

	if (usb_rx_buffer == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <processCommand+0x1e>
	{
		return USB_CAN_STATUS_FAILURE;
 8006166:	2301      	movs	r3, #1
 8006168:	e050      	b.n	800620c <processCommand+0xc0>
	}

	if ((token = strsep(&commandLine, CommandSeperator)) != NULL)
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4618      	mov	r0, r3
 8006170:	4928      	ldr	r1, [pc, #160]	; (8006214 <processCommand+0xc8>)
 8006172:	f000 fa16 	bl	80065a2 <strsep>
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d045      	beq.n	800620a <processCommand+0xbe>
	{
		cmd = token;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	613b      	str	r3, [r7, #16]
		if (!strcmp(cmd, "Send"))
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	4924      	ldr	r1, [pc, #144]	; (8006218 <processCommand+0xcc>)
 8006186:	f000 f9fa 	bl	800657e <strcmp>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <processCommand+0x52>
		{
			result = processSendCommand(commandLine);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fe8c 	bl	8005eb0 <processSendCommand>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
 800619c:	e02b      	b.n	80061f6 <processCommand+0xaa>
		}
		else if (!strcmp(cmd, "Echo"))
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	491e      	ldr	r1, [pc, #120]	; (800621c <processCommand+0xd0>)
 80061a2:	f000 f9ec 	bl	800657e <strcmp>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <processCommand+0x6e>
		{
			result = processEchoCommand(commandLine);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff90 	bl	80060d4 <processEchoCommand>
 80061b4:	4603      	mov	r3, r0
 80061b6:	75fb      	strb	r3, [r7, #23]
 80061b8:	e01d      	b.n	80061f6 <processCommand+0xaa>
		}
		else if (!strcmp(cmd, "Surge"))
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	4918      	ldr	r1, [pc, #96]	; (8006220 <processCommand+0xd4>)
 80061be:	f000 f9de 	bl	800657e <strcmp>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <processCommand+0x86>
		{
			result = processSurgeCommand();
 80061c8:	f7ff ff7c 	bl	80060c4 <processSurgeCommand>
 80061cc:	4603      	mov	r3, r0
 80061ce:	75fb      	strb	r3, [r7, #23]
 80061d0:	e011      	b.n	80061f6 <processCommand+0xaa>
		}
		else if (!strcmp(cmd, "Analyzer"))
 80061d2:	6938      	ldr	r0, [r7, #16]
 80061d4:	4913      	ldr	r1, [pc, #76]	; (8006224 <processCommand+0xd8>)
 80061d6:	f000 f9d2 	bl	800657e <strcmp>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <processCommand+0xa2>
		{
			result = processAnalyzerCommand(commandLine);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff92 	bl	800610c <processAnalyzerCommand>
 80061e8:	4603      	mov	r3, r0
 80061ea:	75fb      	strb	r3, [r7, #23]
 80061ec:	e003      	b.n	80061f6 <processCommand+0xaa>
		}
		else
		{
			USB_CAN_printf("\r\nUnknown command '%s'\r\n", cmd);
 80061ee:	480e      	ldr	r0, [pc, #56]	; (8006228 <processCommand+0xdc>)
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	f7ff fce5 	bl	8005bc0 <USB_CAN_printf>
		}

		if (result == USB_CAN_STATUS_SUCCESS)
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <processCommand+0xb8>
		{
			USB_CAN_printf("\r\nResult: Success\r\n");
 80061fc:	480b      	ldr	r0, [pc, #44]	; (800622c <processCommand+0xe0>)
 80061fe:	f7ff fcdf 	bl	8005bc0 <USB_CAN_printf>
 8006202:	e002      	b.n	800620a <processCommand+0xbe>
		}
		else
		{
			USB_CAN_printf("\r\nResult: Failure\r\n");
 8006204:	480a      	ldr	r0, [pc, #40]	; (8006230 <processCommand+0xe4>)
 8006206:	f7ff fcdb 	bl	8005bc0 <USB_CAN_printf>
		}
	}
	return result;
 800620a:	7dfb      	ldrb	r3, [r7, #23]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	080074ac 	.word	0x080074ac
 8006218:	080074f0 	.word	0x080074f0
 800621c:	080074f8 	.word	0x080074f8
 8006220:	08007500 	.word	0x08007500
 8006224:	08007508 	.word	0x08007508
 8006228:	08007514 	.word	0x08007514
 800622c:	08007530 	.word	0x08007530
 8006230:	08007544 	.word	0x08007544

08006234 <USBD_VCOM_SendPromt>:

USBD_VCOM_STATUS_t USBD_VCOM_SendPromt(int8_t usb_rx_buffer[])
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	return USB_CAN_printf("\r> %s", usb_rx_buffer);
 800623c:	4804      	ldr	r0, [pc, #16]	; (8006250 <USBD_VCOM_SendPromt+0x1c>)
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	f7ff fcbe 	bl	8005bc0 <USB_CAN_printf>
 8006244:	4603      	mov	r3, r0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	08007558 	.word	0x08007558

08006254 <processTrigger>:

USBD_VCOM_STATUS_t processTrigger(XMC_CAN_MO_t* message,
		SendCommand_t *sendCommand)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	if (message == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <processTrigger+0x14>
	{
		return USB_CAN_STATUS_FAILURE;
 8006264:	2301      	movs	r3, #1
 8006266:	e03b      	b.n	80062e0 <processTrigger+0x8c>
	}

	if (sendCommand == NULL)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <processTrigger+0x1e>
	{
		return USB_CAN_STATUS_FAILURE;
 800626e:	2301      	movs	r3, #1
 8006270:	e036      	b.n	80062e0 <processTrigger+0x8c>
	}

	if (sendCommand->trigger.is_valid)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	7a5b      	ldrb	r3, [r3, #9]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d031      	beq.n	80062de <processTrigger+0x8a>
	{
		if (sendCommand->trigger.can_identifier == message->can_identifier)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6852      	ldr	r2, [r2, #4]
 8006282:	f3c2 021c 	ubfx	r2, r2, #0, #29
 8006286:	4293      	cmp	r3, r2
 8006288:	d129      	bne.n	80062de <processTrigger+0x8a>
		{
			int bitNumber = sendCommand->trigger.can_bit % 8;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	7a1b      	ldrb	r3, [r3, #8]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
			int byteNumber = (sendCommand->trigger.can_bit % 63) / 8;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	7a1a      	ldrb	r2, [r3, #8]
 8006298:	4b14      	ldr	r3, [pc, #80]	; (80062ec <processTrigger+0x98>)
 800629a:	fba2 0103 	umull	r0, r1, r2, r3
 800629e:	1a53      	subs	r3, r2, r1
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	440b      	add	r3, r1
 80062a4:	0959      	lsrs	r1, r3, #5
 80062a6:	460b      	mov	r3, r1
 80062a8:	019b      	lsls	r3, r3, #6
 80062aa:	1a5b      	subs	r3, r3, r1
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	60bb      	str	r3, [r7, #8]
			if ((message->can_data_byte[byteNumber] >> bitNumber) & 0x1)
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4413      	add	r3, r2
 80062bc:	3310      	adds	r3, #16
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	fa42 f303 	asr.w	r3, r2, r3
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <processTrigger+0x84>
			{
				sendCommand->condition = Condition_Active;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e002      	b.n	80062de <processTrigger+0x8a>
			}
			else
			{
				sendCommand->condition = Condition_Passive;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return USB_CAN_STATUS_SUCCESS;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	04104105 	.word	0x04104105

080062f0 <main>:

int main(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
	const uint32_t Button_NotPressed = 1;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
	uint32_t Button1OldValue = Button_NotPressed;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	61fb      	str	r3, [r7, #28]
	initialise_monitor_handles();
#endif

	info("Initializing ...");

	assert(DAVE_Init() != DAVE_STATUS_FAILURE);
 80062fe:	f7ff fb75 	bl	80059ec <DAVE_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <main+0x1c>
 8006308:	f7ff fc3a 	bl	8005b80 <_error>

	// Set LED pins to push-pull
	XMC_GPIO_SetMode(LED_INFO, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 800630c:	485f      	ldr	r0, [pc, #380]	; (800648c <main+0x19c>)
 800630e:	2109      	movs	r1, #9
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	f7fb f999 	bl	8001648 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(LED_ERROR, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8006316:	485d      	ldr	r0, [pc, #372]	; (800648c <main+0x19c>)
 8006318:	2108      	movs	r1, #8
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	f7fb f994 	bl	8001648 <XMC_GPIO_SetMode>
	XMC_GPIO_EnableDigitalInput(BUTTON1);
 8006320:	485b      	ldr	r0, [pc, #364]	; (8006490 <main+0x1a0>)
 8006322:	210d      	movs	r1, #13
 8006324:	f7ff fbc8 	bl	8005ab8 <XMC_GPIO_EnableDigitalInput>

	// Switch off LEDs
	XMC_GPIO_SetOutputLow(LED_INFO);
 8006328:	4858      	ldr	r0, [pc, #352]	; (800648c <main+0x19c>)
 800632a:	2109      	movs	r1, #9
 800632c:	f7ff fb9e 	bl	8005a6c <XMC_GPIO_SetOutputLow>
	XMC_GPIO_SetOutputLow(LED_ERROR);
 8006330:	4856      	ldr	r0, [pc, #344]	; (800648c <main+0x19c>)
 8006332:	2108      	movs	r1, #8
 8006334:	f7ff fb9a 	bl	8005a6c <XMC_GPIO_SetOutputLow>

	assert(USBD_VCOM_Connect() == USBD_VCOM_STATUS_SUCCESS)
 8006338:	f7fd fcaa 	bl	8003c90 <USBD_VCOM_Connect>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <main+0x56>
 8006342:	f7ff fc1d 	bl	8005b80 <_error>

	XMC_GPIO_SetOutputHigh(LED_ERROR);
 8006346:	4851      	ldr	r0, [pc, #324]	; (800648c <main+0x19c>)
 8006348:	2108      	movs	r1, #8
 800634a:	f7ff fb7f 	bl	8005a4c <XMC_GPIO_SetOutputHigh>
	while (!USBD_VCOM_IsEnumDone())
 800634e:	bf00      	nop
 8006350:	f7fd fb56 	bl	8003a00 <USBD_VCOM_IsEnumDone>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0fa      	beq.n	8006350 <main+0x60>
		;
	XMC_GPIO_SetOutputLow(LED_ERROR);
 800635a:	484c      	ldr	r0, [pc, #304]	; (800648c <main+0x19c>)
 800635c:	2108      	movs	r1, #8
 800635e:	f7ff fb85 	bl	8005a6c <XMC_GPIO_SetOutputLow>

	info("Initializing ... done.");

	USBD_VCOM_SendPromt(usb_rx_buffer);
 8006362:	484c      	ldr	r0, [pc, #304]	; (8006494 <main+0x1a4>)
 8006364:	f7ff ff66 	bl	8006234 <USBD_VCOM_SendPromt>

	int usb_rx_buffer_idx = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
	while (1U)
	{
		/* consume only last received message, discard other received messages */
		if (ReceivedMsg != NULL)
 800636c:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <main+0x1a8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <main+0x96>
		{
			XMC_CAN_MO_t* tmp = ReceivedMsg;
 8006374:	4b48      	ldr	r3, [pc, #288]	; (8006498 <main+0x1a8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	613b      	str	r3, [r7, #16]
			ReceivedMsg = NULL;
 800637a:	4b47      	ldr	r3, [pc, #284]	; (8006498 <main+0x1a8>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

			consumeCanMsg(tmp);
 8006380:	6938      	ldr	r0, [r7, #16]
 8006382:	f7ff fc79 	bl	8005c78 <consumeCanMsg>
		}

		if (executeSendCommand(&SendCommand) != USB_CAN_STATUS_SUCCESS)
 8006386:	4845      	ldr	r0, [pc, #276]	; (800649c <main+0x1ac>)
 8006388:	f7ff fd7a 	bl	8005e80 <executeSendCommand>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <main+0xa8>
		{
			USB_CAN_printf("\r\nResult: Failure sending CAN\r\n");
 8006392:	4843      	ldr	r0, [pc, #268]	; (80064a0 <main+0x1b0>)
 8006394:	f7ff fc14 	bl	8005bc0 <USB_CAN_printf>
		}

		{
			uint32_t Button1Value = XMC_GPIO_GetInput(BUTTON1);
 8006398:	483d      	ldr	r0, [pc, #244]	; (8006490 <main+0x1a0>)
 800639a:	210d      	movs	r1, #13
 800639c:	f7ff fb78 	bl	8005a90 <XMC_GPIO_GetInput>
 80063a0:	60f8      	str	r0, [r7, #12]

			/* react on edge */
			if ((Button1Value != Button_NotPressed)
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d014      	beq.n	80063d4 <main+0xe4>
					&& (Button1Value != Button1OldValue))
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d010      	beq.n	80063d4 <main+0xe4>

			{
				if (SendCommand.condition != Condition_Active)
 80063b2:	4b3a      	ldr	r3, [pc, #232]	; (800649c <main+0x1ac>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d006      	beq.n	80063c8 <main+0xd8>
				{
					SendCommand.condition = Condition_Active;
 80063ba:	4b38      	ldr	r3, [pc, #224]	; (800649c <main+0x1ac>)
 80063bc:	2201      	movs	r2, #1
 80063be:	701a      	strb	r2, [r3, #0]
					USB_CAN_printf("\r\nActivation by button\r\n");
 80063c0:	4838      	ldr	r0, [pc, #224]	; (80064a4 <main+0x1b4>)
 80063c2:	f7ff fbfd 	bl	8005bc0 <USB_CAN_printf>
 80063c6:	e005      	b.n	80063d4 <main+0xe4>
				}
				else
				{
					SendCommand.condition = Condition_Passive;
 80063c8:	4b34      	ldr	r3, [pc, #208]	; (800649c <main+0x1ac>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
					USB_CAN_printf("\r\nDeactivation by button\r\n");
 80063ce:	4836      	ldr	r0, [pc, #216]	; (80064a8 <main+0x1b8>)
 80063d0:	f7ff fbf6 	bl	8005bc0 <USB_CAN_printf>
				}
			}
			Button1OldValue = Button1Value;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	61fb      	str	r3, [r7, #28]
		}

		{
			uint16_t bytesReceived = USBD_VCOM_BytesReceived();
 80063d8:	f7fd fb6e 	bl	8003ab8 <USBD_VCOM_BytesReceived>
 80063dc:	4603      	mov	r3, r0
 80063de:	817b      	strh	r3, [r7, #10]

			if (bytesReceived)
 80063e0:	897b      	ldrh	r3, [r7, #10]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d04a      	beq.n	800647c <main+0x18c>
			{
				USBD_VCOM_STATUS_t status;
				int8_t data_byte = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	71fb      	strb	r3, [r7, #7]
				const int8_t newLine = '\r';
 80063ea:	230d      	movs	r3, #13
 80063ec:	727b      	strb	r3, [r7, #9]
				status = USBD_VCOM_ReceiveByte(&data_byte);
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd fb3d 	bl	8003a70 <USBD_VCOM_ReceiveByte>
 80063f6:	4603      	mov	r3, r0
 80063f8:	723b      	strb	r3, [r7, #8]
				if (status == USBD_VCOM_STATUS_SUCCESS)
 80063fa:	7a3b      	ldrb	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d13d      	bne.n	800647c <main+0x18c>
				{
					if (data_byte == newLine)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	f997 2009 	ldrsb.w	r2, [r7, #9]
 8006406:	b25b      	sxtb	r3, r3
 8006408:	429a      	cmp	r2, r3
 800640a:	d10b      	bne.n	8006424 <main+0x134>
					{
						processCommand(usb_rx_buffer);
 800640c:	4821      	ldr	r0, [pc, #132]	; (8006494 <main+0x1a4>)
 800640e:	f7ff fe9d 	bl	800614c <processCommand>

						usb_rx_buffer_idx = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
						memset(usb_rx_buffer, 0, USBD_VCOM_BUFFSIZE);
 8006416:	481f      	ldr	r0, [pc, #124]	; (8006494 <main+0x1a4>)
 8006418:	2100      	movs	r1, #0
 800641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641e:	f000 f8a6 	bl	800656e <memset>
 8006422:	e028      	b.n	8006476 <main+0x186>
					}
					else if (data_byte == '\177')
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	b25b      	sxtb	r3, r3
 8006428:	2b7f      	cmp	r3, #127	; 0x7f
 800642a:	d113      	bne.n	8006454 <main+0x164>
					{
						if (usb_rx_buffer_idx > 0)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	dd21      	ble.n	8006476 <main+0x186>
						{
							usb_rx_buffer_idx--;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3b01      	subs	r3, #1
 8006436:	61bb      	str	r3, [r7, #24]
							usb_rx_buffer[usb_rx_buffer_idx] = ' ';
 8006438:	4a16      	ldr	r2, [pc, #88]	; (8006494 <main+0x1a4>)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	2220      	movs	r2, #32
 8006440:	701a      	strb	r2, [r3, #0]
							USBD_VCOM_SendPromt(usb_rx_buffer);
 8006442:	4814      	ldr	r0, [pc, #80]	; (8006494 <main+0x1a4>)
 8006444:	f7ff fef6 	bl	8006234 <USBD_VCOM_SendPromt>
							usb_rx_buffer[usb_rx_buffer_idx] = 0;
 8006448:	4a12      	ldr	r2, [pc, #72]	; (8006494 <main+0x1a4>)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	4413      	add	r3, r2
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e010      	b.n	8006476 <main+0x186>
						}
					}
					else if (is_printable(data_byte)
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	b25b      	sxtb	r3, r3
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fb9b 	bl	8005b94 <is_printable>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <main+0x186>
							&& (usb_rx_buffer_idx < (USBD_VCOM_BUFFSIZE - 1)))
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2bfe      	cmp	r3, #254	; 0xfe
 8006468:	dc05      	bgt.n	8006476 <main+0x186>
					{
						usb_rx_buffer[usb_rx_buffer_idx++] = data_byte;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	61ba      	str	r2, [r7, #24]
 8006470:	79f9      	ldrb	r1, [r7, #7]
 8006472:	4a08      	ldr	r2, [pc, #32]	; (8006494 <main+0x1a4>)
 8006474:	54d1      	strb	r1, [r2, r3]
					}
					USBD_VCOM_SendPromt(usb_rx_buffer);
 8006476:	4807      	ldr	r0, [pc, #28]	; (8006494 <main+0x1a4>)
 8006478:	f7ff fedc 	bl	8006234 <USBD_VCOM_SendPromt>
				}
			}

			/* Do not spend time in USBTask during flooding the CAN */
			if (SendCommand.condition != Condition_Active)
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <main+0x1ac>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d002      	beq.n	800648a <main+0x19a>
			{
				CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8006484:	4809      	ldr	r0, [pc, #36]	; (80064ac <main+0x1bc>)
 8006486:	f7fd f969 	bl	800375c <CDC_Device_USBTask>
			}
		}
	}
 800648a:	e76f      	b.n	800636c <main+0x7c>
 800648c:	48028500 	.word	0x48028500
 8006490:	48028f00 	.word	0x48028f00
 8006494:	1ffe8ddc 	.word	0x1ffe8ddc
 8006498:	1ffe8edc 	.word	0x1ffe8edc
 800649c:	1ffe8ce8 	.word	0x1ffe8ce8
 80064a0:	08007560 	.word	0x08007560
 80064a4:	08007580 	.word	0x08007580
 80064a8:	0800759c 	.word	0x0800759c
 80064ac:	1ffe91bc 	.word	0x1ffe91bc

080064b0 <CAN0_1_IRQHandler>:

	error("never reach here");
}

void CanRxInterruptHandler(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
	/* Check for Node error */
	if (CAN_NODE_GetStatus(&CAN_NODE_0) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
 80064b4:	480e      	ldr	r0, [pc, #56]	; (80064f0 <CAN0_1_IRQHandler+0x40>)
 80064b6:	f7ff f9f1 	bl	800589c <CAN_NODE_GetStatus>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d114      	bne.n	80064ee <CAN0_1_IRQHandler+0x3e>
	{
		XMC_DEBUG("Something failed\n");
	}
	else if (CAN_NODE_MO_GetStatus(&CAN_NODE_0_LMO_01_Config)
 80064c4:	480b      	ldr	r0, [pc, #44]	; (80064f4 <CAN0_1_IRQHandler+0x44>)
 80064c6:	f7ff f9d9 	bl	800587c <CAN_NODE_MO_GetStatus>
 80064ca:	4603      	mov	r3, r0
			& XMC_CAN_MO_STATUS_RX_PENDING)
 80064cc:	f003 0301 	and.w	r3, r3, #1
	/* Check for Node error */
	if (CAN_NODE_GetStatus(&CAN_NODE_0) & XMC_CAN_NODE_STATUS_LAST_ERROR_CODE)
	{
		XMC_DEBUG("Something failed\n");
	}
	else if (CAN_NODE_MO_GetStatus(&CAN_NODE_0_LMO_01_Config)
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00c      	beq.n	80064ee <CAN0_1_IRQHandler+0x3e>
			& XMC_CAN_MO_STATUS_RX_PENDING)
	{
		/* Read the received Message object and stores in Request_Node_LMO_02_Config*/
		CAN_NODE_MO_Receive(&CAN_NODE_0_LMO_01_Config);
 80064d4:	4807      	ldr	r0, [pc, #28]	; (80064f4 <CAN0_1_IRQHandler+0x44>)
 80064d6:	f7ff f9bf 	bl	8005858 <CAN_NODE_MO_Receive>
		ReceivedMsg = CAN_NODE_0_LMO_01_Config.mo_ptr;
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <CAN0_1_IRQHandler+0x44>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <CAN0_1_IRQHandler+0x48>)
 80064e0:	6013      	str	r3, [r2, #0]
		processTrigger(CAN_NODE_0_LMO_01_Config.mo_ptr, &SendCommand);
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <CAN0_1_IRQHandler+0x44>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	4904      	ldr	r1, [pc, #16]	; (80064fc <CAN0_1_IRQHandler+0x4c>)
 80064ea:	f7ff feb3 	bl	8006254 <processTrigger>
	}
}
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	08007404 	.word	0x08007404
 80064f4:	08007284 	.word	0x08007284
 80064f8:	1ffe8edc 	.word	0x1ffe8edc
 80064fc:	1ffe8ce8 	.word	0x1ffe8ce8

08006500 <__errno>:
 8006500:	4b01      	ldr	r3, [pc, #4]	; (8006508 <__errno+0x8>)
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	1ffe8d68 	.word	0x1ffe8d68

0800650c <__libc_init_array>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <__libc_init_array+0x3c>)
 8006510:	4c0e      	ldr	r4, [pc, #56]	; (800654c <__libc_init_array+0x40>)
 8006512:	1ae4      	subs	r4, r4, r3
 8006514:	10a4      	asrs	r4, r4, #2
 8006516:	2500      	movs	r5, #0
 8006518:	461e      	mov	r6, r3
 800651a:	42a5      	cmp	r5, r4
 800651c:	d004      	beq.n	8006528 <__libc_init_array+0x1c>
 800651e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006522:	4798      	blx	r3
 8006524:	3501      	adds	r5, #1
 8006526:	e7f8      	b.n	800651a <__libc_init_array+0xe>
 8006528:	f7fc ff04 	bl	8003334 <_init>
 800652c:	4c08      	ldr	r4, [pc, #32]	; (8006550 <__libc_init_array+0x44>)
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <__libc_init_array+0x48>)
 8006530:	1ae4      	subs	r4, r4, r3
 8006532:	10a4      	asrs	r4, r4, #2
 8006534:	2500      	movs	r5, #0
 8006536:	461e      	mov	r6, r3
 8006538:	42a5      	cmp	r5, r4
 800653a:	d004      	beq.n	8006546 <__libc_init_array+0x3a>
 800653c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006540:	4798      	blx	r3
 8006542:	3501      	adds	r5, #1
 8006544:	e7f8      	b.n	8006538 <__libc_init_array+0x2c>
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	1ffe8d70 	.word	0x1ffe8d70
 800654c:	1ffe8d70 	.word	0x1ffe8d70
 8006550:	1ffe8d70 	.word	0x1ffe8d70
 8006554:	1ffe8d70 	.word	0x1ffe8d70

08006558 <memcpy>:
 8006558:	b510      	push	{r4, lr}
 800655a:	1e43      	subs	r3, r0, #1
 800655c:	440a      	add	r2, r1
 800655e:	4291      	cmp	r1, r2
 8006560:	d004      	beq.n	800656c <memcpy+0x14>
 8006562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800656a:	e7f8      	b.n	800655e <memcpy+0x6>
 800656c:	bd10      	pop	{r4, pc}

0800656e <memset>:
 800656e:	4402      	add	r2, r0
 8006570:	4603      	mov	r3, r0
 8006572:	4293      	cmp	r3, r2
 8006574:	d002      	beq.n	800657c <memset+0xe>
 8006576:	f803 1b01 	strb.w	r1, [r3], #1
 800657a:	e7fa      	b.n	8006572 <memset+0x4>
 800657c:	4770      	bx	lr

0800657e <strcmp>:
 800657e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006586:	2a01      	cmp	r2, #1
 8006588:	bf28      	it	cs
 800658a:	429a      	cmpcs	r2, r3
 800658c:	d0f7      	beq.n	800657e <strcmp>
 800658e:	1ad0      	subs	r0, r2, r3
 8006590:	4770      	bx	lr

08006592 <strlen>:
 8006592:	4603      	mov	r3, r0
 8006594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006598:	2a00      	cmp	r2, #0
 800659a:	d1fb      	bne.n	8006594 <strlen+0x2>
 800659c:	1a18      	subs	r0, r3, r0
 800659e:	3801      	subs	r0, #1
 80065a0:	4770      	bx	lr

080065a2 <strsep>:
 80065a2:	4602      	mov	r2, r0
 80065a4:	2300      	movs	r3, #0
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f000 b800 	b.w	80065ac <__strtok_r>

080065ac <__strtok_r>:
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	b948      	cbnz	r0, 80065c4 <__strtok_r+0x18>
 80065b0:	6810      	ldr	r0, [r2, #0]
 80065b2:	b938      	cbnz	r0, 80065c4 <__strtok_r+0x18>
 80065b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065ba:	b15e      	cbz	r6, 80065d4 <__strtok_r+0x28>
 80065bc:	42b5      	cmp	r5, r6
 80065be:	d1fa      	bne.n	80065b6 <__strtok_r+0xa>
 80065c0:	b12b      	cbz	r3, 80065ce <__strtok_r+0x22>
 80065c2:	4620      	mov	r0, r4
 80065c4:	4604      	mov	r4, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80065cc:	e7f3      	b.n	80065b6 <__strtok_r+0xa>
 80065ce:	6014      	str	r4, [r2, #0]
 80065d0:	7003      	strb	r3, [r0, #0]
 80065d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d4:	b94d      	cbnz	r5, 80065ea <__strtok_r+0x3e>
 80065d6:	6015      	str	r5, [r2, #0]
 80065d8:	4628      	mov	r0, r5
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065e0:	42ae      	cmp	r6, r5
 80065e2:	d007      	beq.n	80065f4 <__strtok_r+0x48>
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	d1f9      	bne.n	80065dc <__strtok_r+0x30>
 80065e8:	461c      	mov	r4, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	460f      	mov	r7, r1
 80065ee:	f813 5b01 	ldrb.w	r5, [r3], #1
 80065f2:	e7f3      	b.n	80065dc <__strtok_r+0x30>
 80065f4:	b115      	cbz	r5, 80065fc <__strtok_r+0x50>
 80065f6:	2100      	movs	r1, #0
 80065f8:	7021      	strb	r1, [r4, #0]
 80065fa:	e000      	b.n	80065fe <__strtok_r+0x52>
 80065fc:	462b      	mov	r3, r5
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006604 <_strtol_r>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	4c40      	ldr	r4, [pc, #256]	; (800670c <_strtol_r+0x108>)
 800660a:	f8d4 9000 	ldr.w	r9, [r4]
 800660e:	460f      	mov	r7, r1
 8006610:	463d      	mov	r5, r7
 8006612:	f815 eb01 	ldrb.w	lr, [r5], #1
 8006616:	eb09 040e 	add.w	r4, r9, lr
 800661a:	7866      	ldrb	r6, [r4, #1]
 800661c:	f006 0408 	and.w	r4, r6, #8
 8006620:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8006624:	b10c      	cbz	r4, 800662a <_strtol_r+0x26>
 8006626:	462f      	mov	r7, r5
 8006628:	e7f2      	b.n	8006610 <_strtol_r+0xc>
 800662a:	4674      	mov	r4, lr
 800662c:	2c2d      	cmp	r4, #45	; 0x2d
 800662e:	d103      	bne.n	8006638 <_strtol_r+0x34>
 8006630:	1cbd      	adds	r5, r7, #2
 8006632:	787c      	ldrb	r4, [r7, #1]
 8006634:	2601      	movs	r6, #1
 8006636:	e003      	b.n	8006640 <_strtol_r+0x3c>
 8006638:	2c2b      	cmp	r4, #43	; 0x2b
 800663a:	bf04      	itt	eq
 800663c:	787c      	ldrbeq	r4, [r7, #1]
 800663e:	1cbd      	addeq	r5, r7, #2
 8006640:	b113      	cbz	r3, 8006648 <_strtol_r+0x44>
 8006642:	2b10      	cmp	r3, #16
 8006644:	d10a      	bne.n	800665c <_strtol_r+0x58>
 8006646:	e05a      	b.n	80066fe <_strtol_r+0xfa>
 8006648:	2c30      	cmp	r4, #48	; 0x30
 800664a:	d156      	bne.n	80066fa <_strtol_r+0xf6>
 800664c:	782c      	ldrb	r4, [r5, #0]
 800664e:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006652:	2c58      	cmp	r4, #88	; 0x58
 8006654:	d14c      	bne.n	80066f0 <_strtol_r+0xec>
 8006656:	786c      	ldrb	r4, [r5, #1]
 8006658:	2310      	movs	r3, #16
 800665a:	3502      	adds	r5, #2
 800665c:	2e00      	cmp	r6, #0
 800665e:	bf14      	ite	ne
 8006660:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8006664:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8006668:	2700      	movs	r7, #0
 800666a:	fbb8 faf3 	udiv	sl, r8, r3
 800666e:	46be      	mov	lr, r7
 8006670:	fb03 881a 	mls	r8, r3, sl, r8
 8006674:	eb09 0c04 	add.w	ip, r9, r4
 8006678:	f89c c001 	ldrb.w	ip, [ip, #1]
 800667c:	f01c 0f04 	tst.w	ip, #4
 8006680:	d001      	beq.n	8006686 <_strtol_r+0x82>
 8006682:	3c30      	subs	r4, #48	; 0x30
 8006684:	e00b      	b.n	800669e <_strtol_r+0x9a>
 8006686:	f01c 0c03 	ands.w	ip, ip, #3
 800668a:	d01b      	beq.n	80066c4 <_strtol_r+0xc0>
 800668c:	f1bc 0f01 	cmp.w	ip, #1
 8006690:	bf0c      	ite	eq
 8006692:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8006696:	f04f 0c57 	movne.w	ip, #87	; 0x57
 800669a:	ebcc 0404 	rsb	r4, ip, r4
 800669e:	429c      	cmp	r4, r3
 80066a0:	da10      	bge.n	80066c4 <_strtol_r+0xc0>
 80066a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80066a6:	d00a      	beq.n	80066be <_strtol_r+0xba>
 80066a8:	45d6      	cmp	lr, sl
 80066aa:	d806      	bhi.n	80066ba <_strtol_r+0xb6>
 80066ac:	d101      	bne.n	80066b2 <_strtol_r+0xae>
 80066ae:	4544      	cmp	r4, r8
 80066b0:	dc03      	bgt.n	80066ba <_strtol_r+0xb6>
 80066b2:	fb03 4e0e 	mla	lr, r3, lr, r4
 80066b6:	2701      	movs	r7, #1
 80066b8:	e001      	b.n	80066be <_strtol_r+0xba>
 80066ba:	f04f 37ff 	mov.w	r7, #4294967295
 80066be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066c2:	e7d7      	b.n	8006674 <_strtol_r+0x70>
 80066c4:	1c7c      	adds	r4, r7, #1
 80066c6:	4673      	mov	r3, lr
 80066c8:	d10a      	bne.n	80066e0 <_strtol_r+0xdc>
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	f04f 0122 	mov.w	r1, #34	; 0x22
 80066d0:	bf14      	ite	ne
 80066d2:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 80066d6:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 80066da:	6001      	str	r1, [r0, #0]
 80066dc:	b92a      	cbnz	r2, 80066ea <_strtol_r+0xe6>
 80066de:	e011      	b.n	8006704 <_strtol_r+0x100>
 80066e0:	b10e      	cbz	r6, 80066e6 <_strtol_r+0xe2>
 80066e2:	f1ce 0300 	rsb	r3, lr, #0
 80066e6:	b16a      	cbz	r2, 8006704 <_strtol_r+0x100>
 80066e8:	b107      	cbz	r7, 80066ec <_strtol_r+0xe8>
 80066ea:	1e69      	subs	r1, r5, #1
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	e009      	b.n	8006704 <_strtol_r+0x100>
 80066f0:	2430      	movs	r4, #48	; 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1b2      	bne.n	800665c <_strtol_r+0x58>
 80066f6:	2308      	movs	r3, #8
 80066f8:	e7b0      	b.n	800665c <_strtol_r+0x58>
 80066fa:	230a      	movs	r3, #10
 80066fc:	e7ae      	b.n	800665c <_strtol_r+0x58>
 80066fe:	2c30      	cmp	r4, #48	; 0x30
 8006700:	d1ac      	bne.n	800665c <_strtol_r+0x58>
 8006702:	e7a3      	b.n	800664c <_strtol_r+0x48>
 8006704:	4618      	mov	r0, r3
 8006706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670a:	bf00      	nop
 800670c:	1ffe8d6c 	.word	0x1ffe8d6c

08006710 <strtol>:
 8006710:	b530      	push	{r4, r5, lr}
 8006712:	4613      	mov	r3, r2
 8006714:	4a04      	ldr	r2, [pc, #16]	; (8006728 <strtol+0x18>)
 8006716:	4605      	mov	r5, r0
 8006718:	460c      	mov	r4, r1
 800671a:	6810      	ldr	r0, [r2, #0]
 800671c:	4629      	mov	r1, r5
 800671e:	4622      	mov	r2, r4
 8006720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006724:	f7ff bf6e 	b.w	8006604 <_strtol_r>
 8006728:	1ffe8d68 	.word	0x1ffe8d68

0800672c <_strtoul_r>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	4c3b      	ldr	r4, [pc, #236]	; (8006820 <_strtoul_r+0xf4>)
 8006732:	f8d4 9000 	ldr.w	r9, [r4]
 8006736:	460e      	mov	r6, r1
 8006738:	4635      	mov	r5, r6
 800673a:	f815 eb01 	ldrb.w	lr, [r5], #1
 800673e:	eb09 040e 	add.w	r4, r9, lr
 8006742:	7867      	ldrb	r7, [r4, #1]
 8006744:	f007 0408 	and.w	r4, r7, #8
 8006748:	f004 07ff 	and.w	r7, r4, #255	; 0xff
 800674c:	b10c      	cbz	r4, 8006752 <_strtoul_r+0x26>
 800674e:	462e      	mov	r6, r5
 8006750:	e7f2      	b.n	8006738 <_strtoul_r+0xc>
 8006752:	4674      	mov	r4, lr
 8006754:	2c2d      	cmp	r4, #45	; 0x2d
 8006756:	d103      	bne.n	8006760 <_strtoul_r+0x34>
 8006758:	1cb5      	adds	r5, r6, #2
 800675a:	7874      	ldrb	r4, [r6, #1]
 800675c:	2701      	movs	r7, #1
 800675e:	e003      	b.n	8006768 <_strtoul_r+0x3c>
 8006760:	2c2b      	cmp	r4, #43	; 0x2b
 8006762:	bf04      	itt	eq
 8006764:	7874      	ldrbeq	r4, [r6, #1]
 8006766:	1cb5      	addeq	r5, r6, #2
 8006768:	b113      	cbz	r3, 8006770 <_strtoul_r+0x44>
 800676a:	2b10      	cmp	r3, #16
 800676c:	d10a      	bne.n	8006784 <_strtoul_r+0x58>
 800676e:	e051      	b.n	8006814 <_strtoul_r+0xe8>
 8006770:	2c30      	cmp	r4, #48	; 0x30
 8006772:	d14d      	bne.n	8006810 <_strtoul_r+0xe4>
 8006774:	782c      	ldrb	r4, [r5, #0]
 8006776:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800677a:	2c58      	cmp	r4, #88	; 0x58
 800677c:	d143      	bne.n	8006806 <_strtoul_r+0xda>
 800677e:	786c      	ldrb	r4, [r5, #1]
 8006780:	2310      	movs	r3, #16
 8006782:	3502      	adds	r5, #2
 8006784:	f04f 38ff 	mov.w	r8, #4294967295
 8006788:	2600      	movs	r6, #0
 800678a:	fbb8 f8f3 	udiv	r8, r8, r3
 800678e:	fb03 fa08 	mul.w	sl, r3, r8
 8006792:	ea6f 0a0a 	mvn.w	sl, sl
 8006796:	46b6      	mov	lr, r6
 8006798:	eb09 0c04 	add.w	ip, r9, r4
 800679c:	f89c c001 	ldrb.w	ip, [ip, #1]
 80067a0:	f01c 0f04 	tst.w	ip, #4
 80067a4:	d001      	beq.n	80067aa <_strtoul_r+0x7e>
 80067a6:	3c30      	subs	r4, #48	; 0x30
 80067a8:	e00b      	b.n	80067c2 <_strtoul_r+0x96>
 80067aa:	f01c 0c03 	ands.w	ip, ip, #3
 80067ae:	d01b      	beq.n	80067e8 <_strtoul_r+0xbc>
 80067b0:	f1bc 0f01 	cmp.w	ip, #1
 80067b4:	bf0c      	ite	eq
 80067b6:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 80067ba:	f04f 0c57 	movne.w	ip, #87	; 0x57
 80067be:	ebcc 0404 	rsb	r4, ip, r4
 80067c2:	429c      	cmp	r4, r3
 80067c4:	da10      	bge.n	80067e8 <_strtoul_r+0xbc>
 80067c6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80067ca:	d00a      	beq.n	80067e2 <_strtoul_r+0xb6>
 80067cc:	45c6      	cmp	lr, r8
 80067ce:	d806      	bhi.n	80067de <_strtoul_r+0xb2>
 80067d0:	d101      	bne.n	80067d6 <_strtoul_r+0xaa>
 80067d2:	4554      	cmp	r4, sl
 80067d4:	dc03      	bgt.n	80067de <_strtoul_r+0xb2>
 80067d6:	fb03 4e0e 	mla	lr, r3, lr, r4
 80067da:	2601      	movs	r6, #1
 80067dc:	e001      	b.n	80067e2 <_strtoul_r+0xb6>
 80067de:	f04f 36ff 	mov.w	r6, #4294967295
 80067e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e6:	e7d7      	b.n	8006798 <_strtoul_r+0x6c>
 80067e8:	1c74      	adds	r4, r6, #1
 80067ea:	4673      	mov	r3, lr
 80067ec:	d103      	bne.n	80067f6 <_strtoul_r+0xca>
 80067ee:	2322      	movs	r3, #34	; 0x22
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	4633      	mov	r3, r6
 80067f4:	e002      	b.n	80067fc <_strtoul_r+0xd0>
 80067f6:	b10f      	cbz	r7, 80067fc <_strtoul_r+0xd0>
 80067f8:	f1ce 0300 	rsb	r3, lr, #0
 80067fc:	b16a      	cbz	r2, 800681a <_strtoul_r+0xee>
 80067fe:	b106      	cbz	r6, 8006802 <_strtoul_r+0xd6>
 8006800:	1e69      	subs	r1, r5, #1
 8006802:	6011      	str	r1, [r2, #0]
 8006804:	e009      	b.n	800681a <_strtoul_r+0xee>
 8006806:	2430      	movs	r4, #48	; 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1bb      	bne.n	8006784 <_strtoul_r+0x58>
 800680c:	2308      	movs	r3, #8
 800680e:	e7b9      	b.n	8006784 <_strtoul_r+0x58>
 8006810:	230a      	movs	r3, #10
 8006812:	e7b7      	b.n	8006784 <_strtoul_r+0x58>
 8006814:	2c30      	cmp	r4, #48	; 0x30
 8006816:	d1b5      	bne.n	8006784 <_strtoul_r+0x58>
 8006818:	e7ac      	b.n	8006774 <_strtoul_r+0x48>
 800681a:	4618      	mov	r0, r3
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006820:	1ffe8d6c 	.word	0x1ffe8d6c

08006824 <strtoul>:
 8006824:	b530      	push	{r4, r5, lr}
 8006826:	4613      	mov	r3, r2
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <strtoul+0x18>)
 800682a:	4605      	mov	r5, r0
 800682c:	460c      	mov	r4, r1
 800682e:	6810      	ldr	r0, [r2, #0]
 8006830:	4629      	mov	r1, r5
 8006832:	4622      	mov	r2, r4
 8006834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006838:	f7ff bf78 	b.w	800672c <_strtoul_r>
 800683c:	1ffe8d68 	.word	0x1ffe8d68

08006840 <_vsniprintf_r>:
 8006840:	b530      	push	{r4, r5, lr}
 8006842:	1e14      	subs	r4, r2, #0
 8006844:	b09b      	sub	sp, #108	; 0x6c
 8006846:	4605      	mov	r5, r0
 8006848:	da04      	bge.n	8006854 <_vsniprintf_r+0x14>
 800684a:	238b      	movs	r3, #139	; 0x8b
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	f04f 30ff 	mov.w	r0, #4294967295
 8006852:	e01c      	b.n	800688e <_vsniprintf_r+0x4e>
 8006854:	f44f 7202 	mov.w	r2, #520	; 0x208
 8006858:	f8ad 200c 	strh.w	r2, [sp, #12]
 800685c:	bf14      	ite	ne
 800685e:	f104 32ff 	addne.w	r2, r4, #4294967295
 8006862:	4622      	moveq	r2, r4
 8006864:	9202      	str	r2, [sp, #8]
 8006866:	9205      	str	r2, [sp, #20]
 8006868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800686c:	9100      	str	r1, [sp, #0]
 800686e:	9104      	str	r1, [sp, #16]
 8006870:	f8ad 200e 	strh.w	r2, [sp, #14]
 8006874:	4669      	mov	r1, sp
 8006876:	461a      	mov	r2, r3
 8006878:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800687a:	f000 f875 	bl	8006968 <_svfiprintf_r>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	bfbc      	itt	lt
 8006882:	238b      	movlt	r3, #139	; 0x8b
 8006884:	602b      	strlt	r3, [r5, #0]
 8006886:	b114      	cbz	r4, 800688e <_vsniprintf_r+0x4e>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	b01b      	add	sp, #108	; 0x6c
 8006890:	bd30      	pop	{r4, r5, pc}
	...

08006894 <vsniprintf>:
 8006894:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <vsniprintf+0x1c>)
 800689a:	4606      	mov	r6, r0
 800689c:	460d      	mov	r5, r1
 800689e:	4614      	mov	r4, r2
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	4631      	mov	r1, r6
 80068a4:	462a      	mov	r2, r5
 80068a6:	4623      	mov	r3, r4
 80068a8:	f7ff ffca 	bl	8006840 <_vsniprintf_r>
 80068ac:	b002      	add	sp, #8
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	1ffe8d68 	.word	0x1ffe8d68

080068b4 <__ssputs_r>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	688e      	ldr	r6, [r1, #8]
 80068ba:	42b3      	cmp	r3, r6
 80068bc:	4682      	mov	sl, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	4690      	mov	r8, r2
 80068c2:	4699      	mov	r9, r3
 80068c4:	d340      	bcc.n	8006948 <__ssputs_r+0x94>
 80068c6:	898a      	ldrh	r2, [r1, #12]
 80068c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068cc:	d03a      	beq.n	8006944 <__ssputs_r+0x90>
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	6909      	ldr	r1, [r1, #16]
 80068d2:	1a6f      	subs	r7, r5, r1
 80068d4:	6965      	ldr	r5, [r4, #20]
 80068d6:	2302      	movs	r3, #2
 80068d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80068e0:	1c7b      	adds	r3, r7, #1
 80068e2:	444b      	add	r3, r9
 80068e4:	429d      	cmp	r5, r3
 80068e6:	bf38      	it	cc
 80068e8:	461d      	movcc	r5, r3
 80068ea:	0553      	lsls	r3, r2, #21
 80068ec:	d50f      	bpl.n	800690e <__ssputs_r+0x5a>
 80068ee:	4629      	mov	r1, r5
 80068f0:	f000 fb2a 	bl	8006f48 <_malloc_r>
 80068f4:	4606      	mov	r6, r0
 80068f6:	b198      	cbz	r0, 8006920 <__ssputs_r+0x6c>
 80068f8:	6921      	ldr	r1, [r4, #16]
 80068fa:	463a      	mov	r2, r7
 80068fc:	f7ff fe2c 	bl	8006558 <memcpy>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	e013      	b.n	8006936 <__ssputs_r+0x82>
 800690e:	462a      	mov	r2, r5
 8006910:	f000 fb70 	bl	8006ff4 <_realloc_r>
 8006914:	4606      	mov	r6, r0
 8006916:	b970      	cbnz	r0, 8006936 <__ssputs_r+0x82>
 8006918:	4650      	mov	r0, sl
 800691a:	6921      	ldr	r1, [r4, #16]
 800691c:	f000 fad0 	bl	8006ec0 <_free_r>
 8006920:	230c      	movs	r3, #12
 8006922:	f8ca 3000 	str.w	r3, [sl]
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692c:	81a3      	strh	r3, [r4, #12]
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	6126      	str	r6, [r4, #16]
 8006938:	6165      	str	r5, [r4, #20]
 800693a:	443e      	add	r6, r7
 800693c:	1bed      	subs	r5, r5, r7
 800693e:	6026      	str	r6, [r4, #0]
 8006940:	60a5      	str	r5, [r4, #8]
 8006942:	464e      	mov	r6, r9
 8006944:	45b1      	cmp	r9, r6
 8006946:	d200      	bcs.n	800694a <__ssputs_r+0x96>
 8006948:	464e      	mov	r6, r9
 800694a:	4632      	mov	r2, r6
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	4641      	mov	r1, r8
 8006950:	f000 fa9b 	bl	8006e8a <memmove>
 8006954:	68a3      	ldr	r3, [r4, #8]
 8006956:	1b9b      	subs	r3, r3, r6
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	441e      	add	r6, r3
 800695e:	6026      	str	r6, [r4, #0]
 8006960:	2000      	movs	r0, #0
 8006962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006968 <_svfiprintf_r>:
 8006968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800696c:	b09d      	sub	sp, #116	; 0x74
 800696e:	4606      	mov	r6, r0
 8006970:	9303      	str	r3, [sp, #12]
 8006972:	898b      	ldrh	r3, [r1, #12]
 8006974:	061c      	lsls	r4, r3, #24
 8006976:	460d      	mov	r5, r1
 8006978:	4690      	mov	r8, r2
 800697a:	d50c      	bpl.n	8006996 <_svfiprintf_r+0x2e>
 800697c:	690b      	ldr	r3, [r1, #16]
 800697e:	b953      	cbnz	r3, 8006996 <_svfiprintf_r+0x2e>
 8006980:	2140      	movs	r1, #64	; 0x40
 8006982:	f000 fae1 	bl	8006f48 <_malloc_r>
 8006986:	6028      	str	r0, [r5, #0]
 8006988:	6128      	str	r0, [r5, #16]
 800698a:	b910      	cbnz	r0, 8006992 <_svfiprintf_r+0x2a>
 800698c:	230c      	movs	r3, #12
 800698e:	6033      	str	r3, [r6, #0]
 8006990:	e0cc      	b.n	8006b2c <_svfiprintf_r+0x1c4>
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	616b      	str	r3, [r5, #20]
 8006996:	2300      	movs	r3, #0
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	2320      	movs	r3, #32
 800699c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069a0:	2330      	movs	r3, #48	; 0x30
 80069a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069a6:	4643      	mov	r3, r8
 80069a8:	461c      	mov	r4, r3
 80069aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ae:	b91a      	cbnz	r2, 80069b8 <_svfiprintf_r+0x50>
 80069b0:	ebb4 0908 	subs.w	r9, r4, r8
 80069b4:	d00f      	beq.n	80069d6 <_svfiprintf_r+0x6e>
 80069b6:	e002      	b.n	80069be <_svfiprintf_r+0x56>
 80069b8:	2a25      	cmp	r2, #37	; 0x25
 80069ba:	d1f5      	bne.n	80069a8 <_svfiprintf_r+0x40>
 80069bc:	e7f8      	b.n	80069b0 <_svfiprintf_r+0x48>
 80069be:	4630      	mov	r0, r6
 80069c0:	4629      	mov	r1, r5
 80069c2:	4642      	mov	r2, r8
 80069c4:	464b      	mov	r3, r9
 80069c6:	f7ff ff75 	bl	80068b4 <__ssputs_r>
 80069ca:	3001      	adds	r0, #1
 80069cc:	f000 80a9 	beq.w	8006b22 <_svfiprintf_r+0x1ba>
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	444b      	add	r3, r9
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	7823      	ldrb	r3, [r4, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80a2 	beq.w	8006b22 <_svfiprintf_r+0x1ba>
 80069de:	2300      	movs	r3, #0
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	9205      	str	r2, [sp, #20]
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f0:	931a      	str	r3, [sp, #104]	; 0x68
 80069f2:	f104 0801 	add.w	r8, r4, #1
 80069f6:	4644      	mov	r4, r8
 80069f8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8006b44 <_svfiprintf_r+0x1dc>
 80069fc:	7821      	ldrb	r1, [r4, #0]
 80069fe:	4648      	mov	r0, r9
 8006a00:	2205      	movs	r2, #5
 8006a02:	f000 fa33 	bl	8006e6c <memchr>
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	b130      	cbz	r0, 8006a1c <_svfiprintf_r+0xb4>
 8006a0e:	ebc9 0000 	rsb	r0, r9, r0
 8006a12:	2201      	movs	r2, #1
 8006a14:	4082      	lsls	r2, r0
 8006a16:	4313      	orrs	r3, r2
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	e7ec      	b.n	80069f6 <_svfiprintf_r+0x8e>
 8006a1c:	06d8      	lsls	r0, r3, #27
 8006a1e:	bf44      	itt	mi
 8006a20:	2220      	movmi	r2, #32
 8006a22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a26:	0719      	lsls	r1, r3, #28
 8006a28:	bf44      	itt	mi
 8006a2a:	222b      	movmi	r2, #43	; 0x2b
 8006a2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a30:	7822      	ldrb	r2, [r4, #0]
 8006a32:	2a2a      	cmp	r2, #42	; 0x2a
 8006a34:	d002      	beq.n	8006a3c <_svfiprintf_r+0xd4>
 8006a36:	9907      	ldr	r1, [sp, #28]
 8006a38:	4623      	mov	r3, r4
 8006a3a:	e00e      	b.n	8006a5a <_svfiprintf_r+0xf2>
 8006a3c:	9a03      	ldr	r2, [sp, #12]
 8006a3e:	1d11      	adds	r1, r2, #4
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	9103      	str	r1, [sp, #12]
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	bfbb      	ittet	lt
 8006a48:	4252      	neglt	r2, r2
 8006a4a:	f043 0302 	orrlt.w	r3, r3, #2
 8006a4e:	9207      	strge	r2, [sp, #28]
 8006a50:	9207      	strlt	r2, [sp, #28]
 8006a52:	bfb8      	it	lt
 8006a54:	9304      	strlt	r3, [sp, #16]
 8006a56:	3401      	adds	r4, #1
 8006a58:	e00a      	b.n	8006a70 <_svfiprintf_r+0x108>
 8006a5a:	461c      	mov	r4, r3
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	7822      	ldrb	r2, [r4, #0]
 8006a60:	3a30      	subs	r2, #48	; 0x30
 8006a62:	2a09      	cmp	r2, #9
 8006a64:	d803      	bhi.n	8006a6e <_svfiprintf_r+0x106>
 8006a66:	200a      	movs	r0, #10
 8006a68:	fb00 2101 	mla	r1, r0, r1, r2
 8006a6c:	e7f5      	b.n	8006a5a <_svfiprintf_r+0xf2>
 8006a6e:	9107      	str	r1, [sp, #28]
 8006a70:	7823      	ldrb	r3, [r4, #0]
 8006a72:	2b2e      	cmp	r3, #46	; 0x2e
 8006a74:	d11a      	bne.n	8006aac <_svfiprintf_r+0x144>
 8006a76:	7863      	ldrb	r3, [r4, #1]
 8006a78:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7a:	d10a      	bne.n	8006a92 <_svfiprintf_r+0x12a>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	9203      	str	r2, [sp, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bfb8      	it	lt
 8006a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a8c:	3402      	adds	r4, #2
 8006a8e:	9305      	str	r3, [sp, #20]
 8006a90:	e00c      	b.n	8006aac <_svfiprintf_r+0x144>
 8006a92:	1c61      	adds	r1, r4, #1
 8006a94:	2200      	movs	r2, #0
 8006a96:	460c      	mov	r4, r1
 8006a98:	3101      	adds	r1, #1
 8006a9a:	7823      	ldrb	r3, [r4, #0]
 8006a9c:	3b30      	subs	r3, #48	; 0x30
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d803      	bhi.n	8006aaa <_svfiprintf_r+0x142>
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	fb00 3202 	mla	r2, r0, r2, r3
 8006aa8:	e7f5      	b.n	8006a96 <_svfiprintf_r+0x12e>
 8006aaa:	9205      	str	r2, [sp, #20]
 8006aac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006b48 <_svfiprintf_r+0x1e0>
 8006ab0:	7821      	ldrb	r1, [r4, #0]
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f000 f9d9 	bl	8006e6c <memchr>
 8006aba:	b138      	cbz	r0, 8006acc <_svfiprintf_r+0x164>
 8006abc:	9a04      	ldr	r2, [sp, #16]
 8006abe:	ebc8 0000 	rsb	r0, r8, r0
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	4083      	lsls	r3, r0
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	3401      	adds	r4, #1
 8006acc:	7821      	ldrb	r1, [r4, #0]
 8006ace:	481a      	ldr	r0, [pc, #104]	; (8006b38 <_svfiprintf_r+0x1d0>)
 8006ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	f104 0801 	add.w	r8, r4, #1
 8006ada:	f000 f9c7 	bl	8006e6c <memchr>
 8006ade:	b188      	cbz	r0, 8006b04 <_svfiprintf_r+0x19c>
 8006ae0:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <_svfiprintf_r+0x1d4>)
 8006ae2:	b933      	cbnz	r3, 8006af2 <_svfiprintf_r+0x18a>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	f023 0307 	bic.w	r3, r3, #7
 8006aec:	3308      	adds	r3, #8
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	e013      	b.n	8006b1a <_svfiprintf_r+0x1b2>
 8006af2:	ab03      	add	r3, sp, #12
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4630      	mov	r0, r6
 8006af8:	a904      	add	r1, sp, #16
 8006afa:	462a      	mov	r2, r5
 8006afc:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <_svfiprintf_r+0x1d8>)
 8006afe:	f3af 8000 	nop.w
 8006b02:	e007      	b.n	8006b14 <_svfiprintf_r+0x1ac>
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	a904      	add	r1, sp, #16
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <_svfiprintf_r+0x1d8>)
 8006b10:	f000 f892 	bl	8006c38 <_printf_i>
 8006b14:	1c42      	adds	r2, r0, #1
 8006b16:	4607      	mov	r7, r0
 8006b18:	d003      	beq.n	8006b22 <_svfiprintf_r+0x1ba>
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	443b      	add	r3, r7
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	e741      	b.n	80069a6 <_svfiprintf_r+0x3e>
 8006b22:	89ab      	ldrh	r3, [r5, #12]
 8006b24:	065b      	lsls	r3, r3, #25
 8006b26:	d401      	bmi.n	8006b2c <_svfiprintf_r+0x1c4>
 8006b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b2a:	e001      	b.n	8006b30 <_svfiprintf_r+0x1c8>
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	b01d      	add	sp, #116	; 0x74
 8006b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b36:	bf00      	nop
 8006b38:	080076c5 	.word	0x080076c5
 8006b3c:	00000000 	.word	0x00000000
 8006b40:	080068b5 	.word	0x080068b5
 8006b44:	080076bb 	.word	0x080076bb
 8006b48:	080076c1 	.word	0x080076c1

08006b4c <_printf_common>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	4691      	mov	r9, r2
 8006b52:	461f      	mov	r7, r3
 8006b54:	688a      	ldr	r2, [r1, #8]
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	bfb8      	it	lt
 8006b60:	4613      	movlt	r3, r2
 8006b62:	f8c9 3000 	str.w	r3, [r9]
 8006b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	b112      	cbz	r2, 8006b76 <_printf_common+0x2a>
 8006b70:	3301      	adds	r3, #1
 8006b72:	f8c9 3000 	str.w	r3, [r9]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	0699      	lsls	r1, r3, #26
 8006b7a:	bf42      	ittt	mi
 8006b7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b80:	3302      	addmi	r3, #2
 8006b82:	f8c9 3000 	strmi.w	r3, [r9]
 8006b86:	6825      	ldr	r5, [r4, #0]
 8006b88:	f015 0506 	ands.w	r5, r5, #6
 8006b8c:	d01c      	beq.n	8006bc8 <_printf_common+0x7c>
 8006b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	3300      	adds	r3, #0
 8006b96:	bf18      	it	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	0692      	lsls	r2, r2, #26
 8006b9c:	d51f      	bpl.n	8006bde <_printf_common+0x92>
 8006b9e:	18e1      	adds	r1, r4, r3
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	2030      	movs	r0, #48	; 0x30
 8006ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba8:	4422      	add	r2, r4
 8006baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	e013      	b.n	8006bde <_printf_common+0x92>
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f104 0219 	add.w	r2, r4, #25
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	47c0      	blx	r8
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d007      	beq.n	8006bd6 <_printf_common+0x8a>
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	68e3      	ldr	r3, [r4, #12]
 8006bca:	f8d9 2000 	ldr.w	r2, [r9]
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	dbf0      	blt.n	8006bb6 <_printf_common+0x6a>
 8006bd4:	e7db      	b.n	8006b8e <_printf_common+0x42>
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be6:	47c0      	blx	r8
 8006be8:	3001      	adds	r0, #1
 8006bea:	d0f4      	beq.n	8006bd6 <_printf_common+0x8a>
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	f8d9 5000 	ldr.w	r5, [r9]
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	f002 0206 	and.w	r2, r2, #6
 8006bf8:	2a04      	cmp	r2, #4
 8006bfa:	bf08      	it	eq
 8006bfc:	1b5d      	subeq	r5, r3, r5
 8006bfe:	6922      	ldr	r2, [r4, #16]
 8006c00:	68a3      	ldr	r3, [r4, #8]
 8006c02:	bf0c      	ite	eq
 8006c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c08:	2500      	movne	r5, #0
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	bfc4      	itt	gt
 8006c0e:	1a9b      	subgt	r3, r3, r2
 8006c10:	18ed      	addgt	r5, r5, r3
 8006c12:	f04f 0900 	mov.w	r9, #0
 8006c16:	45a9      	cmp	r9, r5
 8006c18:	da0a      	bge.n	8006c30 <_printf_common+0xe4>
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f104 021a 	add.w	r2, r4, #26
 8006c22:	2301      	movs	r3, #1
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d0d5      	beq.n	8006bd6 <_printf_common+0x8a>
 8006c2a:	f109 0901 	add.w	r9, r9, #1
 8006c2e:	e7f2      	b.n	8006c16 <_printf_common+0xca>
 8006c30:	2000      	movs	r0, #0
 8006c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006c38 <_printf_i>:
 8006c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	4617      	mov	r7, r2
 8006c40:	7e22      	ldrb	r2, [r4, #24]
 8006c42:	2a6e      	cmp	r2, #110	; 0x6e
 8006c44:	4698      	mov	r8, r3
 8006c46:	4606      	mov	r6, r0
 8006c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c4a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8006c4e:	f000 80a9 	beq.w	8006da4 <_printf_i+0x16c>
 8006c52:	d812      	bhi.n	8006c7a <_printf_i+0x42>
 8006c54:	2a63      	cmp	r2, #99	; 0x63
 8006c56:	d023      	beq.n	8006ca0 <_printf_i+0x68>
 8006c58:	d80a      	bhi.n	8006c70 <_printf_i+0x38>
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	f000 80b6 	beq.w	8006dcc <_printf_i+0x194>
 8006c60:	2a58      	cmp	r2, #88	; 0x58
 8006c62:	f040 80c5 	bne.w	8006df0 <_printf_i+0x1b8>
 8006c66:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006c6a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8006e64 <_printf_i+0x22c>
 8006c6e:	e051      	b.n	8006d14 <_printf_i+0xdc>
 8006c70:	2a64      	cmp	r2, #100	; 0x64
 8006c72:	d01e      	beq.n	8006cb2 <_printf_i+0x7a>
 8006c74:	2a69      	cmp	r2, #105	; 0x69
 8006c76:	d01c      	beq.n	8006cb2 <_printf_i+0x7a>
 8006c78:	e0ba      	b.n	8006df0 <_printf_i+0x1b8>
 8006c7a:	2a73      	cmp	r2, #115	; 0x73
 8006c7c:	f000 80aa 	beq.w	8006dd4 <_printf_i+0x19c>
 8006c80:	d809      	bhi.n	8006c96 <_printf_i+0x5e>
 8006c82:	2a6f      	cmp	r2, #111	; 0x6f
 8006c84:	d02b      	beq.n	8006cde <_printf_i+0xa6>
 8006c86:	2a70      	cmp	r2, #112	; 0x70
 8006c88:	f040 80b2 	bne.w	8006df0 <_printf_i+0x1b8>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	f042 0220 	orr.w	r2, r2, #32
 8006c92:	6022      	str	r2, [r4, #0]
 8006c94:	e039      	b.n	8006d0a <_printf_i+0xd2>
 8006c96:	2a75      	cmp	r2, #117	; 0x75
 8006c98:	d021      	beq.n	8006cde <_printf_i+0xa6>
 8006c9a:	2a78      	cmp	r2, #120	; 0x78
 8006c9c:	d035      	beq.n	8006d0a <_printf_i+0xd2>
 8006c9e:	e0a7      	b.n	8006df0 <_printf_i+0x1b8>
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	1d11      	adds	r1, r2, #4
 8006ca4:	6019      	str	r1, [r3, #0]
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb0:	e0a2      	b.n	8006df8 <_printf_i+0x1c0>
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006cba:	d003      	beq.n	8006cc4 <_printf_i+0x8c>
 8006cbc:	1d10      	adds	r0, r2, #4
 8006cbe:	6018      	str	r0, [r3, #0]
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	e005      	b.n	8006cd0 <_printf_i+0x98>
 8006cc4:	0645      	lsls	r5, r0, #25
 8006cc6:	d5f9      	bpl.n	8006cbc <_printf_i+0x84>
 8006cc8:	1d10      	adds	r0, r2, #4
 8006cca:	6018      	str	r0, [r3, #0]
 8006ccc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da3b      	bge.n	8006d4c <_printf_i+0x114>
 8006cd4:	222d      	movs	r2, #45	; 0x2d
 8006cd6:	425b      	negs	r3, r3
 8006cd8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cdc:	e036      	b.n	8006d4c <_printf_i+0x114>
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ce6:	d003      	beq.n	8006cf0 <_printf_i+0xb8>
 8006ce8:	1d10      	adds	r0, r2, #4
 8006cea:	6018      	str	r0, [r3, #0]
 8006cec:	6813      	ldr	r3, [r2, #0]
 8006cee:	e004      	b.n	8006cfa <_printf_i+0xc2>
 8006cf0:	0640      	lsls	r0, r0, #25
 8006cf2:	d5f9      	bpl.n	8006ce8 <_printf_i+0xb0>
 8006cf4:	1d10      	adds	r0, r2, #4
 8006cf6:	6018      	str	r0, [r3, #0]
 8006cf8:	8813      	ldrh	r3, [r2, #0]
 8006cfa:	7e22      	ldrb	r2, [r4, #24]
 8006cfc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8006e64 <_printf_i+0x22c>
 8006d00:	2a6f      	cmp	r2, #111	; 0x6f
 8006d02:	bf0c      	ite	eq
 8006d04:	2208      	moveq	r2, #8
 8006d06:	220a      	movne	r2, #10
 8006d08:	e01c      	b.n	8006d44 <_printf_i+0x10c>
 8006d0a:	2278      	movs	r2, #120	; 0x78
 8006d0c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8006e68 <_printf_i+0x230>
 8006d10:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006d1c:	f100 0504 	add.w	r5, r0, #4
 8006d20:	601d      	str	r5, [r3, #0]
 8006d22:	d001      	beq.n	8006d28 <_printf_i+0xf0>
 8006d24:	6803      	ldr	r3, [r0, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0xf6>
 8006d28:	0655      	lsls	r5, r2, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xec>
 8006d2c:	8803      	ldrh	r3, [r0, #0]
 8006d2e:	07d0      	lsls	r0, r2, #31
 8006d30:	bf44      	itt	mi
 8006d32:	f042 0220 	orrmi.w	r2, r2, #32
 8006d36:	6022      	strmi	r2, [r4, #0]
 8006d38:	b91b      	cbnz	r3, 8006d42 <_printf_i+0x10a>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	f022 0220 	bic.w	r2, r2, #32
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	2210      	movs	r2, #16
 8006d44:	2000      	movs	r0, #0
 8006d46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006d4a:	e002      	b.n	8006d52 <_printf_i+0x11a>
 8006d4c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8006e64 <_printf_i+0x22c>
 8006d50:	220a      	movs	r2, #10
 8006d52:	6865      	ldr	r5, [r4, #4]
 8006d54:	60a5      	str	r5, [r4, #8]
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	bfa2      	ittt	ge
 8006d5a:	6820      	ldrge	r0, [r4, #0]
 8006d5c:	f020 0004 	bicge.w	r0, r0, #4
 8006d60:	6020      	strge	r0, [r4, #0]
 8006d62:	b903      	cbnz	r3, 8006d66 <_printf_i+0x12e>
 8006d64:	b165      	cbz	r5, 8006d80 <_printf_i+0x148>
 8006d66:	460d      	mov	r5, r1
 8006d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d6c:	fb02 3310 	mls	r3, r2, r0, r3
 8006d70:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8006d74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1f4      	bne.n	8006d68 <_printf_i+0x130>
 8006d7e:	e000      	b.n	8006d82 <_printf_i+0x14a>
 8006d80:	460d      	mov	r5, r1
 8006d82:	2a08      	cmp	r2, #8
 8006d84:	d10b      	bne.n	8006d9e <_printf_i+0x166>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	d508      	bpl.n	8006d9e <_printf_i+0x166>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	bfde      	ittt	le
 8006d94:	2330      	movle	r3, #48	; 0x30
 8006d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d9e:	1b49      	subs	r1, r1, r5
 8006da0:	6121      	str	r1, [r4, #16]
 8006da2:	e02e      	b.n	8006e02 <_printf_i+0x1ca>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	6960      	ldr	r0, [r4, #20]
 8006daa:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006dae:	d003      	beq.n	8006db8 <_printf_i+0x180>
 8006db0:	1d15      	adds	r5, r2, #4
 8006db2:	601d      	str	r5, [r3, #0]
 8006db4:	6813      	ldr	r3, [r2, #0]
 8006db6:	e008      	b.n	8006dca <_printf_i+0x192>
 8006db8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dbc:	f102 0504 	add.w	r5, r2, #4
 8006dc0:	601d      	str	r5, [r3, #0]
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	d001      	beq.n	8006dca <_printf_i+0x192>
 8006dc6:	8018      	strh	r0, [r3, #0]
 8006dc8:	e000      	b.n	8006dcc <_printf_i+0x194>
 8006dca:	6018      	str	r0, [r3, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6123      	str	r3, [r4, #16]
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	e016      	b.n	8006e02 <_printf_i+0x1ca>
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	1d11      	adds	r1, r2, #4
 8006dd8:	6019      	str	r1, [r3, #0]
 8006dda:	6815      	ldr	r5, [r2, #0]
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	4628      	mov	r0, r5
 8006de0:	2100      	movs	r1, #0
 8006de2:	f000 f843 	bl	8006e6c <memchr>
 8006de6:	b108      	cbz	r0, 8006dec <_printf_i+0x1b4>
 8006de8:	1b40      	subs	r0, r0, r5
 8006dea:	6060      	str	r0, [r4, #4]
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	e004      	b.n	8006dfa <_printf_i+0x1c2>
 8006df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006df8:	2301      	movs	r3, #1
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e02:	f8cd 8000 	str.w	r8, [sp]
 8006e06:	4630      	mov	r0, r6
 8006e08:	4621      	mov	r1, r4
 8006e0a:	aa03      	add	r2, sp, #12
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	f7ff fe9d 	bl	8006b4c <_printf_common>
 8006e12:	3001      	adds	r0, #1
 8006e14:	d102      	bne.n	8006e1c <_printf_i+0x1e4>
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	e01f      	b.n	8006e5c <_printf_i+0x224>
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	462a      	mov	r2, r5
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	47c0      	blx	r8
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0f5      	beq.n	8006e16 <_printf_i+0x1de>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	079b      	lsls	r3, r3, #30
 8006e2e:	d405      	bmi.n	8006e3c <_printf_i+0x204>
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	4298      	cmp	r0, r3
 8006e36:	bfb8      	it	lt
 8006e38:	4618      	movlt	r0, r3
 8006e3a:	e00f      	b.n	8006e5c <_printf_i+0x224>
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	68e3      	ldr	r3, [r4, #12]
 8006e40:	9a03      	ldr	r2, [sp, #12]
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	429d      	cmp	r5, r3
 8006e46:	daf3      	bge.n	8006e30 <_printf_i+0x1f8>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f104 0219 	add.w	r2, r4, #25
 8006e50:	2301      	movs	r3, #1
 8006e52:	47c0      	blx	r8
 8006e54:	3001      	adds	r0, #1
 8006e56:	d0de      	beq.n	8006e16 <_printf_i+0x1de>
 8006e58:	3501      	adds	r5, #1
 8006e5a:	e7f0      	b.n	8006e3e <_printf_i+0x206>
 8006e5c:	b004      	add	sp, #16
 8006e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e62:	bf00      	nop
 8006e64:	080076cc 	.word	0x080076cc
 8006e68:	080076dd 	.word	0x080076dd

08006e6c <memchr>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	b2c9      	uxtb	r1, r1
 8006e70:	4402      	add	r2, r0
 8006e72:	4290      	cmp	r0, r2
 8006e74:	4603      	mov	r3, r0
 8006e76:	d006      	beq.n	8006e86 <memchr+0x1a>
 8006e78:	781c      	ldrb	r4, [r3, #0]
 8006e7a:	428c      	cmp	r4, r1
 8006e7c:	f100 0001 	add.w	r0, r0, #1
 8006e80:	d1f7      	bne.n	8006e72 <memchr+0x6>
 8006e82:	4618      	mov	r0, r3
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	2000      	movs	r0, #0
 8006e88:	bd10      	pop	{r4, pc}

08006e8a <memmove>:
 8006e8a:	4281      	cmp	r1, r0
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	eb01 0302 	add.w	r3, r1, r2
 8006e92:	d301      	bcc.n	8006e98 <memmove+0xe>
 8006e94:	1e42      	subs	r2, r0, #1
 8006e96:	e00b      	b.n	8006eb0 <memmove+0x26>
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	d2fb      	bcs.n	8006e94 <memmove+0xa>
 8006e9c:	1881      	adds	r1, r0, r2
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	42d3      	cmn	r3, r2
 8006ea2:	d004      	beq.n	8006eae <memmove+0x24>
 8006ea4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ea8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006eac:	e7f8      	b.n	8006ea0 <memmove+0x16>
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d004      	beq.n	8006ebe <memmove+0x34>
 8006eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ebc:	e7f8      	b.n	8006eb0 <memmove+0x26>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <_free_r>:
 8006ec0:	b530      	push	{r4, r5, lr}
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	d03d      	beq.n	8006f42 <_free_r+0x82>
 8006ec6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006eca:	1f0b      	subs	r3, r1, #4
 8006ecc:	491d      	ldr	r1, [pc, #116]	; (8006f44 <_free_r+0x84>)
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	bfb8      	it	lt
 8006ed2:	189b      	addlt	r3, r3, r2
 8006ed4:	680a      	ldr	r2, [r1, #0]
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b912      	cbnz	r2, 8006ee0 <_free_r+0x20>
 8006eda:	605a      	str	r2, [r3, #4]
 8006edc:	600b      	str	r3, [r1, #0]
 8006ede:	bd30      	pop	{r4, r5, pc}
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d20d      	bcs.n	8006f00 <_free_r+0x40>
 8006ee4:	6819      	ldr	r1, [r3, #0]
 8006ee6:	1858      	adds	r0, r3, r1
 8006ee8:	4290      	cmp	r0, r2
 8006eea:	bf01      	itttt	eq
 8006eec:	585a      	ldreq	r2, [r3, r1]
 8006eee:	1852      	addeq	r2, r2, r1
 8006ef0:	601a      	streq	r2, [r3, #0]
 8006ef2:	6842      	ldreq	r2, [r0, #4]
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	bd30      	pop	{r4, r5, pc}
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d803      	bhi.n	8006f06 <_free_r+0x46>
 8006efe:	460a      	mov	r2, r1
 8006f00:	6851      	ldr	r1, [r2, #4]
 8006f02:	2900      	cmp	r1, #0
 8006f04:	d1f9      	bne.n	8006efa <_free_r+0x3a>
 8006f06:	6814      	ldr	r4, [r2, #0]
 8006f08:	1915      	adds	r5, r2, r4
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	d10a      	bne.n	8006f24 <_free_r+0x64>
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4423      	add	r3, r4
 8006f12:	18d0      	adds	r0, r2, r3
 8006f14:	4288      	cmp	r0, r1
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	d113      	bne.n	8006f42 <_free_r+0x82>
 8006f1a:	6808      	ldr	r0, [r1, #0]
 8006f1c:	4403      	add	r3, r0
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	684b      	ldr	r3, [r1, #4]
 8006f22:	e00d      	b.n	8006f40 <_free_r+0x80>
 8006f24:	d902      	bls.n	8006f2c <_free_r+0x6c>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	bd30      	pop	{r4, r5, pc}
 8006f2c:	681c      	ldr	r4, [r3, #0]
 8006f2e:	1918      	adds	r0, r3, r4
 8006f30:	4288      	cmp	r0, r1
 8006f32:	bf04      	itt	eq
 8006f34:	6808      	ldreq	r0, [r1, #0]
 8006f36:	6849      	ldreq	r1, [r1, #4]
 8006f38:	6059      	str	r1, [r3, #4]
 8006f3a:	bf04      	itt	eq
 8006f3c:	1900      	addeq	r0, r0, r4
 8006f3e:	6018      	streq	r0, [r3, #0]
 8006f40:	6053      	str	r3, [r2, #4]
 8006f42:	bd30      	pop	{r4, r5, pc}
 8006f44:	1ffe8ee8 	.word	0x1ffe8ee8

08006f48 <_malloc_r>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	1ccc      	adds	r4, r1, #3
 8006f4c:	f024 0403 	bic.w	r4, r4, #3
 8006f50:	3408      	adds	r4, #8
 8006f52:	2c0c      	cmp	r4, #12
 8006f54:	bf38      	it	cc
 8006f56:	240c      	movcc	r4, #12
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	da03      	bge.n	8006f66 <_malloc_r+0x1e>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	2000      	movs	r0, #0
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	428c      	cmp	r4, r1
 8006f68:	d3f9      	bcc.n	8006f5e <_malloc_r+0x16>
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <_malloc_r+0xa4>)
 8006f6c:	6813      	ldr	r3, [r2, #0]
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	b1a1      	cbz	r1, 8006f9e <_malloc_r+0x56>
 8006f74:	680a      	ldr	r2, [r1, #0]
 8006f76:	1b12      	subs	r2, r2, r4
 8006f78:	d40e      	bmi.n	8006f98 <_malloc_r+0x50>
 8006f7a:	2a0b      	cmp	r2, #11
 8006f7c:	d903      	bls.n	8006f86 <_malloc_r+0x3e>
 8006f7e:	600a      	str	r2, [r1, #0]
 8006f80:	188b      	adds	r3, r1, r2
 8006f82:	508c      	str	r4, [r1, r2]
 8006f84:	e01f      	b.n	8006fc6 <_malloc_r+0x7e>
 8006f86:	428b      	cmp	r3, r1
 8006f88:	bf0d      	iteet	eq
 8006f8a:	685a      	ldreq	r2, [r3, #4]
 8006f8c:	684a      	ldrne	r2, [r1, #4]
 8006f8e:	605a      	strne	r2, [r3, #4]
 8006f90:	6002      	streq	r2, [r0, #0]
 8006f92:	bf18      	it	ne
 8006f94:	460b      	movne	r3, r1
 8006f96:	e016      	b.n	8006fc6 <_malloc_r+0x7e>
 8006f98:	460b      	mov	r3, r1
 8006f9a:	6849      	ldr	r1, [r1, #4]
 8006f9c:	e7e9      	b.n	8006f72 <_malloc_r+0x2a>
 8006f9e:	4d14      	ldr	r5, [pc, #80]	; (8006ff0 <_malloc_r+0xa8>)
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	b91b      	cbnz	r3, 8006fac <_malloc_r+0x64>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f000 f84b 	bl	8007040 <_sbrk_r>
 8006faa:	6028      	str	r0, [r5, #0]
 8006fac:	4630      	mov	r0, r6
 8006fae:	4621      	mov	r1, r4
 8006fb0:	f000 f846 	bl	8007040 <_sbrk_r>
 8006fb4:	1c42      	adds	r2, r0, #1
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	d0d1      	beq.n	8006f5e <_malloc_r+0x16>
 8006fba:	1cc5      	adds	r5, r0, #3
 8006fbc:	f025 0503 	bic.w	r5, r5, #3
 8006fc0:	4285      	cmp	r5, r0
 8006fc2:	d10a      	bne.n	8006fda <_malloc_r+0x92>
 8006fc4:	601c      	str	r4, [r3, #0]
 8006fc6:	f103 000b 	add.w	r0, r3, #11
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	f020 0007 	bic.w	r0, r0, #7
 8006fd0:	1a82      	subs	r2, r0, r2
 8006fd2:	d00a      	beq.n	8006fea <_malloc_r+0xa2>
 8006fd4:	4251      	negs	r1, r2
 8006fd6:	5099      	str	r1, [r3, r2]
 8006fd8:	bd70      	pop	{r4, r5, r6, pc}
 8006fda:	4630      	mov	r0, r6
 8006fdc:	1ae9      	subs	r1, r5, r3
 8006fde:	f000 f82f 	bl	8007040 <_sbrk_r>
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d0bb      	beq.n	8006f5e <_malloc_r+0x16>
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	e7ec      	b.n	8006fc4 <_malloc_r+0x7c>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	1ffe8ee8 	.word	0x1ffe8ee8
 8006ff0:	1ffe8ee4 	.word	0x1ffe8ee4

08006ff4 <_realloc_r>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	b921      	cbnz	r1, 8007008 <_realloc_r+0x14>
 8006ffe:	4611      	mov	r1, r2
 8007000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007004:	f7ff bfa0 	b.w	8006f48 <_malloc_r>
 8007008:	b91a      	cbnz	r2, 8007012 <_realloc_r+0x1e>
 800700a:	f7ff ff59 	bl	8006ec0 <_free_r>
 800700e:	4628      	mov	r0, r5
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007012:	f000 f825 	bl	8007060 <_malloc_usable_size_r>
 8007016:	42a8      	cmp	r0, r5
 8007018:	d20e      	bcs.n	8007038 <_realloc_r+0x44>
 800701a:	4638      	mov	r0, r7
 800701c:	4629      	mov	r1, r5
 800701e:	f7ff ff93 	bl	8006f48 <_malloc_r>
 8007022:	4604      	mov	r4, r0
 8007024:	b150      	cbz	r0, 800703c <_realloc_r+0x48>
 8007026:	4631      	mov	r1, r6
 8007028:	462a      	mov	r2, r5
 800702a:	f7ff fa95 	bl	8006558 <memcpy>
 800702e:	4638      	mov	r0, r7
 8007030:	4631      	mov	r1, r6
 8007032:	f7ff ff45 	bl	8006ec0 <_free_r>
 8007036:	e001      	b.n	800703c <_realloc_r+0x48>
 8007038:	4630      	mov	r0, r6
 800703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703c:	4620      	mov	r0, r4
 800703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007040 <_sbrk_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4c06      	ldr	r4, [pc, #24]	; (800705c <_sbrk_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4605      	mov	r5, r0
 8007048:	4608      	mov	r0, r1
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	f7fc f93e 	bl	80032cc <_sbrk>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_sbrk_r+0x1a>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	b103      	cbz	r3, 800705a <_sbrk_r+0x1a>
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	1ffe952c 	.word	0x1ffe952c

08007060 <_malloc_usable_size_r>:
 8007060:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007064:	2800      	cmp	r0, #0
 8007066:	bfbe      	ittt	lt
 8007068:	1809      	addlt	r1, r1, r0
 800706a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800706e:	18c0      	addlt	r0, r0, r3
 8007070:	3804      	subs	r0, #4
 8007072:	4770      	bx	lr

08007074 <Driver_USBD0>:
 8007074:	268d 0800 26f5 0800 2931 0800 296d 0800     .&...&..1)..m)..
 8007084:	29a1 0800 29d5 0800 2be5 0800 2e05 0800     .)...)...+......
 8007094:	30f9 0800 2c31 0800 2a39 0800 2ac5 0800     .0..1,..9*...*..
 80070a4:	2b3d 0800 2d7d 0800 3269 0800 3295 0800     =+..}-..i2...2..

080070b4 <device_descriptor>:
 80070b4:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 80070c4:	0100 0000                                   ....

080070c8 <configuration_descriptor>:
 80070c8:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 80070d8:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 80070e8:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 80070f8:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

08007108 <language_string>:
 8007108:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

08007170 <manufacturer_string>:
 8007170:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 8007180:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

080071d8 <product_string>:
 80071d8:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

08007240 <CanRxInterrupt>:
 8007240:	3f4d 0100 0230 0101 0000 0001 0000 0000     M?..0...........
 8007250:	0000 0001 0102 0101                         ........

08007258 <CAN_NODE_0_gpio_out>:
 8007258:	8100 4802 000c 0000                         ...H....

08007260 <CAN_NODE_0_gpio_out_config>:
 8007260:	0090 0000 0001 0000 0002 0000               ............

0800726c <CAN_NODE_0_gpio_in>:
 800726c:	8100 4802 000d 0000                         ...H....

08007274 <CAN_NODE_0_gpio_in_config>:
	...

08007280 <CAN_NODE_0_sr>:
 8007280:	0000 0000                                   ....

08007284 <CAN_NODE_0_LMO_01_Config>:
 8007284:	8868 1ffe 0023 0001 0001 0000               h...#.......

08007290 <CAN_NODE_0_LMO_02_Config>:
 8007290:	8888 1ffe 0000 0000 0000 0000               ............

0800729c <CAN_NODE_0_LMO_03_Config>:
 800729c:	88a8 1ffe 003b 0000 0000 0000               ....;.......

080072a8 <CAN_NODE_0_LMO_04_Config>:
 80072a8:	88c8 1ffe 003a 0000 0000 0000               ....:.......

080072b4 <CAN_NODE_0_LMO_05_Config>:
 80072b4:	88e8 1ffe 001b 0000 0000 0000               ............

080072c0 <CAN_NODE_0_LMO_06_Config>:
 80072c0:	8908 1ffe 003f 0000 0000 0000               ....?.......

080072cc <CAN_NODE_0_LMO_07_Config>:
 80072cc:	8928 1ffe 001c 0000 0000 0000               (...........

080072d8 <CAN_NODE_0_LMO_08_Config>:
 80072d8:	8948 1ffe 003e 0000 0000 0000               H...>.......

080072e4 <CAN_NODE_0_LMO_09_Config>:
 80072e4:	8968 1ffe 0019 0000 0000 0000               h...........

080072f0 <CAN_NODE_0_LMO_10_Config>:
 80072f0:	8988 1ffe 001a 0000 0000 0000               ............

080072fc <CAN_NODE_0_LMO_11_Config>:
 80072fc:	89a8 1ffe 003d 0000 0000 0000               ....=.......

08007308 <CAN_NODE_0_LMO_12_Config>:
 8007308:	89c8 1ffe 001d 0000 0000 0000               ............

08007314 <CAN_NODE_0_LMO_13_Config>:
 8007314:	89e8 1ffe 0014 0000 0000 0000               ............

08007320 <CAN_NODE_0_LMO_14_Config>:
 8007320:	8a08 1ffe 0017 0000 0000 0000               ............

0800732c <CAN_NODE_0_LMO_15_Config>:
 800732c:	8a28 1ffe 0018 0000 0000 0000               (...........

08007338 <CAN_NODE_0_LMO_16_Config>:
 8007338:	8a48 1ffe 0015 0000 0000 0000               H...........

08007344 <CAN_NODE_0_LMO_17_Config>:
 8007344:	8a68 1ffe 0016 0000 0000 0000               h...........

08007350 <CAN_NODE_0_LMO_18_Config>:
 8007350:	8a88 1ffe 0006 0000 0000 0000               ............

0800735c <CAN_NODE_0_LMO_19_Config>:
 800735c:	8aa8 1ffe 0005 0000 0000 0000               ............

08007368 <CAN_NODE_0_LMO_20_Config>:
 8007368:	8ac8 1ffe 0008 0000 0000 0000               ............

08007374 <CAN_NODE_0_LMO_21_Config>:
 8007374:	8ae8 1ffe 0007 0000 0000 0000               ............

08007380 <CAN_NODE_0_LMO_22_Config>:
 8007380:	8b08 1ffe 003c 0000 0000 0000               ....<.......

0800738c <CAN_NODE_0_LMO_23_Config>:
 800738c:	8b28 1ffe 0009 0000 0000 0000               (...........

08007398 <CAN_NODE_0_LMO_24_Config>:
 8007398:	8b48 1ffe 0024 0000 0000 0000               H...$.......

080073a4 <CAN_NODE_0_LMO_25_Config>:
 80073a4:	8b68 1ffe 0025 0000 0000 0000               h...%.......

080073b0 <CAN_NODE_0_LMO_26_Config>:
 80073b0:	8b88 1ffe 0026 0000 0000 0000               ....&.......

080073bc <CAN_NODE_0_LMO_27_Config>:
 80073bc:	8ba8 1ffe 0027 0000 0000 0000               ....'.......

080073c8 <CAN_NODE_0_LMO_28_Config>:
 80073c8:	8bc8 1ffe 001e 0000 0000 0000               ............

080073d4 <CAN_NODE_0_LMO_29_Config>:
 80073d4:	8be8 1ffe 001f 0000 0000 0000               ............

080073e0 <CAN_NODE_0_LMO_30_Config>:
 80073e0:	8c08 1ffe 0020 0000 0000 0000               .... .......

080073ec <CAN_NODE_0_LMO_31_Config>:
 80073ec:	8c28 1ffe 0021 0000 0000 0000               (...!.......

080073f8 <CAN_NODE_0_LMO_32_Config>:
 80073f8:	8c48 1ffe 0022 0000 0000 0000               H...".......

08007404 <CAN_NODE_0>:
 8007404:	8850 1ffe 4300 4801 885c 1ffe 7284 0800     P....C.H\....r..
 8007414:	7290 0800 729c 0800 72a8 0800 72b4 0800     .r...r...r...r..
 8007424:	72c0 0800 72cc 0800 72d8 0800 72e4 0800     .r...r...r...r..
 8007434:	72f0 0800 72fc 0800 7308 0800 7314 0800     .r...r...s...s..
 8007444:	7320 0800 732c 0800 7338 0800 7344 0800      s..,s..8s..Ds..
 8007454:	7350 0800 735c 0800 7368 0800 7374 0800     Ps..\s..hs..ts..
 8007464:	7380 0800 738c 0800 7398 0800 73a4 0800     .s...s...s...s..
 8007474:	73b0 0800 73bc 0800 73c8 0800 73d4 0800     .s...s...s...s..
 8007484:	73e0 0800 73ec 0800 73f8 0800 7280 0800     .s...s...s...r..
 8007494:	7258 0800 7260 0800 726c 0800 7274 0800     Xr..`r..lr..tr..
 80074a4:	0102 0020 0000 0000                         .. .....

080074ac <CommandSeperator>:
 80074ac:	0020 0000 0a0d 6552 6563 7669 6465 3020      .....Received 0
 80074bc:	2578 7830 2520 0075 3020 2578 7830 0000     x%0x %u. 0x%0x..
 80074cc:	0a0d 0000 6361 6974 6576 0000 6170 7373     ....active..pass
 80074dc:	7669 0065 003a 0000 7573 6772 0065 0000     ive.:...surge...
 80074ec:	6e6f 0000 6553 646e 0000 0000 6345 6f68     on..Send....Echo
 80074fc:	0000 0000 7553 6772 0065 0000 6e41 6c61     ....Surge...Anal
 800750c:	7a79 7265 0000 0000 0a0d 6e55 6e6b 776f     yzer......Unknow
 800751c:	206e 6f63 6d6d 6e61 2064 2527 2773 0a0d     n command '%s'..
 800752c:	0000 0000 0a0d 6552 7573 746c 203a 7553     ......Result: Su
 800753c:	6363 7365 0d73 000a 0a0d 6552 7573 746c     ccess.....Result
 800754c:	203a 6146 6c69 7275 0d65 000a 3e0d 2520     : Failure....> %
 800755c:	0073 0000 0a0d 6552 7573 746c 203a 6146     s.....Result: Fa
 800756c:	6c69 7275 2065 6573 646e 6e69 2067 4143     ilure sending CA
 800757c:	0d4e 000a 0a0d 6341 6974 6176 6974 6e6f     N.....Activation
 800758c:	6220 2079 7562 7474 6e6f 0a0d 0000 0000      by button......
 800759c:	0a0d 6544 6361 6974 6176 6974 6e6f 6220     ..Deactivation b
 80075ac:	2079 7562 7474 6e6f 0a0d 0000 0043          y button....C.

080075ba <_ctype_>:
 80075ba:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80075ca:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80075da:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80075ea:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80075fa:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 800760a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 800761a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 800762a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 800763a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80076ba:	2300 302d 202b 6800 4c6c 6500 6766 4645     .#-0+ .hlL.efgEF
 80076ca:	0047 3130 3332 3534 3736 3938 4241 4443     G.0123456789ABCD
 80076da:	4645 3000 3231 3433 3635 3837 6139 6362     EF.0123456789abc
 80076ea:	6564 0066 0000                              def...
